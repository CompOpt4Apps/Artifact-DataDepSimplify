[
  [
    {
      "Name" : "SpMV for CSR",
      "Input Type" : "IEgenLIB Relation",
      "Index" : "1",
      "Relation" : "{ [i,k] -> [ip,kp] : i = ip and i < ip and 0 <= i and i < n and 0 <= ip and ip < n and rowPtr(i) <= k and k < rowPtr(i+1) and rowPtr(ip) <= kp and kp < rowPtr(ip+1) }",

      "Efficient Inspector complexity:" : "0",
      "Efficient Inspector complexity after adding domain info:" : "0",
      "Expected" : "Not Satisfiable",
      "What helps to detect unsat 1:" : "Linear inconsistency",

      "UFS" :
      [
        { 
           "Name" : "colIdx",
           "Domain" : "{[i]:0<=i &&i<nnz}",
           "Range" : "{[j]:0<=j &&j<n}",
           "Bijective" : "false",
           "Monotonicity" : "Monotonic_NONE"
        },
        { 
           "Name" : "rowPtr",
           "Domain" : "{[j]:0<=j &&j<n}",
           "Range" : "{[i]:0<=i &&i<nnz}",
           "Bijective" : "false",
           "Monotonicity" : "Monotonic_Increasing"
        }
      ],
      "User Defined" :
      [
        {
          "Type" : "Triangulairty",
          "UniQuantVar" : "[e1,e2]",
          "Rule (comment)" : "Forall e1,e2,  e1 < rowPtr(e2) => colIdx(e1) < e2",
          "p" : "e1 < rowPtr(e2)",
          "q" : "colIdx(e1) < e2"
        }
      ],
      "Do Not Project Out" :
      [
        "i", "ip"
      ],
      "Remove Constraints" : "0",
      "Comment: Code" : [
                  "Following is the Forward solve for CSR.",
                  "for (i=0; i<n; i++) {",
                  "  for(k=rowptr[i]; k<rowptr[i+1]; k++){",
                  "S1: y[i] = y[i] + spMatrix[k]*x[col[k]];",
                  "  }",
                  "}"
                  ],
      "Comment: Source of data access in the code for this relation" : [
                    " ",
                    "write/read y[i] in S1:"
                  ]
    },
    {
      "Name" : "Forward solve for CSR",
      "Input Type" : "IEgenLIB Relation",
      "Index" : "2",
      "Relation" : "{ [i,k] -> [ip,kp] : i = ip and i < ip and 0 <= i and i < n and 0 <= ip and ip < n and rowPtr(i) <= k and k < rowPtr(i+1) and rowPtr(ip) <= kp and kp < rowPtr(ip+1) }",

      "Efficient Inspector complexity:" : "0",
      "Efficient Inspector complexity after adding domain info:" : "0",
      "Expected" : "Not Satisfiable",
      "What helps to detect unsat 1:" : "Linear inconsistency",

      "Comment: Source of data access in the code for this relation" : [
                    " ",
                    "write/read y[i] in S1:"
                  ]
    }
  ]
]

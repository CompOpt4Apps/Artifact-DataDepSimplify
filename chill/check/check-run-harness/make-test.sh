#!/bin/sh

## input:
#   $1 - harness file path

r_lparen='\('
r_rparen='\)'
r_ws_opt='\s*'
r_c_comment='\/\/'
r_py_comment='#'
r_sq="\\'"
r_dq="\\\""
r_q="[${r_sq}${r_dq}]"
r_qname="${r_ws_opt}${r_q}${r_lparen}.*${r_rparen}${r_q}${r_ws_opt}"

r_destination_pattern="^${r_ws_opt}destination(${r_qname})"
r_source_pattern="^${r_ws_opt}source(${r_qname})"
r_procedure_pattern="^${r_ws_opt}procedure(${r_qname})"
r_cuda_source_procedure_pattern="^${r_ws_opt}read_IR(${r_qname},${r_qname})"

get_opt_from_c() {
    ## input
    #   $1 - file path
    #   $2 - option name
    local pattern="^${r_c_comment}>$2${r_ws_opt}:${r_ws_opt}${r_lparen}.*${r_rparen}"
    local cmd="sed -n \"s/$pattern/\\1/p\" $1"
    echo `eval $cmd`
}

get_opt_from_py() {
    ## input
    #   $1 - file path
    #   $2 - option name
    local pattern="^${r_py_comment}>$2${r_ws_opt}:${r_ws_opt}${r_lparen}.*${r_rparen}"
    local cmd="sed -n \"s/$pattern/\\1/p\" $1"
    echo `eval $cmd`
}

get_destination_from_test_script() {
    ## input
    #   $1 - file path
    local cmd="sed -n \"s/$r_destination_pattern/\\1/p\" $1"
    echo `eval $cmd`
}

get_source_from_test_script() {
    ## input
    #   $1 - file path
    if [ -z ${1##*/cuda-chill/testcases/*.py} ]; then
        local cmd="sed -n \"s/$r_cuda_source_procedure_pattern/\\1/p\" $1"
        echo `eval $cmd`
    else
        local cmd="sed -n \"s/$r_source_pattern/\\1/p\" $1"
        echo `eval $cmd`
    fi
}

get_procedure_from_test_script() {
    ## input
    #   $1 - file path
    if [ -z ${1##*/cuda-chill/testcases/*.py} ]; then
        local cmd="sed -n \"s/$r_cuda_source_procedure_pattern/\\2/p\" $1"
        echo `eval $cmd`
    else
        local cmd="sed -n \"s/$r_procedure_pattern/\\1/p\" $1"
        echo `eval $cmd`
    fi
}

chill_dir=`readlink -f $(dirname $0)/../../`
harness_dir=`readlink -f $(dirname $1)`
harness_name=`basename $1`
test_dir=`readlink -f $(dirname $0)`

harness_source=$harness_dir/$harness_name

procedure_compiler=`get_opt_from_c $1 procedure_compiler`
procedure_linker=`get_opt_from_c $1 procedure_linker`

script_file=$chill_dir/`get_opt_from_c $1 script`
original_header=$chill_dir/`get_opt_from_c $1 original_header`

original_source=`dirname $script_file`/`get_source_from_test_script $script_file`
procedure_name=`get_procedure_from_test_script $script_file`
generated_source=`dirname $script_file`/`get_destination_from_test_script $script_file`

harness_object="$test_dir/harness_object.o"
procedure_source="$test_dir/procedure_generated.${generated_source##*.}"
procedure_object="$test_dir/procedure_object.o"
test_exec="$test_dir/test_exec"

echo "#!/bin/sh"
echo "## generated by $0"
echo ""
echo "#harness_source             = \"$harness_source\""
echo "#procedure_name             = \"$procedure_name\""
echo "#procedure_compiler         = \"$procedure_compiler\""
echo "#procedure_linker           = \"$procedure_linker\""
echo "#original_header            = \"$original_header\""
echo "#original_source            = \"$original_source\""
echo "#generated_source           = \"$generated_source\""
echo "#combinded_procedure_source = \"$procedure_source\""
echo ""
echo ""
#echo "## create and step into the test directory"
#echo "mkdir $test_dir"
#echo "pushd $test_dir > /dev/null"
echo ""
echo "## compile harness"
echo "g++ -std=c++11 -c $harness_source -o $harness_object"
echo ""
echo "## create & compile procedure source"
echo "m4 \\"
echo "      -Dproc_name=$procedure_name\\"
echo "      -Doriginal_header=$original_header\\"
echo "      -Doriginal_source=$original_source\\"
echo "      -Dgenerated_source=$generated_source\\"
echo "      $harness_dir/c-wrapper.c.m4 > $procedure_source"
echo ""
echo "$procedure_compiler -c $procedure_source -o $procedure_object"
echo ""
echo "## link"
echo "$procedure_linker $harness_object $procedure_object -o $test_exec"
echo ""
echo "## run test"
echo "$test_exec"
echo "err_code=\$?"
echo ""
echo "## remove temparary objects"
echo "rm $harness_object"
echo "rm $procedure_source"
echo "rm $procedure_object"
echo "rm $test_exec"
echo ""
#echo "## leave the test directory and remove it"
#echo "popd > /dev/null"
#echo "#rm -r $test_dir"
echo "## exit with error code"
echo "exit \$err_code"
echo ""


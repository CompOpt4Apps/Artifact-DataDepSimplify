for(t2 = 0; t2 <= 3; t2++) {
  if (intMod(s+t2,2) == 0) {
    for(t4 = t2-3; t4 <= -t2+66; t4++) {
      for(t6 = t2-3; t6 <= -t2+66; t6++) {
        for(t8 = -3; t8 <= 66; t8++) {
          s0(t2,t4,t6,t8);
          s1(t2,t4,t6,t8);
          s2(t2,t4,t6,t8);
        }
      }
    }
  }
  else {
    for(t4 = t2-3; t4 <= -t2+66; t4++) {
      for(t6 = t2-3; t6 <= -t2+66; t6++) {
        for(t8 = -3; t8 <= 66; t8++) {
          s3(t2,t4,t6,t8);
          s4(t2,t4,t6,t8);
          s5(t2,t4,t6,t8);
        }
      }
    }
  }
}


for(t2 = 0; t2 <= 3; t2++) {
  if (intMod(s+t2,2) == 0) {
    for(t4 = 3*t2-3; t4 <= t2+66; t4++) {
      for(t6 = t2-3; t6 <= -t2+66; t6++) {
        for(t8 = -3; t8 <= 66; t8++) {
          s0(t2,-2*t2+t4,t6,t8);
          s1(t2,-2*t2+t4,t6,t8);
          s2(t2,-2*t2+t4,t6,t8);
        }
      }
    }
  }
  else {
    for(t4 = 3*t2-3; t4 <= t2+66; t4++) {
      for(t6 = t2-3; t6 <= -t2+66; t6++) {
        for(t8 = -3; t8 <= 66; t8++) {
          s3(t2,-2*t2+t4,t6,t8);
          s4(t2,-2*t2+t4,t6,t8);
          s5(t2,-2*t2+t4,t6,t8);
        }
      }
    }
  }
}


for(t2 = -6; t2 <= 70; t2++) {
  for(t4 = max(0,t2-66); t4 <= min(3,intFloor(t2+3,3)); t4++) {
    if (intMod(s+t4,2) == 0) {
      for(t6 = t4-3; t6 <= -t4+66; t6++) {
        for(t8 = -3; t8 <= 66; t8++) {
          s0(t4,-2*t4+t2,t6,t8);
          s1(t4,-2*t4+t2,t6,t8);
          s2(t4,-2*t4+t2,t6,t8);
        }
      }
    }
    if (intMod(s+t4+1,2) == 0) {
      for(t6 = t4-3; t6 <= -t4+66; t6++) {
        for(t8 = -3; t8 <= 66; t8++) {
          s3(t4,-2*t4+t2,t6,t8);
          s4(t4,-2*t4+t2,t6,t8);
          s5(t4,-2*t4+t2,t6,t8);
        }
      }
    }
  }
}


for(t2 = -6; t2 <= 70; t2++) {
  for(t4 = max(intMod(-s,2),t2-66+intMod(-s-(t2-66),2)); t4 <= min(3,intFloor(t2+3,3)); t4 += 2) {
    for(t6 = t4-3; t6 <= -t4+66; t6++) {
      for(t8 = -3; t8 <= 66; t8++) {
        s0(t4,-2*t4+t2,t6,t8);
      }
    }
  }
  for(t4 = max(intMod(-s,2),t2-66+intMod(-s-(t2-66),2)); t4 <= min(3,intFloor(t2+3,3)); t4 += 2) {
    for(t6 = t4-3; t6 <= -t4+66; t6++) {
      for(t8 = -3; t8 <= 66; t8++) {
        s1(t4,-2*t4+t2,t6,t8);
      }
    }
  }
  for(t4 = max(intMod(-s,2),t2-66+intMod(-s-(t2-66),2)); t4 <= min(3,intFloor(t2+3,3)); t4 += 2) {
    for(t6 = t4-3; t6 <= -t4+66; t6++) {
      for(t8 = -3; t8 <= 66; t8++) {
        s2(t4,-2*t4+t2,t6,t8);
      }
    }
  }
  for(t4 = max(intMod(-s-1,2),t2-66+intMod(-s-1-(t2-66),2)); t4 <= min(3,intFloor(t2+3,3)); t4 += 2) {
    for(t6 = t4-3; t6 <= -t4+66; t6++) {
      for(t8 = -3; t8 <= 66; t8++) {
        s3(t4,-2*t4+t2,t6,t8);
      }
    }
  }
  for(t4 = max(intMod(-s-1,2),t2-66+intMod(-s-1-(t2-66),2)); t4 <= min(3,intFloor(t2+3,3)); t4 += 2) {
    for(t6 = t4-3; t6 <= -t4+66; t6++) {
      for(t8 = -3; t8 <= 66; t8++) {
        s4(t4,-2*t4+t2,t6,t8);
      }
    }
  }
  for(t4 = max(intMod(-s-1,2),t2-66+intMod(-s-1-(t2-66),2)); t4 <= min(3,intFloor(t2+3,3)); t4 += 2) {
    for(t6 = t4-3; t6 <= -t4+66; t6++) {
      for(t8 = -3; t8 <= 66; t8++) {
        s5(t4,-2*t4+t2,t6,t8);
      }
    }
  }
}


destination array : _out
source array      : _in
dimensions        : 3

Dimension  Variable  MinOffset  MaxOffset  Width
---------  --------  ---------  ---------  -----
    0         k         -1         1         3
    1         j         -1         1         3
    2         i         -1         1         3

    k    j    i   coefficient
 ---- ---- ----   -----------
    0    0    0    (-128 / 30)
   -1    0    0    (14 / 30)
    0   -1    0    (14 / 30)
    0    1    0    (14 / 30)
    1    0    0    (14 / 30)
    0    0   -1    (14 / 30)
    0    0    1    (14 / 30)
   -1    0   -1    (3 / 30)
    0   -1   -1    (3 / 30)
    0    1   -1    (3 / 30)
    1    0   -1    (3 / 30)
   -1   -1    0    (3 / 30)
   -1    1    0    (3 / 30)
    1   -1    0    (3 / 30)
    1    1    0    (3 / 30)
   -1    0    1    (3 / 30)
    0   -1    1    (3 / 30)
    0    1    1    (3 / 30)
    1    0    1    (3 / 30)
   -1   -1   -1    (1 / 30)
   -1    1   -1    (1 / 30)
    1   -1   -1    (1 / 30)
    1    1   -1    (1 / 30)
   -1   -1    1    (1 / 30)
   -1    1    1    (1 / 30)
    1   -1    1    (1 / 30)
    1    1    1    (1 / 30)

the lower bound of the inner loop is -3
the upper bound of the inner loop is 66

the array being written is:_out
its dimension is:3

the array being read is:_in
its dimension is:3

iteration space of the initializing statement is 
{ Sym=[s] [t,k,j,i] : exists ( alpha : s+t+2alpha = 0 && 3+i = 0 && 0 <= t <= 3, k+3, -k+66, j+3, -j+66) }
transforming the xform using the relation:
{[In_1,In_2,In_3,In_4,In_5,In_6,In_7,In_8,In_9] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7,Out_8,Out_9] : In_1 = Out_1 && In_2 = Out_2 && In_3 = Out_3 && In_4 = Out_4 && In_5 = Out_5 && In_6 = Out_6 && 1+In_7 = Out_7 && In_8 = Out_8 && In_9 = Out_9 }
{[t,k,j,i] : i <= 64 }
destination array : _in
source array      : _out
dimensions        : 3

Dimension  Variable  MinOffset  MaxOffset  Width
---------  --------  ---------  ---------  -----
    0         k         -1         1         3
    1         j         -1         1         3
    2         i         -1         1         3

    k    j    i   coefficient
 ---- ---- ----   -----------
    0    0    0    (-128 / 30)
   -1    0    0    (14 / 30)
    0   -1    0    (14 / 30)
    0    1    0    (14 / 30)
    1    0    0    (14 / 30)
    0    0   -1    (14 / 30)
    0    0    1    (14 / 30)
   -1    0   -1    (3 / 30)
    0   -1   -1    (3 / 30)
    0    1   -1    (3 / 30)
    1    0   -1    (3 / 30)
   -1   -1    0    (3 / 30)
   -1    1    0    (3 / 30)
    1   -1    0    (3 / 30)
    1    1    0    (3 / 30)
   -1    0    1    (3 / 30)
    0   -1    1    (3 / 30)
    0    1    1    (3 / 30)
    1    0    1    (3 / 30)
   -1   -1   -1    (1 / 30)
   -1    1   -1    (1 / 30)
    1   -1   -1    (1 / 30)
    1    1   -1    (1 / 30)
   -1   -1    1    (1 / 30)
   -1    1    1    (1 / 30)
    1   -1    1    (1 / 30)
    1    1    1    (1 / 30)

the lower bound of the inner loop is -3
the upper bound of the inner loop is 66

the array being written is:_in
its dimension is:3

the array being read is:_out
its dimension is:3

iteration space of the initializing statement is 
{ Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+t+2alpha = 0 && 3+i = 0 && 0 <= t <= 3, k+3, -k+66, j+3, -j+66) }
transforming the xform using the relation:
{[In_1,In_2,In_3,In_4,In_5,In_6,In_7,In_8,In_9] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7,Out_8,Out_9] : In_1 = Out_1 && In_2 = Out_2 && In_3 = Out_3 && In_4 = Out_4 && In_5 = Out_5 && In_6 = Out_6 && 1+In_7 = Out_7 && In_8 = Out_8 && In_9 = Out_9 }
{[t,k,j,i] : i <= 64 }

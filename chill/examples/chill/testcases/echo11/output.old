source: jacobi_box_1_64.c
procedure is smooth_box_1_64
format: rose
format rose
LOOP ':' NUMBER   parse the file because we haven't yet
CIT_ROSE
LOOP  ir_code = new IR_roseCode(source_filename, procedure_name);
IR_chillCode::IR_chillCode() NO PARAMETERS
IR_roseCode::IR_roseCode( file_name jacobi_box_1_64.c, proc_name smooth_box_1_64 )
IR_roseCode::IR_roseCode  actually parsing jacobi_box_1_64.c using rose?
IR_roseCode::IR_roseCode()  project defined. file parsed by Rose
creating chillAST from Rose AST
442 top nodes


421   0x7f6f1df8f010   declarations    node SgTypedefDeclaration

sometimes structs are this calling  ConvertRoseTypeDefDecl


ConvertRoseTypeDefDecl()
a new type called box_type
chillAST_TypedefDecl::chillAST_TypedefDecl( underlying type , newtype box_type )
11 subparts

subpart  0 base_type
ConvertRoseTypeDefDecl()   thing is of type SgClassType

subpart  1 type
ConvertRoseTypeDefDecl()   thing is of type SgTypedefType

subpart  2 declaration
ConvertRoseTypeDefDecl()   thing is of type SgClassDeclaration
it's a declaration!!
gonna return a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a SourceFile
shortened name is unnamedStructAtLine4

blurb is 'struct unnamedStructAtLine4'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine4, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine4 has 18 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine5

temp struct unnamedStructAtLine5
parseArrayParts( struct unnamedStructAtLine5 ) => 
struct struct unnamedStructAtLine4 has member 0 of vartype struct unnamedStructAtLine5
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine5

parseArrayParts( struct unnamedStructAtLine5 ) => 
vartype: struct unnamedStructAtLine5
varname: low
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine5

blurb is 'struct unnamedStructAtLine5'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine5, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine5 has 9 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine5  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine5 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x20df040
2name i numdimensions 0
int i
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member i vardecl
ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2c27b0 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine5 member 0
int i
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine5  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine5 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x20df440
2name j numdimensions 0
int j
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member j vardecl
ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2c28d8 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine5 member 1
int j
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine5  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine5 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x20df800
2name k numdimensions 0
int k
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member k vardecl
ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2c2a00 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine5 member 2
int k
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine5  subpart 3   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine5  subpart 4   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine5  subpart 5   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine5  subpart 6   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine5  subpart 7   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine5  subpart 8   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine5
yep, RD is a struct
struct {
  int i;
  int j;
  int k;
} 

here is the struct definition:
struct {
  int i;
  int j;
  int k;
} 

we need to declare a variable of this STRUCT type named low
chillAST_VarDecl::chillAST_VarDecl( low  0x20df940 struct setting vardef of low to 0x20de760
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member low vardecl
vardecl low IS A STRUCT

printing struct unnamedStructAtLine4 member 0
struct { int i; int j; int k; } low
(VarDecl "'unnamedStructAtLine5' 'low' ''"  n_dim 0  )  vardef 0x20de760
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine6

temp struct unnamedStructAtLine6
parseArrayParts( struct unnamedStructAtLine6 ) => 
struct struct unnamedStructAtLine4 has member 1 of vartype struct unnamedStructAtLine6
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine6

parseArrayParts( struct unnamedStructAtLine6 ) => 
vartype: struct unnamedStructAtLine6
varname: dim
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine6

blurb is 'struct unnamedStructAtLine6'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine6, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine6 has 9 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine6  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine6 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x20e01d0
2name i numdimensions 0
int i
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member i vardecl
ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2c2c50 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine6 member 0
int i
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine6  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine6 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x20e05c0
2name j numdimensions 0
int j
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member j vardecl
ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2c2d78 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine6 member 1
int j
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine6  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine6 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x20e0990
2name k numdimensions 0
int k
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member k vardecl
ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2c2ea0 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine6 member 2
int k
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine6  subpart 3   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine6  subpart 4   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine6  subpart 5   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine6  subpart 6   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine6  subpart 7   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine6  subpart 8   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine6
yep, RD is a struct
struct {
  int i;
  int j;
  int k;
} 

here is the struct definition:
struct {
  int i;
  int j;
  int k;
} 

we need to declare a variable of this STRUCT type named dim
chillAST_VarDecl::chillAST_VarDecl( dim  0x20e0ab0 struct setting vardef of dim to 0x20ded40
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member dim vardecl
vardecl dim IS A STRUCT

printing struct unnamedStructAtLine4 member 1
struct { int i; int j; int k; } dim
(VarDecl "'unnamedStructAtLine6' 'dim' ''"  n_dim 0  )  vardef 0x20ded40
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine7

temp struct unnamedStructAtLine7
parseArrayParts( struct unnamedStructAtLine7 ) => 
struct struct unnamedStructAtLine4 has member 2 of vartype struct unnamedStructAtLine7
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine7

parseArrayParts( struct unnamedStructAtLine7 ) => 
vartype: struct unnamedStructAtLine7
varname: dim_with_ghosts
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine7

blurb is 'struct unnamedStructAtLine7'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine7, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine7 has 9 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine7  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine7 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x20e1360
2name i numdimensions 0
int i
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member i vardecl
ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2c30f0 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine7 member 0
int i
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine7  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine7 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x20e1740
2name j numdimensions 0
int j
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member j vardecl
ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2c3218 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine7 member 1
int j
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine7  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine7 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x20e1b00
2name k numdimensions 0
int k
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member k vardecl
ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2c3340 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine7 member 2
int k
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine7  subpart 3   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine7  subpart 4   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine7  subpart 5   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine7  subpart 6   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine7  subpart 7   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine7  subpart 8   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine7
yep, RD is a struct
struct {
  int i;
  int j;
  int k;
} 

here is the struct definition:
struct {
  int i;
  int j;
  int k;
} 

we need to declare a variable of this STRUCT type named dim_with_ghosts
chillAST_VarDecl::chillAST_VarDecl( dim_with_ghosts  0x20e0ff0 struct setting vardef of dim_with_ghosts to 0x20dfd40
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member dim_with_ghosts vardecl
vardecl dim_with_ghosts IS A STRUCT

printing struct unnamedStructAtLine4 member 2
struct { int i; int j; int k; } dim_with_ghosts
(VarDecl "'unnamedStructAtLine7' 'dim_with_ghosts' ''"  n_dim 0  )  vardef 0x20dfd40
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 3   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine4 has member 3 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: ghosts
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int ghosts   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name ghosts, arraypart '' ) 0x20e1db0
2name ghosts numdimensions 0
int ghosts
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member ghosts vardecl
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value 0x7f6f1e2c3590 from  SgInitializedName
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine4 member 3
int ghosts
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 4   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine4 has member 4 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: pencil
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int pencil   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name pencil, arraypart '' ) 0x20e21a0
2name pencil numdimensions 0
int pencil
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member pencil vardecl
ConvertRoseInitName()  storing variable declaration 'pencil' with unique value 0x7f6f1e2c36b8 from  SgInitializedName
(VarDecl "'int' 'pencil' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine4 member 4
int pencil
(VarDecl "'int' 'pencil' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 5   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine4 has member 5 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: plane
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int plane   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name plane, arraypart '' ) 0x20e2590
2name plane numdimensions 0
int plane
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member plane vardecl
ConvertRoseInitName()  storing variable declaration 'plane' with unique value 0x7f6f1e2c37e0 from  SgInitializedName
(VarDecl "'int' 'plane' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine4 member 5
int plane
(VarDecl "'int' 'plane' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 6   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine4 has member 6 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: volume
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int volume   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name volume, arraypart '' ) 0x20e2980
2name volume numdimensions 0
int volume
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member volume vardecl
ConvertRoseInitName()  storing variable declaration 'volume' with unique value 0x7f6f1e2c3908 from  SgInitializedName
(VarDecl "'int' 'volume' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine4 member 6
int volume
(VarDecl "'int' 'volume' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 7   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int [27UL]
parseArrayParts( int [27UL] ) => [27]
struct struct unnamedStructAtLine4 has member 7 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int [27UL] ) => [27]
vartype: int
varname: bufsizes
arraypart [27]

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int [27UL] ) => [27]
underlying 'int'
ARRAY TYPE
but arraypart is already '[27]'
vartype = 'int'
arraypart = '[27]'
int bufsizes   arraypart = '[27]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name bufsizes, arraypart '[27]' ) 0x20e2dc0
[27] =  + [27]
2name bufsizes numdimensions 1
int bufsizes[27]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member bufsizes vardecl
ConvertRoseInitName()  storing variable declaration 'bufsizes' with unique value 0x7f6f1e2c3a30 from  SgInitializedName
(VarDecl "'int' 'bufsizes' '[27]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine4 member 7
int bufsizes[27]
(VarDecl "'int' 'bufsizes' '[27]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 8   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp double *__restrict__ [27UL]
after = '[27UL]'
parseArrayParts( double *[27UL] ) => *[27]
struct struct unnamedStructAtLine4 has member 8 of vartype double
ConvertRoseVarDecl2() 
1 initialized names
after = '[27UL]'
parseArrayParts( double *[27UL] ) => *[27]
vartype: double
varname: surface_bufs
arraypart *[27]

checking ugly special case
vartype is double
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
after = '[27UL]'
parseArrayParts( double *__restrict__ [27UL] ) => *[27]
underlying 'double'
ARRAY TYPE
but arraypart is already '*[27]'
vartype = 'double'
arraypart = '*[27]'
double surface_bufs   arraypart = '*[27]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name surface_bufs, arraypart '*[27]' ) 0x20e30d0
*[27] = * + [27]
2name surface_bufs numdimensions 2
double *surface_bufs[27]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member surface_bufs vardecl
ConvertRoseInitName()  storing variable declaration 'surface_bufs' with unique value 0x7f6f1e2c3b58 from  SgInitializedName
(VarDecl "'double' 'surface_bufs' '*[27]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine4 member 8
double * __restrict__ surface_bufs[27]
(VarDecl "'double' 'surface_bufs' '*[27]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 9   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp double *__restrict__ [27UL]
after = '[27UL]'
parseArrayParts( double *[27UL] ) => *[27]
struct struct unnamedStructAtLine4 has member 9 of vartype double
ConvertRoseVarDecl2() 
1 initialized names
after = '[27UL]'
parseArrayParts( double *[27UL] ) => *[27]
vartype: double
varname: ghost_bufs
arraypart *[27]

checking ugly special case
vartype is double
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
after = '[27UL]'
parseArrayParts( double *__restrict__ [27UL] ) => *[27]
underlying 'double'
ARRAY TYPE
but arraypart is already '*[27]'
vartype = 'double'
arraypart = '*[27]'
double ghost_bufs   arraypart = '*[27]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name ghost_bufs, arraypart '*[27]' ) 0x20e3720
*[27] = * + [27]
2name ghost_bufs numdimensions 2
double *ghost_bufs[27]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member ghost_bufs vardecl
ConvertRoseInitName()  storing variable declaration 'ghost_bufs' with unique value 0x7f6f1e2c3c80 from  SgInitializedName
(VarDecl "'double' 'ghost_bufs' '*[27]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine4 member 9
double * __restrict__ ghost_bufs[27]
(VarDecl "'double' 'ghost_bufs' '*[27]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 10   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine4 has member 10 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: numGrids
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int numGrids   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name numGrids, arraypart '' ) 0x20e3a50
2name numGrids numdimensions 0
int numGrids
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member numGrids vardecl
ConvertRoseInitName()  storing variable declaration 'numGrids' with unique value 0x7f6f1e2c3da8 from  SgInitializedName
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine4 member 10
int numGrids
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 11   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp double **__restrict__
after = ''
parseArrayParts( double ** ) => **
struct struct unnamedStructAtLine4 has member 11 of vartype double
ConvertRoseVarDecl2() 
1 initialized names
after = ''
parseArrayParts( double ** ) => **
vartype: double **
varname: grids
arraypart **

checking ugly special case
vartype is double **
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
after = ''
parseArrayParts( double **__restrict__ ) => **
underlying 'double'
vartype = 'double'
arraypart = '**'
double grids   arraypart = '**'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name grids, arraypart '**' ) 0x20e3ec0
** = ** + 
2name grids numdimensions 2
double **grids
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member grids vardecl
ConvertRoseInitName()  storing variable declaration 'grids' with unique value 0x7f6f1e2c3ed0 from  SgInitializedName
(VarDecl "'double' 'grids' '**'"  n_dim 2  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine4 member 11
double ** __restrict__ grids
(VarDecl "'double' 'grids' '**'"  n_dim 2  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 12   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 13   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 14   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 15   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 16   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine4  subpart 17   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine4
yep, RD is a struct
struct {
  struct { int i; int j; int k; } low;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } dim_with_ghosts;
  int ghosts;
  int pencil;
  int plane;
  int volume;
  int bufsizes[27];
  double * __restrict__ surface_bufs[27];
  double * __restrict__ ghost_bufs[27];
  int numGrids;
  double ** __restrict__ grids;
} 
definition that this typedecl called box_type really is, is:
struct {
  struct { int i; int j; int k; } low;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } dim_with_ghosts;
  int ghosts;
  int pencil;
  int plane;
  int volume;
  int bufsizes[27];
  double * __restrict__ surface_bufs[27];
  double * __restrict__ ghost_bufs[27];
  int numGrids;
  double ** __restrict__ grids;
} 


SOURCEFILE adding typedef box_type to typedeftable
now global typedef table has 1 entries
done with SgTypedefDeclaration


422   0x7f6f1e3bf908   declarations    node SgFunctionDeclaration
ConvertRoseFunctionDecl( destroy_box )
ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( box_type * ) => *
underlying 'box_type'
OK, looking for box_type
FunctionDecl looking for datatype box_type
SourceFile looking for datatype box_type
1 global typedefs
comparing to box_type
found it
buh IS typedef struct {
  struct { int i; int j; int k; } low;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } dim_with_ghosts;
  int ghosts;
  int pencil;
  int plane;
  int volume;
  int bufsizes[27];
  double * __restrict__ surface_bufs[27];
  double * __restrict__ ghost_bufs[27];
  int numGrids;
  double ** __restrict__ grids;
} 
OK, this is a typedef or struct we have to account for
vartype = 'box_type'
arraypart = '*'
box_type box   arraypart = '*'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( box  typedef * = * + 

chillAST_FunctionDecl addVariableToSymbolTable( box )
adding box_type box to a symbol table that didn't already have it
box_type;
0  box_type *box

ConvertRoseInitName()  storing variable declaration 'box' with unique value 0x7f6f1e2c3ff8 from  SgInitializedName
(VarDecl "'box_type' 'box' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20d9e70
NOT PARAMETER

new parameter:
(VarDecl "'box_type' 'box' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20d9e70
PARAMETER

destroy_box chillAST_FunctionDecl::addParameter( 0x20dd740  param box)   total of 1 parameters
(VarDecl "'box_type' 'box' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20d9e70
PARAMETER

addparameter done

function destroy_box is a forward declaration or external


423   0x7f6f1e3bfca0   declarations    node SgFunctionDeclaration
ConvertRoseFunctionDecl( create_box )
ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( box_type * ) => *
underlying 'box_type'
OK, looking for box_type
FunctionDecl looking for datatype box_type
SourceFile looking for datatype box_type
1 global typedefs
comparing to box_type
found it
buh IS typedef struct {
  struct { int i; int j; int k; } low;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } dim_with_ghosts;
  int ghosts;
  int pencil;
  int plane;
  int volume;
  int bufsizes[27];
  double * __restrict__ surface_bufs[27];
  double * __restrict__ ghost_bufs[27];
  int numGrids;
  double ** __restrict__ grids;
} 
OK, this is a typedef or struct we have to account for
vartype = 'box_type'
arraypart = '*'
box_type box   arraypart = '*'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( box  typedef * = * + 

chillAST_FunctionDecl addVariableToSymbolTable( box )
adding box_type box to a symbol table that didn't already have it
box_type;
0  box_type *box

ConvertRoseInitName()  storing variable declaration 'box' with unique value 0x7f6f1e2c4120 from  SgInitializedName
(VarDecl "'box_type' 'box' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20d9e70
NOT PARAMETER

new parameter:
(VarDecl "'box_type' 'box' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20d9e70
PARAMETER

create_box chillAST_FunctionDecl::addParameter( 0x20de380  param box)   total of 1 parameters
(VarDecl "'box_type' 'box' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20d9e70
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int numGrids   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name numGrids, arraypart '' ) 0x20e4130
2name numGrids numdimensions 0
int numGrids

chillAST_FunctionDecl addVariableToSymbolTable( numGrids )
adding int numGrids to a symbol table that didn't already have it
0  box_type *box
1  int numGrids

ConvertRoseInitName()  storing variable declaration 'numGrids' with unique value 0x7f6f1e2c4248 from  SgInitializedName
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_box chillAST_FunctionDecl::addParameter( 0x20e4130  param numGrids)   total of 2 parameters
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int low_i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name low_i, arraypart '' ) 0x20e4310
2name low_i numdimensions 0
int low_i

chillAST_FunctionDecl addVariableToSymbolTable( low_i )
adding int low_i to a symbol table that didn't already have it
0  box_type *box
1  int numGrids
2  int low_i

ConvertRoseInitName()  storing variable declaration 'low_i' with unique value 0x7f6f1e2c4370 from  SgInitializedName
(VarDecl "'int' 'low_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'low_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_box chillAST_FunctionDecl::addParameter( 0x20e4310  param low_i)   total of 3 parameters
(VarDecl "'int' 'low_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int low_j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name low_j, arraypart '' ) 0x20e45a0
2name low_j numdimensions 0
int low_j

chillAST_FunctionDecl addVariableToSymbolTable( low_j )
adding int low_j to a symbol table that didn't already have it
0  box_type *box
1  int numGrids
2  int low_i
3  int low_j

ConvertRoseInitName()  storing variable declaration 'low_j' with unique value 0x7f6f1e2c4498 from  SgInitializedName
(VarDecl "'int' 'low_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'low_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_box chillAST_FunctionDecl::addParameter( 0x20e45a0  param low_j)   total of 4 parameters
(VarDecl "'int' 'low_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int low_k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name low_k, arraypart '' ) 0x20e47f0
2name low_k numdimensions 0
int low_k

chillAST_FunctionDecl addVariableToSymbolTable( low_k )
adding int low_k to a symbol table that didn't already have it
0  box_type *box
1  int numGrids
2  int low_i
3  int low_j
4  int low_k

ConvertRoseInitName()  storing variable declaration 'low_k' with unique value 0x7f6f1e2c45c0 from  SgInitializedName
(VarDecl "'int' 'low_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'low_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_box chillAST_FunctionDecl::addParameter( 0x20e47f0  param low_k)   total of 5 parameters
(VarDecl "'int' 'low_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int dim_i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name dim_i, arraypart '' ) 0x20e4ac0
2name dim_i numdimensions 0
int dim_i

chillAST_FunctionDecl addVariableToSymbolTable( dim_i )
adding int dim_i to a symbol table that didn't already have it
0  box_type *box
1  int numGrids
2  int low_i
3  int low_j
4  int low_k
5  int dim_i

ConvertRoseInitName()  storing variable declaration 'dim_i' with unique value 0x7f6f1e2c46e8 from  SgInitializedName
(VarDecl "'int' 'dim_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'dim_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_box chillAST_FunctionDecl::addParameter( 0x20e4ac0  param dim_i)   total of 6 parameters
(VarDecl "'int' 'dim_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int dim_j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name dim_j, arraypart '' ) 0x20e4d30
2name dim_j numdimensions 0
int dim_j

chillAST_FunctionDecl addVariableToSymbolTable( dim_j )
adding int dim_j to a symbol table that didn't already have it
0  box_type *box
1  int numGrids
2  int low_i
3  int low_j
4  int low_k
5  int dim_i
6  int dim_j

ConvertRoseInitName()  storing variable declaration 'dim_j' with unique value 0x7f6f1e2c4810 from  SgInitializedName
(VarDecl "'int' 'dim_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'dim_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_box chillAST_FunctionDecl::addParameter( 0x20e4d30  param dim_j)   total of 7 parameters
(VarDecl "'int' 'dim_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int dim_k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name dim_k, arraypart '' ) 0x20e4fa0
2name dim_k numdimensions 0
int dim_k

chillAST_FunctionDecl addVariableToSymbolTable( dim_k )
adding int dim_k to a symbol table that didn't already have it
0  box_type *box
1  int numGrids
2  int low_i
3  int low_j
4  int low_k
5  int dim_i
6  int dim_j
7  int dim_k

ConvertRoseInitName()  storing variable declaration 'dim_k' with unique value 0x7f6f1e2c4938 from  SgInitializedName
(VarDecl "'int' 'dim_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'dim_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_box chillAST_FunctionDecl::addParameter( 0x20e4fa0  param dim_k)   total of 8 parameters
(VarDecl "'int' 'dim_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int ghosts   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name ghosts, arraypart '' ) 0x20e5210
2name ghosts numdimensions 0
int ghosts

chillAST_FunctionDecl addVariableToSymbolTable( ghosts )
adding int ghosts to a symbol table that didn't already have it
0  box_type *box
1  int numGrids
2  int low_i
3  int low_j
4  int low_k
5  int dim_i
6  int dim_j
7  int dim_k
8  int ghosts

ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value 0x7f6f1e2c4a60 from  SgInitializedName
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_box chillAST_FunctionDecl::addParameter( 0x20e5210  param ghosts)   total of 9 parameters
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

function create_box is a forward declaration or external


424   0x7f6f1df8f520   declarations    node SgTypedefDeclaration

sometimes structs are this calling  ConvertRoseTypeDefDecl


ConvertRoseTypeDefDecl()
a new type called bufferCopy_type
chillAST_TypedefDecl::chillAST_TypedefDecl( underlying type , newtype bufferCopy_type )
11 subparts

subpart  0 base_type
ConvertRoseTypeDefDecl()   thing is of type SgClassType

subpart  1 type
ConvertRoseTypeDefDecl()   thing is of type SgTypedefType

subpart  2 declaration
ConvertRoseTypeDefDecl()   thing is of type SgClassDeclaration
it's a declaration!!
gonna return a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a SourceFile
shortened name is unnamedStructAtLine20

blurb is 'struct unnamedStructAtLine20'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine20, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine20 has 12 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine20  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine20 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: isFace
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int isFace   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name isFace, arraypart '' ) 0x20e6160
2name isFace numdimensions 0
int isFace
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member isFace vardecl
ConvertRoseInitName()  storing variable declaration 'isFace' with unique value 0x7f6f1e2c4b88 from  SgInitializedName
(VarDecl "'int' 'isFace' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine20 member 0
int isFace
(VarDecl "'int' 'isFace' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine20  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine20 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: isEdge
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int isEdge   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name isEdge, arraypart '' ) 0x20e6580
2name isEdge numdimensions 0
int isEdge
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member isEdge vardecl
ConvertRoseInitName()  storing variable declaration 'isEdge' with unique value 0x7f6f1e2c4cb0 from  SgInitializedName
(VarDecl "'int' 'isEdge' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine20 member 1
int isEdge
(VarDecl "'int' 'isEdge' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine20  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine20 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: isCorner
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int isCorner   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name isCorner, arraypart '' ) 0x20e6900
2name isCorner numdimensions 0
int isCorner
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member isCorner vardecl
ConvertRoseInitName()  storing variable declaration 'isCorner' with unique value 0x7f6f1e2c4dd8 from  SgInitializedName
(VarDecl "'int' 'isCorner' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine20 member 2
int isCorner
(VarDecl "'int' 'isCorner' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine20  subpart 3   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine26

temp struct unnamedStructAtLine26
parseArrayParts( struct unnamedStructAtLine26 ) => 
struct struct unnamedStructAtLine20 has member 3 of vartype struct unnamedStructAtLine26
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine26

parseArrayParts( struct unnamedStructAtLine26 ) => 
vartype: struct unnamedStructAtLine26
varname: dim
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine26

blurb is 'struct unnamedStructAtLine26'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine26, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine26 has 9 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine26  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine26 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x20e7480
2name i numdimensions 0
int i
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member i vardecl
ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2c4f00 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine26 member 0
int i
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine26  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine26 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x20e7880
2name j numdimensions 0
int j
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member j vardecl
ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2c5028 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine26 member 1
int j
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine26  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine26 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x20e7d50
2name k numdimensions 0
int k
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member k vardecl
ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2c5150 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine26 member 2
int k
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine26  subpart 3   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine26  subpart 4   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine26  subpart 5   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine26  subpart 6   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine26  subpart 7   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine26  subpart 8   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine26
yep, RD is a struct
struct {
  int i;
  int j;
  int k;
} 

here is the struct definition:
struct {
  int i;
  int j;
  int k;
} 

we need to declare a variable of this STRUCT type named dim
chillAST_VarDecl::chillAST_VarDecl( dim  0x20e7e70 struct setting vardef of dim to 0x20e6ab0
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member dim vardecl
vardecl dim IS A STRUCT

printing struct unnamedStructAtLine20 member 3
struct { int i; int j; int k; } dim
(VarDecl "'unnamedStructAtLine26' 'dim' ''"  n_dim 0  )  vardef 0x20e6ab0
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine20  subpart 4   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine27

temp struct unnamedStructAtLine27
parseArrayParts( struct unnamedStructAtLine27 ) => 
struct struct unnamedStructAtLine20 has member 4 of vartype struct unnamedStructAtLine27
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine27

parseArrayParts( struct unnamedStructAtLine27 ) => 
vartype: struct unnamedStructAtLine27
varname: read
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine27

blurb is 'struct unnamedStructAtLine27'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine27, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine27 has 13 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine27 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: box
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int box   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name box, arraypart '' ) 0x20e8b00
2name box numdimensions 0
int box
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member box vardecl
ConvertRoseInitName()  storing variable declaration 'box' with unique value 0x7f6f1e2c53a0 from  SgInitializedName
(VarDecl "'int' 'box' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine27 member 0
int box
(VarDecl "'int' 'box' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine27 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x20e8f00
2name i numdimensions 0
int i
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member i vardecl
ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2c54c8 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine27 member 1
int i
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine27 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x20e92e0
2name j numdimensions 0
int j
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member j vardecl
ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2c55f0 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine27 member 2
int j
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 3   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine27 has member 3 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x20e96c0
2name k numdimensions 0
int k
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member k vardecl
ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2c5718 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine27 member 3
int k
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 4   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine27 has member 4 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: pencil
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int pencil   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name pencil, arraypart '' ) 0x20e9aa0
2name pencil numdimensions 0
int pencil
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member pencil vardecl
ConvertRoseInitName()  storing variable declaration 'pencil' with unique value 0x7f6f1e2c5840 from  SgInitializedName
(VarDecl "'int' 'pencil' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine27 member 4
int pencil
(VarDecl "'int' 'pencil' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 5   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine27 has member 5 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: plane
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int plane   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name plane, arraypart '' ) 0x20e9e90
2name plane numdimensions 0
int plane
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member plane vardecl
ConvertRoseInitName()  storing variable declaration 'plane' with unique value 0x7f6f1e2c5968 from  SgInitializedName
(VarDecl "'int' 'plane' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine27 member 5
int plane
(VarDecl "'int' 'plane' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 6   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp double *__restrict__
after = ''
parseArrayParts( double * ) => *
struct struct unnamedStructAtLine27 has member 6 of vartype double
ConvertRoseVarDecl2() 
1 initialized names
after = ''
parseArrayParts( double * ) => *
vartype: double *
varname: ptr
arraypart *

checking ugly special case
vartype is double *
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
after = ''
parseArrayParts( double *__restrict__ ) => *
underlying 'double'
vartype = 'double'
arraypart = '*'
double ptr   arraypart = '*'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name ptr, arraypart '*' ) 0x20ea270
* = * + 
2name ptr numdimensions 1
double *ptr
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member ptr vardecl
ConvertRoseInitName()  storing variable declaration 'ptr' with unique value 0x7f6f1e2c5a90 from  SgInitializedName
(VarDecl "'double' 'ptr' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine27 member 6
double * __restrict__ ptr
(VarDecl "'double' 'ptr' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 7   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 8   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 9   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 10   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 11   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine27  subpart 12   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine27
yep, RD is a struct
struct {
  int box;
  int i;
  int j;
  int k;
  int pencil;
  int plane;
  double * __restrict__ ptr;
} 

here is the struct definition:
struct {
  int box;
  int i;
  int j;
  int k;
  int pencil;
  int plane;
  double * __restrict__ ptr;
} 

we need to declare a variable of this STRUCT type named read
chillAST_VarDecl::chillAST_VarDecl( read  0x20e86d0 struct setting vardef of read to 0x20e6da0
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member read vardecl
vardecl read IS A STRUCT

printing struct unnamedStructAtLine20 member 4
struct { int box; int i; int j; int k; int pencil; int plane; double * __restrict__ ptr; } read
(VarDecl "'unnamedStructAtLine27' 'read' ''"  n_dim 0  )  vardef 0x20e6da0
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine20  subpart 5   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine27

temp struct unnamedStructAtLine27
parseArrayParts( struct unnamedStructAtLine27 ) => 
struct struct unnamedStructAtLine20 has member 5 of vartype struct unnamedStructAtLine27
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine27

parseArrayParts( struct unnamedStructAtLine27 ) => 
vartype: struct unnamedStructAtLine27
varname: write
arraypart 

checking ugly special case
vartype is struct unnamedStructAtLine27
parent is a RecordDecl
MAYBE
structName 'unnamedStructAtLine27'
struct {
  int isFace;
  int isEdge;
  int isCorner;
  struct { int i; int j; int k; } dim;
  struct { int box; int i; int j; int k; int pencil; int plane; double * __restrict__ ptr; } read;
} 


comparing 'unnamedStructAtLine27' to 'int'
comparing 'unnamedStructAtLine27' to 'int'
comparing 'unnamedStructAtLine27' to 'int'
comparing 'unnamedStructAtLine27' to 'unnamedStructAtLine26'
comparing 'unnamedStructAtLine27' to 'unnamedStructAtLine27'
struct { int box; int i; int j; int k; int pencil; int plane; double * __restrict__ ptr; } read

(VarDecl "'unnamedStructAtLine27' 'read' ''"  n_dim 0  )  vardef 0x20e6da0
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER



here is the struct definition:
struct {
  int box;
  int i;
  int j;
  int k;
  int pencil;
  int plane;
  double * __restrict__ ptr;
} 

we need to declare a variable of this STRUCT type named write
chillAST_VarDecl::chillAST_VarDecl( write  0x20ea3b0 struct setting vardef of write to 0x20e6da0
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member write vardecl
vardecl write IS A STRUCT

printing struct unnamedStructAtLine20 member 5
struct { int box; int i; int j; int k; int pencil; int plane; double * __restrict__ ptr; } write
(VarDecl "'unnamedStructAtLine27' 'write' ''"  n_dim 0  )  vardef 0x20e6da0
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine20  subpart 6   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine20  subpart 7   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine20  subpart 8   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine20  subpart 9   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine20  subpart 10   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine20  subpart 11   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine20
yep, RD is a struct
struct {
  int isFace;
  int isEdge;
  int isCorner;
  struct { int i; int j; int k; } dim;
  struct { int box; int i; int j; int k; int pencil; int plane; double * __restrict__ ptr; } read;
  struct { int box; int i; int j; int k; int pencil; int plane; double * __restrict__ ptr; } write;
} 
definition that this typedecl called bufferCopy_type really is, is:
struct {
  int isFace;
  int isEdge;
  int isCorner;
  struct { int i; int j; int k; } dim;
  struct { int box; int i; int j; int k; int pencil; int plane; double * __restrict__ ptr; } read;
  struct { int box; int i; int j; int k; int pencil; int plane; double * __restrict__ ptr; } write;
} 


SOURCEFILE adding typedef bufferCopy_type to typedeftable
now global typedef table has 2 entries
done with SgTypedefDeclaration


425   0x7f6f1df8fa30   declarations    node SgTypedefDeclaration

sometimes structs are this calling  ConvertRoseTypeDefDecl


ConvertRoseTypeDefDecl()
a new type called neighbor_type
chillAST_TypedefDecl::chillAST_TypedefDecl( underlying type , newtype neighbor_type )
11 subparts

subpart  0 base_type
ConvertRoseTypeDefDecl()   thing is of type SgClassType

subpart  1 type
ConvertRoseTypeDefDecl()   thing is of type SgTypedefType

subpart  2 declaration
ConvertRoseTypeDefDecl()   thing is of type SgClassDeclaration
it's a declaration!!
gonna return a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a SourceFile
shortened name is unnamedStructAtLine42

blurb is 'struct unnamedStructAtLine42'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine42, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine42 has 8 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine42  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine42 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: rank
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int rank   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name rank, arraypart '' ) 0x20eab60
2name rank numdimensions 0
int rank
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member rank vardecl
ConvertRoseInitName()  storing variable declaration 'rank' with unique value 0x7f6f1e2c5e08 from  SgInitializedName
(VarDecl "'int' 'rank' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine42 member 0
int rank
(VarDecl "'int' 'rank' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine42  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine42 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: local_index
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int local_index   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name local_index, arraypart '' ) 0x20eaf40
2name local_index numdimensions 0
int local_index
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member local_index vardecl
ConvertRoseInitName()  storing variable declaration 'local_index' with unique value 0x7f6f1e2c5f30 from  SgInitializedName
(VarDecl "'int' 'local_index' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine42 member 1
int local_index
(VarDecl "'int' 'local_index' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine42  subpart 2   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine42  subpart 3   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine42  subpart 4   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine42  subpart 5   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine42  subpart 6   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine42  subpart 7   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine42
yep, RD is a struct
struct {
  int rank;
  int local_index;
} 
definition that this typedecl called neighbor_type really is, is:
struct {
  int rank;
  int local_index;
} 


SOURCEFILE adding typedef neighbor_type to typedeftable
now global typedef table has 3 entries
done with SgTypedefDeclaration


426   0x7f6f1df8ff40   declarations    node SgTypedefDeclaration

sometimes structs are this calling  ConvertRoseTypeDefDecl


ConvertRoseTypeDefDecl()
a new type called subdomain_type
chillAST_TypedefDecl::chillAST_TypedefDecl( underlying type , newtype subdomain_type )
11 subparts

subpart  0 base_type
ConvertRoseTypeDefDecl()   thing is of type SgClassType

subpart  1 type
ConvertRoseTypeDefDecl()   thing is of type SgTypedefType

subpart  2 declaration
ConvertRoseTypeDefDecl()   thing is of type SgClassDeclaration
it's a declaration!!
gonna return a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a SourceFile
shortened name is unnamedStructAtLine52

blurb is 'struct unnamedStructAtLine52'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine52, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine52 has 12 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine52  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine53

temp struct unnamedStructAtLine53
parseArrayParts( struct unnamedStructAtLine53 ) => 
struct struct unnamedStructAtLine52 has member 0 of vartype struct unnamedStructAtLine53
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine53

parseArrayParts( struct unnamedStructAtLine53 ) => 
vartype: struct unnamedStructAtLine53
varname: low
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine53

blurb is 'struct unnamedStructAtLine53'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine53, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine53 has 9 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine53  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine53 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x20ec140
2name i numdimensions 0
int i
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member i vardecl
ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2c6058 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine53 member 0
int i
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine53  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine53 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x20ec530
2name j numdimensions 0
int j
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member j vardecl
ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2c6180 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine53 member 1
int j
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine53  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine53 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x20ec920
2name k numdimensions 0
int k
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member k vardecl
ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2c62a8 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine53 member 2
int k
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine53  subpart 3   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine53  subpart 4   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine53  subpart 5   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine53  subpart 6   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine53  subpart 7   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine53  subpart 8   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine53
yep, RD is a struct
struct {
  int i;
  int j;
  int k;
} 

here is the struct definition:
struct {
  int i;
  int j;
  int k;
} 

we need to declare a variable of this STRUCT type named low
chillAST_VarDecl::chillAST_VarDecl( low  0x20eca60 struct setting vardef of low to 0x20ebb20
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member low vardecl
vardecl low IS A STRUCT

printing struct unnamedStructAtLine52 member 0
struct { int i; int j; int k; } low
(VarDecl "'unnamedStructAtLine53' 'low' ''"  n_dim 0  )  vardef 0x20ebb20
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine52  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine54

temp struct unnamedStructAtLine54
parseArrayParts( struct unnamedStructAtLine54 ) => 
struct struct unnamedStructAtLine52 has member 1 of vartype struct unnamedStructAtLine54
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine54

parseArrayParts( struct unnamedStructAtLine54 ) => 
vartype: struct unnamedStructAtLine54
varname: dim
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine54

blurb is 'struct unnamedStructAtLine54'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine54, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine54 has 9 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine54  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine54 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x20ed300
2name i numdimensions 0
int i
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member i vardecl
ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2c64f8 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine54 member 0
int i
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine54  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine54 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x20ed6e0
2name j numdimensions 0
int j
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member j vardecl
ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2c6620 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine54 member 1
int j
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine54  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine54 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x20edab0
2name k numdimensions 0
int k
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member k vardecl
ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2c6748 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine54 member 2
int k
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine54  subpart 3   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine54  subpart 4   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine54  subpart 5   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine54  subpart 6   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine54  subpart 7   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine54  subpart 8   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine54
yep, RD is a struct
struct {
  int i;
  int j;
  int k;
} 

here is the struct definition:
struct {
  int i;
  int j;
  int k;
} 

we need to declare a variable of this STRUCT type named dim
chillAST_VarDecl::chillAST_VarDecl( dim  0x20edbf0 struct setting vardef of dim to 0x20ebdf0
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member dim vardecl
vardecl dim IS A STRUCT

printing struct unnamedStructAtLine52 member 1
struct { int i; int j; int k; } dim
(VarDecl "'unnamedStructAtLine54' 'dim' ''"  n_dim 0  )  vardef 0x20ebdf0
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine52  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine52 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: numLevels
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int numLevels   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name numLevels, arraypart '' ) 0x20edd10
2name numLevels numdimensions 0
int numLevels
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member numLevels vardecl
ConvertRoseInitName()  storing variable declaration 'numLevels' with unique value 0x7f6f1e2c6998 from  SgInitializedName
(VarDecl "'int' 'numLevels' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine52 member 2
int numLevels
(VarDecl "'int' 'numLevels' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine52  subpart 3   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine52 has member 3 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: ghosts
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int ghosts   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name ghosts, arraypart '' ) 0x20ee0d0
2name ghosts numdimensions 0
int ghosts
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member ghosts vardecl
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value 0x7f6f1e2c6ac0 from  SgInitializedName
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine52 member 3
int ghosts
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine52  subpart 4   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp neighbor_type [27UL]
parseArrayParts( neighbor_type [27UL] ) => [27]
struct struct unnamedStructAtLine52 has member 4 of vartype neighbor_type
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( neighbor_type [27UL] ) => [27]
vartype: neighbor_type
varname: neighbors
arraypart [27]

checking ugly special case
vartype is neighbor_type
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( neighbor_type [27UL] ) => [27]
underlying 'neighbor_type'
OK, looking for neighbor_type
RecordDecl looking for datatype neighbor_type
SourceFile looking for datatype neighbor_type
3 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
found it
buh IS typedef struct {
  int rank;
  int local_index;
} 
OK, this is a typedef or struct we have to account for
ARRAY TYPE
but arraypart is already '[27]'
vartype = 'neighbor_type'
arraypart = '[27]'
neighbor_type neighbors   arraypart = '[27]'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( neighbors  typedef [27] =  + [27]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member neighbors vardecl
ConvertRoseInitName()  storing variable declaration 'neighbors' with unique value 0x7f6f1e2c6be8 from  SgInitializedName
neighbor_type;
(VarDecl "'neighbor_type' 'neighbors' '[27]'"  n_dim 1  )  vardef (nil)
typedefinition 0x20e5d40
NOT PARAMETER


printing struct unnamedStructAtLine52 member 4
neighbor_type neighbors[27]
(VarDecl "'neighbor_type' 'neighbors' '[27]'"  n_dim 1  )  vardef (nil)
typedefinition 0x20e5d40
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine52  subpart 5   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp box_type *
parseArrayParts( box_type * ) => *
struct struct unnamedStructAtLine52 has member 5 of vartype box_type
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( box_type * ) => *
vartype: box_type *
varname: levels
arraypart *

checking ugly special case
vartype is box_type *
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( box_type * ) => *
underlying 'box_type'
OK, looking for box_type
RecordDecl looking for datatype box_type
SourceFile looking for datatype box_type
3 global typedefs
comparing to box_type
found it
buh IS typedef struct {
  struct { int i; int j; int k; } low;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } dim_with_ghosts;
  int ghosts;
  int pencil;
  int plane;
  int volume;
  int bufsizes[27];
  double * __restrict__ surface_bufs[27];
  double * __restrict__ ghost_bufs[27];
  int numGrids;
  double ** __restrict__ grids;
} 
OK, this is a typedef or struct we have to account for
vartype = 'box_type'
arraypart = '*'
box_type levels   arraypart = '*'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( levels  typedef * = * + 
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member levels vardecl
ConvertRoseInitName()  storing variable declaration 'levels' with unique value 0x7f6f1e2c6d10 from  SgInitializedName
box_type;
(VarDecl "'box_type' 'levels' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20d9e70
NOT PARAMETER


printing struct unnamedStructAtLine52 member 5
box_type *levels
(VarDecl "'box_type' 'levels' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20d9e70
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine52  subpart 6   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine52  subpart 7   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine52  subpart 8   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine52  subpart 9   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine52  subpart 10   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine52  subpart 11   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine52
yep, RD is a struct
struct {
  struct { int i; int j; int k; } low;
  struct { int i; int j; int k; } dim;
  int numLevels;
  int ghosts;
  neighbor_type neighbors[27];
  box_type *levels;
} 
definition that this typedecl called subdomain_type really is, is:
struct {
  struct { int i; int j; int k; } low;
  struct { int i; int j; int k; } dim;
  int numLevels;
  int ghosts;
  neighbor_type neighbors[27];
  box_type *levels;
} 


SOURCEFILE adding typedef subdomain_type to typedeftable
now global typedef table has 4 entries
done with SgTypedefDeclaration


427   0x7f6f1df90450   declarations    node SgTypedefDeclaration

sometimes structs are this calling  ConvertRoseTypeDefDecl


ConvertRoseTypeDefDecl()
a new type called domain_type
chillAST_TypedefDecl::chillAST_TypedefDecl( underlying type , newtype domain_type )
11 subparts

subpart  0 base_type
ConvertRoseTypeDefDecl()   thing is of type SgClassType

subpart  1 type
ConvertRoseTypeDefDecl()   thing is of type SgTypedefType

subpart  2 declaration
ConvertRoseTypeDefDecl()   thing is of type SgClassDeclaration
it's a declaration!!
gonna return a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a SourceFile
shortened name is unnamedStructAtLine64

blurb is 'struct unnamedStructAtLine64'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine64, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine64 has 32 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine66

temp struct unnamedStructAtLine66
parseArrayParts( struct unnamedStructAtLine66 ) => 
struct struct unnamedStructAtLine64 has member 0 of vartype struct unnamedStructAtLine66
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine66

parseArrayParts( struct unnamedStructAtLine66 ) => 
vartype: struct unnamedStructAtLine66
varname: cycles
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine66

blurb is 'struct unnamedStructAtLine66'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine66, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine66 has 25 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 0 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: smooth
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned smooth   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name smooth, arraypart '[10]' ) 0x20f1cb0
[10] =  + [10]
2name smooth numdimensions 1
unsigned smooth[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member smooth vardecl
ConvertRoseInitName()  storing variable declaration 'smooth' with unique value 0x7f6f1e2c6e38 from  SgInitializedName
(VarDecl "'unsigned' 'smooth' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 0
unsigned smooth[10]
(VarDecl "'unsigned' 'smooth' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 1 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: apply_op
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned apply_op   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name apply_op, arraypart '[10]' ) 0x20f20f0
[10] =  + [10]
2name apply_op numdimensions 1
unsigned apply_op[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member apply_op vardecl
ConvertRoseInitName()  storing variable declaration 'apply_op' with unique value 0x7f6f1e2c6f60 from  SgInitializedName
(VarDecl "'unsigned' 'apply_op' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 1
unsigned apply_op[10]
(VarDecl "'unsigned' 'apply_op' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 2 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: residual
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned residual   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name residual, arraypart '[10]' ) 0x20f2520
[10] =  + [10]
2name residual numdimensions 1
unsigned residual[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member residual vardecl
ConvertRoseInitName()  storing variable declaration 'residual' with unique value 0x7f6f1e2c7088 from  SgInitializedName
(VarDecl "'unsigned' 'residual' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 2
unsigned residual[10]
(VarDecl "'unsigned' 'residual' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 3   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 3 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: restriction
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned restriction   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name restriction, arraypart '[10]' ) 0x20f2950
[10] =  + [10]
2name restriction numdimensions 1
unsigned restriction[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member restriction vardecl
ConvertRoseInitName()  storing variable declaration 'restriction' with unique value 0x7f6f1e2c71b0 from  SgInitializedName
(VarDecl "'unsigned' 'restriction' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 3
unsigned restriction[10]
(VarDecl "'unsigned' 'restriction' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 4   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 4 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: interpolation
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned interpolation   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name interpolation, arraypart '[10]' ) 0x20f2ee0
[10] =  + [10]
2name interpolation numdimensions 1
unsigned interpolation[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member interpolation vardecl
ConvertRoseInitName()  storing variable declaration 'interpolation' with unique value 0x7f6f1e2c72d8 from  SgInitializedName
(VarDecl "'unsigned' 'interpolation' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 4
unsigned interpolation[10]
(VarDecl "'unsigned' 'interpolation' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 5   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 5 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: communication
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned communication   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name communication, arraypart '[10]' ) 0x20f3350
[10] =  + [10]
2name communication numdimensions 1
unsigned communication[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member communication vardecl
ConvertRoseInitName()  storing variable declaration 'communication' with unique value 0x7f6f1e2c7400 from  SgInitializedName
(VarDecl "'unsigned' 'communication' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 5
unsigned communication[10]
(VarDecl "'unsigned' 'communication' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 6   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 6 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: pack
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned pack   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name pack, arraypart '[10]' ) 0x20f35e0
[10] =  + [10]
2name pack numdimensions 1
unsigned pack[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member pack vardecl
ConvertRoseInitName()  storing variable declaration 'pack' with unique value 0x7f6f1e2c7528 from  SgInitializedName
(VarDecl "'unsigned' 'pack' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 6
unsigned pack[10]
(VarDecl "'unsigned' 'pack' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 7   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 7 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: grid2grid
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned grid2grid   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name grid2grid, arraypart '[10]' ) 0x20f3a00
[10] =  + [10]
2name grid2grid numdimensions 1
unsigned grid2grid[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member grid2grid vardecl
ConvertRoseInitName()  storing variable declaration 'grid2grid' with unique value 0x7f6f1e2c7650 from  SgInitializedName
(VarDecl "'unsigned' 'grid2grid' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 7
unsigned grid2grid[10]
(VarDecl "'unsigned' 'grid2grid' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 8   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 8 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: unpack
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned unpack   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name unpack, arraypart '[10]' ) 0x20f3e20
[10] =  + [10]
2name unpack numdimensions 1
unsigned unpack[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member unpack vardecl
ConvertRoseInitName()  storing variable declaration 'unpack' with unique value 0x7f6f1e2c7778 from  SgInitializedName
(VarDecl "'unsigned' 'unpack' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 8
unsigned unpack[10]
(VarDecl "'unsigned' 'unpack' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 9   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 9 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: recv
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned recv   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name recv, arraypart '[10]' ) 0x20f4280
[10] =  + [10]
2name recv numdimensions 1
unsigned recv[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member recv vardecl
ConvertRoseInitName()  storing variable declaration 'recv' with unique value 0x7f6f1e2c78a0 from  SgInitializedName
(VarDecl "'unsigned' 'recv' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 9
unsigned recv[10]
(VarDecl "'unsigned' 'recv' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 10   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 10 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: send
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned send   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name send, arraypart '[10]' ) 0x20f4670
[10] =  + [10]
2name send numdimensions 1
unsigned send[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member send vardecl
ConvertRoseInitName()  storing variable declaration 'send' with unique value 0x7f6f1e2c79c8 from  SgInitializedName
(VarDecl "'unsigned' 'send' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 10
unsigned send[10]
(VarDecl "'unsigned' 'send' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 11   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 11 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: wait
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned wait   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name wait, arraypart '[10]' ) 0x20f4bf0
[10] =  + [10]
2name wait numdimensions 1
unsigned wait[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member wait vardecl
ConvertRoseInitName()  storing variable declaration 'wait' with unique value 0x7f6f1e2c7af0 from  SgInitializedName
(VarDecl "'unsigned' 'wait' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 11
unsigned wait[10]
(VarDecl "'unsigned' 'wait' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 12   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 12 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: blas1
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned blas1   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name blas1, arraypart '[10]' ) 0x20f5120
[10] =  + [10]
2name blas1 numdimensions 1
unsigned blas1[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member blas1 vardecl
ConvertRoseInitName()  storing variable declaration 'blas1' with unique value 0x7f6f1e2c7c18 from  SgInitializedName
(VarDecl "'unsigned' 'blas1' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 12
unsigned blas1[10]
(VarDecl "'unsigned' 'blas1' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 13   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 13 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: blas3
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned blas3   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name blas3, arraypart '[10]' ) 0x20f54f0
[10] =  + [10]
2name blas3 numdimensions 1
unsigned blas3[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member blas3 vardecl
ConvertRoseInitName()  storing variable declaration 'blas3' with unique value 0x7f6f1e2c7d40 from  SgInitializedName
(VarDecl "'unsigned' 'blas3' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 13
unsigned blas3[10]
(VarDecl "'unsigned' 'blas3' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 14   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 14 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: collectives
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned collectives   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name collectives, arraypart '[10]' ) 0x20f5910
[10] =  + [10]
2name collectives numdimensions 1
unsigned collectives[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member collectives vardecl
ConvertRoseInitName()  storing variable declaration 'collectives' with unique value 0x7f6f1e2c7e68 from  SgInitializedName
(VarDecl "'unsigned' 'collectives' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 14
unsigned collectives[10]
(VarDecl "'unsigned' 'collectives' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 15   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int [10UL]
parseArrayParts( unsigned int [10UL] ) => [10]
struct struct unnamedStructAtLine66 has member 15 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int [10UL] ) => [10]
vartype: unsigned
varname: Total
arraypart [10]

checking ugly special case
vartype is unsigned
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int [10UL] ) => [10]
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'unsigned'
arraypart = '[10]'
unsigned Total   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name Total, arraypart '[10]' ) 0x20f5d30
[10] =  + [10]
2name Total numdimensions 1
unsigned Total[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member Total vardecl
ConvertRoseInitName()  storing variable declaration 'Total' with unique value 0x7f6f1e2c7f90 from  SgInitializedName
(VarDecl "'unsigned' 'Total' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 15
unsigned Total[10]
(VarDecl "'unsigned' 'Total' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 16   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int
parseArrayParts( unsigned int ) => 
struct struct unnamedStructAtLine66 has member 16 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int ) => 
vartype: unsigned int
varname: build
arraypart 

checking ugly special case
vartype is unsigned int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int ) => 
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
vartype = 'unsigned'
arraypart = ''
unsigned build   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name build, arraypart '' ) 0x20f60f0
2name build numdimensions 0
unsigned build
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member build vardecl
ConvertRoseInitName()  storing variable declaration 'build' with unique value 0x7f6f1e2c80b8 from  SgInitializedName
(VarDecl "'unsigned' 'build' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 16
unsigned build
(VarDecl "'unsigned' 'build' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 17   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int
parseArrayParts( unsigned int ) => 
struct struct unnamedStructAtLine66 has member 17 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int ) => 
vartype: unsigned int
varname: vcycles
arraypart 

checking ugly special case
vartype is unsigned int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int ) => 
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
vartype = 'unsigned'
arraypart = ''
unsigned vcycles   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name vcycles, arraypart '' ) 0x20f6550
2name vcycles numdimensions 0
unsigned vcycles
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member vcycles vardecl
ConvertRoseInitName()  storing variable declaration 'vcycles' with unique value 0x7f6f1e2c81e0 from  SgInitializedName
(VarDecl "'unsigned' 'vcycles' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 17
unsigned vcycles
(VarDecl "'unsigned' 'vcycles' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 18   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp unsigned int
parseArrayParts( unsigned int ) => 
struct struct unnamedStructAtLine66 has member 18 of vartype unsigned
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( unsigned int ) => 
vartype: unsigned int
varname: MGSolve
arraypart 

checking ugly special case
vartype is unsigned int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( unsigned int ) => 
underlying 'unsigned'
OK, looking for unsigned
RecordDecl looking for datatype unsigned
RecordDecl looking for datatype unsigned
SourceFile looking for datatype unsigned
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
could not find typedef for unsigned
vartype = 'unsigned'
arraypart = ''
unsigned MGSolve   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type unsigned, name MGSolve, arraypart '' ) 0x20f6920
2name MGSolve numdimensions 0
unsigned MGSolve
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member MGSolve vardecl
ConvertRoseInitName()  storing variable declaration 'MGSolve' with unique value 0x7f6f1e2c8308 from  SgInitializedName
(VarDecl "'unsigned' 'MGSolve' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine66 member 18
unsigned MGSolve
(VarDecl "'unsigned' 'MGSolve' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 19   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 20   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 21   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 22   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 23   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine66  subpart 24   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine66
yep, RD is a struct
struct {
  unsigned smooth[10];
  unsigned apply_op[10];
  unsigned residual[10];
  unsigned restriction[10];
  unsigned interpolation[10];
  unsigned communication[10];
  unsigned pack[10];
  unsigned grid2grid[10];
  unsigned unpack[10];
  unsigned recv[10];
  unsigned send[10];
  unsigned wait[10];
  unsigned blas1[10];
  unsigned blas3[10];
  unsigned collectives[10];
  unsigned Total[10];
  unsigned build;
  unsigned vcycles;
  unsigned MGSolve;
} 

here is the struct definition:
struct {
  unsigned smooth[10];
  unsigned apply_op[10];
  unsigned residual[10];
  unsigned restriction[10];
  unsigned interpolation[10];
  unsigned communication[10];
  unsigned pack[10];
  unsigned grid2grid[10];
  unsigned unpack[10];
  unsigned recv[10];
  unsigned send[10];
  unsigned wait[10];
  unsigned blas1[10];
  unsigned blas3[10];
  unsigned collectives[10];
  unsigned Total[10];
  unsigned build;
  unsigned vcycles;
  unsigned MGSolve;
} 

we need to declare a variable of this STRUCT type named cycles
chillAST_VarDecl::chillAST_VarDecl( cycles  0x20f1860 struct setting vardef of cycles to 0x20eff50
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member cycles vardecl
vardecl cycles IS A STRUCT

printing struct unnamedStructAtLine64 member 0
struct { unsigned smooth[10]; unsigned apply_op[10]; unsigned residual[10]; unsigned restriction[10]; unsigned interpolation[10]; unsigned communication[10]; unsigned pack[10]; unsigned grid2grid[10]; unsigned unpack[10]; unsigned recv[10]; unsigned send[10]; unsigned wait[10]; unsigned blas1[10]; unsigned blas3[10]; unsigned collectives[10]; unsigned Total[10]; unsigned build; unsigned vcycles; unsigned MGSolve; } cycles
(VarDecl "'unnamedStructAtLine66' 'cycles' ''"  n_dim 0  )  vardef 0x20eff50
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: vcycles_performed
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int vcycles_performed   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name vcycles_performed, arraypart '' ) 0x20f03b0
2name vcycles_performed numdimensions 0
int vcycles_performed
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member vcycles_performed vardecl
ConvertRoseInitName()  storing variable declaration 'vcycles_performed' with unique value 0x7f6f1e2c8558 from  SgInitializedName
(VarDecl "'int' 'vcycles_performed' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 1
int vcycles_performed
(VarDecl "'int' 'vcycles_performed' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: Krylov_iterations
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int Krylov_iterations   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name Krylov_iterations, arraypart '' ) 0x20f6b70
2name Krylov_iterations numdimensions 0
int Krylov_iterations
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member Krylov_iterations vardecl
ConvertRoseInitName()  storing variable declaration 'Krylov_iterations' with unique value 0x7f6f1e2c8680 from  SgInitializedName
(VarDecl "'int' 'Krylov_iterations' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 2
int Krylov_iterations
(VarDecl "'int' 'Krylov_iterations' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 3   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 3 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: CAKrylov_formations_of_G
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int CAKrylov_formations_of_G   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name CAKrylov_formations_of_G, arraypart '' ) 0x20f6ec0
2name CAKrylov_formations_of_G numdimensions 0
int CAKrylov_formations_of_G
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member CAKrylov_formations_of_G vardecl
ConvertRoseInitName()  storing variable declaration 'CAKrylov_formations_of_G' with unique value 0x7f6f1e2c87a8 from  SgInitializedName
(VarDecl "'int' 'CAKrylov_formations_of_G' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 3
int CAKrylov_formations_of_G
(VarDecl "'int' 'CAKrylov_formations_of_G' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 4   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int [27UL]
parseArrayParts( int [27UL] ) => [27]
struct struct unnamedStructAtLine64 has member 4 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int [27UL] ) => [27]
vartype: int
varname: rank_of_neighbor
arraypart [27]

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int [27UL] ) => [27]
underlying 'int'
ARRAY TYPE
but arraypart is already '[27]'
vartype = 'int'
arraypart = '[27]'
int rank_of_neighbor   arraypart = '[27]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name rank_of_neighbor, arraypart '[27]' ) 0x20f7300
[27] =  + [27]
2name rank_of_neighbor numdimensions 1
int rank_of_neighbor[27]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member rank_of_neighbor vardecl
ConvertRoseInitName()  storing variable declaration 'rank_of_neighbor' with unique value 0x7f6f1e2c88d0 from  SgInitializedName
(VarDecl "'int' 'rank_of_neighbor' '[27]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 4
int rank_of_neighbor[27]
(VarDecl "'int' 'rank_of_neighbor' '[27]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 5   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp bufferCopy_type *[10UL]
parseArrayParts( bufferCopy_type *[10UL] ) => *[10]
struct struct unnamedStructAtLine64 has member 5 of vartype bufferCopy_type
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( bufferCopy_type *[10UL] ) => *[10]
vartype: bufferCopy_type
varname: bufferCopies
arraypart *[10]

checking ugly special case
vartype is bufferCopy_type
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( bufferCopy_type *[10UL] ) => *[10]
underlying 'bufferCopy_type'
OK, looking for bufferCopy_type
RecordDecl looking for datatype bufferCopy_type
SourceFile looking for datatype bufferCopy_type
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
found it
buh IS typedef struct {
  int isFace;
  int isEdge;
  int isCorner;
  struct { int i; int j; int k; } dim;
  struct { int box; int i; int j; int k; int pencil; int plane; double * __restrict__ ptr; } read;
  struct { int box; int i; int j; int k; int pencil; int plane; double * __restrict__ ptr; } write;
} 
OK, this is a typedef or struct we have to account for
ARRAY TYPE
but arraypart is already '*[10]'
vartype = 'bufferCopy_type'
arraypart = '*[10]'
bufferCopy_type bufferCopies   arraypart = '*[10]'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( bufferCopies  typedef *[10] = * + [10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member bufferCopies vardecl
ConvertRoseInitName()  storing variable declaration 'bufferCopies' with unique value 0x7f6f1e2c89f8 from  SgInitializedName
bufferCopy_type;
(VarDecl "'bufferCopy_type' 'bufferCopies' '*[10]'"  n_dim 2  )  vardef (nil)
typedefinition 0x20e5540
NOT PARAMETER


printing struct unnamedStructAtLine64 member 5
bufferCopy_type *bufferCopies[10]
(VarDecl "'bufferCopy_type' 'bufferCopies' '*[10]'"  n_dim 2  )  vardef (nil)
typedefinition 0x20e5540
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 6   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 6 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: bufferCopy_Pack_Start
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int bufferCopy_Pack_Start   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name bufferCopy_Pack_Start, arraypart '' ) 0x20f7ab0
2name bufferCopy_Pack_Start numdimensions 0
int bufferCopy_Pack_Start
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member bufferCopy_Pack_Start vardecl
ConvertRoseInitName()  storing variable declaration 'bufferCopy_Pack_Start' with unique value 0x7f6f1e2c8b20 from  SgInitializedName
(VarDecl "'int' 'bufferCopy_Pack_Start' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 6
int bufferCopy_Pack_Start
(VarDecl "'int' 'bufferCopy_Pack_Start' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 7   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 7 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: bufferCopy_Pack_End
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int bufferCopy_Pack_End   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name bufferCopy_Pack_End, arraypart '' ) 0x20f7e60
2name bufferCopy_Pack_End numdimensions 0
int bufferCopy_Pack_End
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member bufferCopy_Pack_End vardecl
ConvertRoseInitName()  storing variable declaration 'bufferCopy_Pack_End' with unique value 0x7f6f1e2c8c48 from  SgInitializedName
(VarDecl "'int' 'bufferCopy_Pack_End' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 7
int bufferCopy_Pack_End
(VarDecl "'int' 'bufferCopy_Pack_End' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 8   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 8 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: bufferCopy_Local_Start
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int bufferCopy_Local_Start   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name bufferCopy_Local_Start, arraypart '' ) 0x20f8220
2name bufferCopy_Local_Start numdimensions 0
int bufferCopy_Local_Start
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member bufferCopy_Local_Start vardecl
ConvertRoseInitName()  storing variable declaration 'bufferCopy_Local_Start' with unique value 0x7f6f1e2c8d70 from  SgInitializedName
(VarDecl "'int' 'bufferCopy_Local_Start' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 8
int bufferCopy_Local_Start
(VarDecl "'int' 'bufferCopy_Local_Start' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 9   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 9 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: bufferCopy_Local_End
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int bufferCopy_Local_End   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name bufferCopy_Local_End, arraypart '' ) 0x20f8620
2name bufferCopy_Local_End numdimensions 0
int bufferCopy_Local_End
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member bufferCopy_Local_End vardecl
ConvertRoseInitName()  storing variable declaration 'bufferCopy_Local_End' with unique value 0x7f6f1e2c8e98 from  SgInitializedName
(VarDecl "'int' 'bufferCopy_Local_End' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 9
int bufferCopy_Local_End
(VarDecl "'int' 'bufferCopy_Local_End' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 10   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 10 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: bufferCopy_Unpack_Start
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int bufferCopy_Unpack_Start   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name bufferCopy_Unpack_Start, arraypart '' ) 0x20f89d0
2name bufferCopy_Unpack_Start numdimensions 0
int bufferCopy_Unpack_Start
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member bufferCopy_Unpack_Start vardecl
ConvertRoseInitName()  storing variable declaration 'bufferCopy_Unpack_Start' with unique value 0x7f6f1e2c8fc0 from  SgInitializedName
(VarDecl "'int' 'bufferCopy_Unpack_Start' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 10
int bufferCopy_Unpack_Start
(VarDecl "'int' 'bufferCopy_Unpack_Start' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 11   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 11 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: bufferCopy_Unpack_End
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int bufferCopy_Unpack_End   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name bufferCopy_Unpack_End, arraypart '' ) 0x20f8d90
2name bufferCopy_Unpack_End numdimensions 0
int bufferCopy_Unpack_End
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member bufferCopy_Unpack_End vardecl
ConvertRoseInitName()  storing variable declaration 'bufferCopy_Unpack_End' with unique value 0x7f6f1e2c90e8 from  SgInitializedName
(VarDecl "'int' 'bufferCopy_Unpack_End' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 11
int bufferCopy_Unpack_End
(VarDecl "'int' 'bufferCopy_Unpack_End' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 12   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine103

temp struct unnamedStructAtLine103
parseArrayParts( struct unnamedStructAtLine103 ) => 
struct struct unnamedStructAtLine64 has member 12 of vartype struct unnamedStructAtLine103
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine103

parseArrayParts( struct unnamedStructAtLine103 ) => 
vartype: struct unnamedStructAtLine103
varname: dim
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine103

blurb is 'struct unnamedStructAtLine103'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine103, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine103 has 9 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine103  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine103 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x20f98a0
2name i numdimensions 0
int i
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member i vardecl
ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2c9210 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine103 member 0
int i
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine103  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine103 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x20f9c80
2name j numdimensions 0
int j
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member j vardecl
ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2c9338 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine103 member 1
int j
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine103  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine103 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x20fa040
2name k numdimensions 0
int k
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member k vardecl
ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2c9460 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine103 member 2
int k
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine103  subpart 3   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine103  subpart 4   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine103  subpart 5   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine103  subpart 6   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine103  subpart 7   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine103  subpart 8   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine103
yep, RD is a struct
struct {
  int i;
  int j;
  int k;
} 

here is the struct definition:
struct {
  int i;
  int j;
  int k;
} 

we need to declare a variable of this STRUCT type named dim
chillAST_VarDecl::chillAST_VarDecl( dim  0x20fa180 struct setting vardef of dim to 0x20f8eb0
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member dim vardecl
vardecl dim IS A STRUCT

printing struct unnamedStructAtLine64 member 12
struct { int i; int j; int k; } dim
(VarDecl "'unnamedStructAtLine103' 'dim' ''"  n_dim 0  )  vardef 0x20f8eb0
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 13   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine104

temp struct unnamedStructAtLine104
parseArrayParts( struct unnamedStructAtLine104 ) => 
struct struct unnamedStructAtLine64 has member 13 of vartype struct unnamedStructAtLine104
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine104

parseArrayParts( struct unnamedStructAtLine104 ) => 
vartype: struct unnamedStructAtLine104
varname: ranks_in
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine104

blurb is 'struct unnamedStructAtLine104'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine104, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine104 has 9 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine104  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine104 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x20faa00
2name i numdimensions 0
int i
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member i vardecl
ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2c96b0 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine104 member 0
int i
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine104  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine104 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x20fae00
2name j numdimensions 0
int j
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member j vardecl
ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2c97d8 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine104 member 1
int j
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine104  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine104 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x20fb1e0
2name k numdimensions 0
int k
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member k vardecl
ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2c9900 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine104 member 2
int k
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine104  subpart 3   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine104  subpart 4   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine104  subpart 5   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine104  subpart 6   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine104  subpart 7   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine104  subpart 8   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine104
yep, RD is a struct
struct {
  int i;
  int j;
  int k;
} 

here is the struct definition:
struct {
  int i;
  int j;
  int k;
} 

we need to declare a variable of this STRUCT type named ranks_in
chillAST_VarDecl::chillAST_VarDecl( ranks_in  0x20fb300 struct setting vardef of ranks_in to 0x20fa270
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member ranks_in vardecl
vardecl ranks_in IS A STRUCT

printing struct unnamedStructAtLine64 member 13
struct { int i; int j; int k; } ranks_in
(VarDecl "'unnamedStructAtLine104' 'ranks_in' ''"  n_dim 0  )  vardef 0x20fa270
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 14   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine105

temp struct unnamedStructAtLine105
parseArrayParts( struct unnamedStructAtLine105 ) => 
struct struct unnamedStructAtLine64 has member 14 of vartype struct unnamedStructAtLine105
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine105

parseArrayParts( struct unnamedStructAtLine105 ) => 
vartype: struct unnamedStructAtLine105
varname: subdomains_per_rank_in
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine105

blurb is 'struct unnamedStructAtLine105'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine105, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine105 has 9 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine105  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine105 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x20fbbe0
2name i numdimensions 0
int i
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member i vardecl
ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2c9b50 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine105 member 0
int i
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine105  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine105 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x20fbfe0
2name j numdimensions 0
int j
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member j vardecl
ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2c9c78 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine105 member 1
int j
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine105  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine105 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x20fc3c0
2name k numdimensions 0
int k
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member k vardecl
ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2c9da0 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine105 member 2
int k
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine105  subpart 3   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine105  subpart 4   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine105  subpart 5   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine105  subpart 6   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine105  subpart 7   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine105  subpart 8   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine105
yep, RD is a struct
struct {
  int i;
  int j;
  int k;
} 

here is the struct definition:
struct {
  int i;
  int j;
  int k;
} 

we need to declare a variable of this STRUCT type named subdomains_per_rank_in
chillAST_VarDecl::chillAST_VarDecl( subdomains_per_rank_in  0x20fc4e0 struct setting vardef of subdomains_per_rank_in to 0x20fa5f0
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member subdomains_per_rank_in vardecl
vardecl subdomains_per_rank_in IS A STRUCT

printing struct unnamedStructAtLine64 member 14
struct { int i; int j; int k; } subdomains_per_rank_in
(VarDecl "'unnamedStructAtLine105' 'subdomains_per_rank_in' ''"  n_dim 0  )  vardef 0x20fa5f0
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 15   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine106

temp struct unnamedStructAtLine106
parseArrayParts( struct unnamedStructAtLine106 ) => 
struct struct unnamedStructAtLine64 has member 15 of vartype struct unnamedStructAtLine106
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine106

parseArrayParts( struct unnamedStructAtLine106 ) => 
vartype: struct unnamedStructAtLine106
varname: subdomains_in
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine106

blurb is 'struct unnamedStructAtLine106'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine106, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine106 has 9 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine106  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine106 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x20fcdb0
2name i numdimensions 0
int i
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member i vardecl
ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2c9ff0 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine106 member 0
int i
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine106  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine106 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x20fd190
2name j numdimensions 0
int j
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member j vardecl
ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2ca118 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine106 member 1
int j
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine106  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine106 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x20fd570
2name k numdimensions 0
int k
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member k vardecl
ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2ca240 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine106 member 2
int k
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine106  subpart 3   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine106  subpart 4   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine106  subpart 5   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine106  subpart 6   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine106  subpart 7   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine106  subpart 8   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine106
yep, RD is a struct
struct {
  int i;
  int j;
  int k;
} 

here is the struct definition:
struct {
  int i;
  int j;
  int k;
} 

we need to declare a variable of this STRUCT type named subdomains_in
chillAST_VarDecl::chillAST_VarDecl( subdomains_in  0x20fd690 struct setting vardef of subdomains_in to 0x20fb5f0
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member subdomains_in vardecl
vardecl subdomains_in IS A STRUCT

printing struct unnamedStructAtLine64 member 15
struct { int i; int j; int k; } subdomains_in
(VarDecl "'unnamedStructAtLine106' 'subdomains_in' ''"  n_dim 0  )  vardef 0x20fb5f0
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 16   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
shortened name is struct unnamedStructAtLine107

temp struct unnamedStructAtLine107
parseArrayParts( struct unnamedStructAtLine107 ) => 
struct struct unnamedStructAtLine64 has member 16 of vartype struct unnamedStructAtLine107
ConvertRoseVarDecl2() 
1 initialized names
shortened name is struct unnamedStructAtLine107

parseArrayParts( struct unnamedStructAtLine107 ) => 
vartype: struct unnamedStructAtLine107
varname: boundary_condition
arraypart 

there is a defining declaration  (a struct or typedef?)
DS type SgClassDeclaration
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
parent is a RecordDecl
shortened name is unnamedStructAtLine107

blurb is 'struct unnamedStructAtLine107'
chillAST_RecordDecl::chillAST_RecordDecl( unnamedStructAtLine107, (orig) )
ConvertRoseStructDeclaration struct unnamedStructAtLine107 has 9 subparts

ConvertRoseStructDeclaration() struct unnamedStructAtLine107  subpart 0   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine107 has member 0 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x20fdf60
2name i numdimensions 0
int i
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member i vardecl
ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2ca490 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine107 member 0
int i
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine107  subpart 1   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine107 has member 1 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x20fe360
2name j numdimensions 0
int j
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member j vardecl
ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2ca5b8 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine107 member 1
int j
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine107  subpart 2   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine107 has member 2 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x20fe740
2name k numdimensions 0
int k
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member k vardecl
ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2ca6e0 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine107 member 2
int k
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine107  subpart 3   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine107  subpart 4   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine107  subpart 5   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine107  subpart 6   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine107  subpart 7   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine107  subpart 8   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine107
yep, RD is a struct
struct {
  int i;
  int j;
  int k;
} 

here is the struct definition:
struct {
  int i;
  int j;
  int k;
} 

we need to declare a variable of this STRUCT type named boundary_condition
chillAST_VarDecl::chillAST_VarDecl( boundary_condition  0x20fe860 struct setting vardef of boundary_condition to 0x20fc7d0
chillAST_VarDecl::chillAST_VarDecl( chillAST_RecordDecl *astruct, ...) MIGHT add struct to some symbol table
yep, adding it
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member boundary_condition vardecl
vardecl boundary_condition IS A STRUCT

printing struct unnamedStructAtLine64 member 16
struct { int i; int j; int k; } boundary_condition
(VarDecl "'unnamedStructAtLine107' 'boundary_condition' ''"  n_dim 0  )  vardef 0x20fc7d0
(typedef or struct!)
typedefinition (nil)
isStruct
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 17   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 17 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: rank
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int rank   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name rank, arraypart '' ) 0x20feab0
2name rank numdimensions 0
int rank
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member rank vardecl
ConvertRoseInitName()  storing variable declaration 'rank' with unique value 0x7f6f1e2ca930 from  SgInitializedName
(VarDecl "'int' 'rank' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 17
int rank
(VarDecl "'int' 'rank' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 18   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 18 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: subdomains_per_rank
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomains_per_rank   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomains_per_rank, arraypart '' ) 0x20fee50
2name subdomains_per_rank numdimensions 0
int subdomains_per_rank
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member subdomains_per_rank vardecl
ConvertRoseInitName()  storing variable declaration 'subdomains_per_rank' with unique value 0x7f6f1e2caa58 from  SgInitializedName
(VarDecl "'int' 'subdomains_per_rank' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 18
int subdomains_per_rank
(VarDecl "'int' 'subdomains_per_rank' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 19   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 19 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: numLevels
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int numLevels   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name numLevels, arraypart '' ) 0x20ff240
2name numLevels numdimensions 0
int numLevels
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member numLevels vardecl
ConvertRoseInitName()  storing variable declaration 'numLevels' with unique value 0x7f6f1e2cab80 from  SgInitializedName
(VarDecl "'int' 'numLevels' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 19
int numLevels
(VarDecl "'int' 'numLevels' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 20   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 20 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: numGrids
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int numGrids   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name numGrids, arraypart '' ) 0x20ff630
2name numGrids numdimensions 0
int numGrids
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member numGrids vardecl
ConvertRoseInitName()  storing variable declaration 'numGrids' with unique value 0x7f6f1e2caca8 from  SgInitializedName
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 20
int numGrids
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 21   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int
parseArrayParts( int ) => 
struct struct unnamedStructAtLine64 has member 21 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: ghosts
arraypart 

checking ugly special case
vartype is int
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int ghosts   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name ghosts, arraypart '' ) 0x20ffa20
2name ghosts numdimensions 0
int ghosts
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member ghosts vardecl
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value 0x7f6f1e2cadd0 from  SgInitializedName
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 21
int ghosts
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 22   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp double [10UL]
parseArrayParts( double [10UL] ) => [10]
struct struct unnamedStructAtLine64 has member 22 of vartype double
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( double [10UL] ) => [10]
vartype: double
varname: h
arraypart [10]

checking ugly special case
vartype is double
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( double [10UL] ) => [10]
underlying 'double'
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'double'
arraypart = '[10]'
double h   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name h, arraypart '[10]' ) 0x20ffe70
[10] =  + [10]
2name h numdimensions 1
double h[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member h vardecl
ConvertRoseInitName()  storing variable declaration 'h' with unique value 0x7f6f1e2caef8 from  SgInitializedName
(VarDecl "'double' 'h' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 22
double h[10]
(VarDecl "'double' 'h' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 23   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp double [10UL]
parseArrayParts( double [10UL] ) => [10]
struct struct unnamedStructAtLine64 has member 23 of vartype double
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( double [10UL] ) => [10]
vartype: double
varname: dominant_eigenvalue_of_DinvA
arraypart [10]

checking ugly special case
vartype is double
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( double [10UL] ) => [10]
underlying 'double'
ARRAY TYPE
but arraypart is already '[10]'
vartype = 'double'
arraypart = '[10]'
double dominant_eigenvalue_of_DinvA   arraypart = '[10]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name dominant_eigenvalue_of_DinvA, arraypart '[10]' ) 0x2100100
[10] =  + [10]
2name dominant_eigenvalue_of_DinvA numdimensions 1
double dominant_eigenvalue_of_DinvA[10]
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member dominant_eigenvalue_of_DinvA vardecl
ConvertRoseInitName()  storing variable declaration 'dominant_eigenvalue_of_DinvA' with unique value 0x7f6f1e2cb020 from  SgInitializedName
(VarDecl "'double' 'dominant_eigenvalue_of_DinvA' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 23
double dominant_eigenvalue_of_DinvA[10]
(VarDecl "'double' 'dominant_eigenvalue_of_DinvA' '[10]'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 24   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp subdomain_type *
parseArrayParts( subdomain_type * ) => *
struct struct unnamedStructAtLine64 has member 24 of vartype subdomain_type
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( subdomain_type * ) => *
vartype: subdomain_type *
varname: subdomains
arraypart *

checking ugly special case
vartype is subdomain_type *
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( subdomain_type * ) => *
underlying 'subdomain_type'
OK, looking for subdomain_type
RecordDecl looking for datatype subdomain_type
SourceFile looking for datatype subdomain_type
4 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
found it
buh IS typedef struct {
  struct { int i; int j; int k; } low;
  struct { int i; int j; int k; } dim;
  int numLevels;
  int ghosts;
  neighbor_type neighbors[27];
  box_type *levels;
} 
OK, this is a typedef or struct we have to account for
vartype = 'subdomain_type'
arraypart = '*'
subdomain_type subdomains   arraypart = '*'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( subdomains  typedef * = * + 
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member subdomains vardecl
ConvertRoseInitName()  storing variable declaration 'subdomains' with unique value 0x7f6f1e2cb148 from  SgInitializedName
subdomain_type;
(VarDecl "'subdomain_type' 'subdomains' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20e5bc0
NOT PARAMETER


printing struct unnamedStructAtLine64 member 24
subdomain_type *subdomains
(VarDecl "'subdomain_type' 'subdomains' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20e5bc0
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 25   members
ConvertRoseStructDeclaration()  thing is of type SgVariableDeclaration
member is a variable declaration
temp int *
parseArrayParts( int * ) => *
struct struct unnamedStructAtLine64 has member 25 of vartype int
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int * ) => *
vartype: int *
varname: vector_ghosts
arraypart *

checking ugly special case
vartype is int *
parent is a RecordDecl
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int * ) => *
underlying 'int'
vartype = 'int'
arraypart = '*'
int vector_ghosts   arraypart = '*'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name vector_ghosts, arraypart '*' ) 0x2100a50
* = * + 
2name vector_ghosts numdimensions 1
int *vector_ghosts
chillAST_RecordDecl::addVariableToSymbolTable() ignoring struct member vector_ghosts vardecl
ConvertRoseInitName()  storing variable declaration 'vector_ghosts' with unique value 0x7f6f1e2cb270 from  SgInitializedName
(VarDecl "'int' 'vector_ghosts' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


printing struct unnamedStructAtLine64 member 25
int *vector_ghosts
(VarDecl "'int' 'vector_ghosts' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER


ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 26   symbol_table
ConvertRoseStructDeclaration()  thing is of type SgSymbolTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 27   type_table
ConvertRoseStructDeclaration()  thing is of type SgTypeTable

ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 28   numeric_label

ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 29   startOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 30   endOfConstruct
ConvertRoseStructDeclaration()  thing is of type Sg_File_Info

ConvertRoseStructDeclaration() struct unnamedStructAtLine64  subpart 31   parent
ConvertRoseStructDeclaration()  thing is of type SgClassDeclaration
I just defined a struct typedefdecl called unnamedStructAtLine64
yep, RD is a struct
struct {
  struct { unsigned smooth[10]; unsigned apply_op[10]; unsigned residual[10]; unsigned restriction[10]; unsigned interpolation[10]; unsigned communication[10]; unsigned pack[10]; unsigned grid2grid[10]; unsigned unpack[10]; unsigned recv[10]; unsigned send[10]; unsigned wait[10]; unsigned blas1[10]; unsigned blas3[10]; unsigned collectives[10]; unsigned Total[10]; unsigned build; unsigned vcycles; unsigned MGSolve; } cycles;
  int vcycles_performed;
  int Krylov_iterations;
  int CAKrylov_formations_of_G;
  int rank_of_neighbor[27];
  bufferCopy_type *bufferCopies[10];
  int bufferCopy_Pack_Start;
  int bufferCopy_Pack_End;
  int bufferCopy_Local_Start;
  int bufferCopy_Local_End;
  int bufferCopy_Unpack_Start;
  int bufferCopy_Unpack_End;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } ranks_in;
  struct { int i; int j; int k; } subdomains_per_rank_in;
  struct { int i; int j; int k; } subdomains_in;
  struct { int i; int j; int k; } boundary_condition;
  int rank;
  int subdomains_per_rank;
  int numLevels;
  int numGrids;
  int ghosts;
  double h[10];
  double dominant_eigenvalue_of_DinvA[10];
  subdomain_type *subdomains;
  int *vector_ghosts;
} 
definition that this typedecl called domain_type really is, is:
struct {
  struct { unsigned smooth[10]; unsigned apply_op[10]; unsigned residual[10]; unsigned restriction[10]; unsigned interpolation[10]; unsigned communication[10]; unsigned pack[10]; unsigned grid2grid[10]; unsigned unpack[10]; unsigned recv[10]; unsigned send[10]; unsigned wait[10]; unsigned blas1[10]; unsigned blas3[10]; unsigned collectives[10]; unsigned Total[10]; unsigned build; unsigned vcycles; unsigned MGSolve; } cycles;
  int vcycles_performed;
  int Krylov_iterations;
  int CAKrylov_formations_of_G;
  int rank_of_neighbor[27];
  bufferCopy_type *bufferCopies[10];
  int bufferCopy_Pack_Start;
  int bufferCopy_Pack_End;
  int bufferCopy_Local_Start;
  int bufferCopy_Local_End;
  int bufferCopy_Unpack_Start;
  int bufferCopy_Unpack_End;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } ranks_in;
  struct { int i; int j; int k; } subdomains_per_rank_in;
  struct { int i; int j; int k; } subdomains_in;
  struct { int i; int j; int k; } boundary_condition;
  int rank;
  int subdomains_per_rank;
  int numLevels;
  int numGrids;
  int ghosts;
  double h[10];
  double dominant_eigenvalue_of_DinvA[10];
  subdomain_type *subdomains;
  int *vector_ghosts;
} 


SOURCEFILE adding typedef domain_type to typedeftable
now global typedef table has 5 entries
done with SgTypedefDeclaration


428   0x7f6f1e3c0038   declarations    node SgFunctionDeclaration
ConvertRoseFunctionDecl( create_subdomain )
ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( subdomain_type * ) => *
underlying 'subdomain_type'
OK, looking for subdomain_type
FunctionDecl looking for datatype subdomain_type
SourceFile looking for datatype subdomain_type
5 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
found it
buh IS typedef struct {
  struct { int i; int j; int k; } low;
  struct { int i; int j; int k; } dim;
  int numLevels;
  int ghosts;
  neighbor_type neighbors[27];
  box_type *levels;
} 
OK, this is a typedef or struct we have to account for
vartype = 'subdomain_type'
arraypart = '*'
subdomain_type box   arraypart = '*'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( box  typedef * = * + 

chillAST_FunctionDecl addVariableToSymbolTable( box )
adding subdomain_type box to a symbol table that didn't already have it
subdomain_type;
0  subdomain_type *box

ConvertRoseInitName()  storing variable declaration 'box' with unique value 0x7f6f1e2cb398 from  SgInitializedName
(VarDecl "'subdomain_type' 'box' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20e5bc0
NOT PARAMETER

new parameter:
(VarDecl "'subdomain_type' 'box' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20e5bc0
PARAMETER

create_subdomain chillAST_FunctionDecl::addParameter( 0x20eb100  param box)   total of 1 parameters
(VarDecl "'subdomain_type' 'box' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20e5bc0
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomain_low_i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomain_low_i, arraypart '' ) 0x20efbe0
2name subdomain_low_i numdimensions 0
int subdomain_low_i

chillAST_FunctionDecl addVariableToSymbolTable( subdomain_low_i )
adding int subdomain_low_i to a symbol table that didn't already have it
0  subdomain_type *box
1  int subdomain_low_i

ConvertRoseInitName()  storing variable declaration 'subdomain_low_i' with unique value 0x7f6f1e2cb4c0 from  SgInitializedName
(VarDecl "'int' 'subdomain_low_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'subdomain_low_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_subdomain chillAST_FunctionDecl::addParameter( 0x20efbe0  param subdomain_low_i)   total of 2 parameters
(VarDecl "'int' 'subdomain_low_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomain_low_j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomain_low_j, arraypart '' ) 0x20efb00
2name subdomain_low_j numdimensions 0
int subdomain_low_j

chillAST_FunctionDecl addVariableToSymbolTable( subdomain_low_j )
adding int subdomain_low_j to a symbol table that didn't already have it
0  subdomain_type *box
1  int subdomain_low_i
2  int subdomain_low_j

ConvertRoseInitName()  storing variable declaration 'subdomain_low_j' with unique value 0x7f6f1e2cb5e8 from  SgInitializedName
(VarDecl "'int' 'subdomain_low_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'subdomain_low_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_subdomain chillAST_FunctionDecl::addParameter( 0x20efb00  param subdomain_low_j)   total of 3 parameters
(VarDecl "'int' 'subdomain_low_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomain_low_k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomain_low_k, arraypart '' ) 0x20efd30
2name subdomain_low_k numdimensions 0
int subdomain_low_k

chillAST_FunctionDecl addVariableToSymbolTable( subdomain_low_k )
adding int subdomain_low_k to a symbol table that didn't already have it
0  subdomain_type *box
1  int subdomain_low_i
2  int subdomain_low_j
3  int subdomain_low_k

ConvertRoseInitName()  storing variable declaration 'subdomain_low_k' with unique value 0x7f6f1e2cb710 from  SgInitializedName
(VarDecl "'int' 'subdomain_low_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'subdomain_low_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_subdomain chillAST_FunctionDecl::addParameter( 0x20efd30  param subdomain_low_k)   total of 4 parameters
(VarDecl "'int' 'subdomain_low_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomain_dim_i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomain_dim_i, arraypart '' ) 0x2100cd0
2name subdomain_dim_i numdimensions 0
int subdomain_dim_i

chillAST_FunctionDecl addVariableToSymbolTable( subdomain_dim_i )
adding int subdomain_dim_i to a symbol table that didn't already have it
0  subdomain_type *box
1  int subdomain_low_i
2  int subdomain_low_j
3  int subdomain_low_k
4  int subdomain_dim_i

ConvertRoseInitName()  storing variable declaration 'subdomain_dim_i' with unique value 0x7f6f1e2cb838 from  SgInitializedName
(VarDecl "'int' 'subdomain_dim_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'subdomain_dim_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_subdomain chillAST_FunctionDecl::addParameter( 0x2100cd0  param subdomain_dim_i)   total of 5 parameters
(VarDecl "'int' 'subdomain_dim_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomain_dim_j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomain_dim_j, arraypart '' ) 0x2100fd0
2name subdomain_dim_j numdimensions 0
int subdomain_dim_j

chillAST_FunctionDecl addVariableToSymbolTable( subdomain_dim_j )
adding int subdomain_dim_j to a symbol table that didn't already have it
0  subdomain_type *box
1  int subdomain_low_i
2  int subdomain_low_j
3  int subdomain_low_k
4  int subdomain_dim_i
5  int subdomain_dim_j

ConvertRoseInitName()  storing variable declaration 'subdomain_dim_j' with unique value 0x7f6f1e2cb960 from  SgInitializedName
(VarDecl "'int' 'subdomain_dim_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'subdomain_dim_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_subdomain chillAST_FunctionDecl::addParameter( 0x2100fd0  param subdomain_dim_j)   total of 6 parameters
(VarDecl "'int' 'subdomain_dim_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomain_dim_k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomain_dim_k, arraypart '' ) 0x21011f0
2name subdomain_dim_k numdimensions 0
int subdomain_dim_k

chillAST_FunctionDecl addVariableToSymbolTable( subdomain_dim_k )
adding int subdomain_dim_k to a symbol table that didn't already have it
0  subdomain_type *box
1  int subdomain_low_i
2  int subdomain_low_j
3  int subdomain_low_k
4  int subdomain_dim_i
5  int subdomain_dim_j
6  int subdomain_dim_k

ConvertRoseInitName()  storing variable declaration 'subdomain_dim_k' with unique value 0x7f6f1e2cba88 from  SgInitializedName
(VarDecl "'int' 'subdomain_dim_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'subdomain_dim_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_subdomain chillAST_FunctionDecl::addParameter( 0x21011f0  param subdomain_dim_k)   total of 7 parameters
(VarDecl "'int' 'subdomain_dim_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int numGrids   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name numGrids, arraypart '' ) 0x21014d0
2name numGrids numdimensions 0
int numGrids

chillAST_FunctionDecl addVariableToSymbolTable( numGrids )
adding int numGrids to a symbol table that didn't already have it
0  subdomain_type *box
1  int subdomain_low_i
2  int subdomain_low_j
3  int subdomain_low_k
4  int subdomain_dim_i
5  int subdomain_dim_j
6  int subdomain_dim_k
7  int numGrids

ConvertRoseInitName()  storing variable declaration 'numGrids' with unique value 0x7f6f1e2cbbb0 from  SgInitializedName
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_subdomain chillAST_FunctionDecl::addParameter( 0x21014d0  param numGrids)   total of 8 parameters
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int ghosts   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name ghosts, arraypart '' ) 0x2101740
2name ghosts numdimensions 0
int ghosts

chillAST_FunctionDecl addVariableToSymbolTable( ghosts )
adding int ghosts to a symbol table that didn't already have it
0  subdomain_type *box
1  int subdomain_low_i
2  int subdomain_low_j
3  int subdomain_low_k
4  int subdomain_dim_i
5  int subdomain_dim_j
6  int subdomain_dim_k
7  int numGrids
8  int ghosts

ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value 0x7f6f1e2cbcd8 from  SgInitializedName
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_subdomain chillAST_FunctionDecl::addParameter( 0x2101740  param ghosts)   total of 9 parameters
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int numLevels   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name numLevels, arraypart '' ) 0x2101ad0
2name numLevels numdimensions 0
int numLevels

chillAST_FunctionDecl addVariableToSymbolTable( numLevels )
adding int numLevels to a symbol table that didn't already have it
0  subdomain_type *box
1  int subdomain_low_i
2  int subdomain_low_j
3  int subdomain_low_k
4  int subdomain_dim_i
5  int subdomain_dim_j
6  int subdomain_dim_k
7  int numGrids
8  int ghosts
9  int numLevels

ConvertRoseInitName()  storing variable declaration 'numLevels' with unique value 0x7f6f1e2cbe00 from  SgInitializedName
(VarDecl "'int' 'numLevels' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'numLevels' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_subdomain chillAST_FunctionDecl::addParameter( 0x2101ad0  param numLevels)   total of 10 parameters
(VarDecl "'int' 'numLevels' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int * ) => *
underlying 'int'
vartype = 'int'
arraypart = '*'
int vec_ghosts   arraypart = '*'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name vec_ghosts, arraypart '*' ) 0x2101c30
* = * + 
2name vec_ghosts numdimensions 1
int *vec_ghosts

chillAST_FunctionDecl addVariableToSymbolTable( vec_ghosts )
adding int vec_ghosts to a symbol table that didn't already have it
0  subdomain_type *box
1  int subdomain_low_i
2  int subdomain_low_j
3  int subdomain_low_k
4  int subdomain_dim_i
5  int subdomain_dim_j
6  int subdomain_dim_k
7  int numGrids
8  int ghosts
9  int numLevels
10  int *vec_ghosts

ConvertRoseInitName()  storing variable declaration 'vec_ghosts' with unique value 0x7f6f1e2cbf28 from  SgInitializedName
(VarDecl "'int' 'vec_ghosts' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'vec_ghosts' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_subdomain chillAST_FunctionDecl::addParameter( 0x2101c30  param vec_ghosts)   total of 11 parameters
(VarDecl "'int' 'vec_ghosts' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

function create_subdomain is a forward declaration or external


429   0x7f6f1e3c03d0   declarations    node SgFunctionDeclaration
ConvertRoseFunctionDecl( destroy_domain )
ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( domain_type * ) => *
underlying 'domain_type'
OK, looking for domain_type
FunctionDecl looking for datatype domain_type
SourceFile looking for datatype domain_type
5 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
comparing to domain_type
found it
buh IS typedef struct {
  struct { unsigned smooth[10]; unsigned apply_op[10]; unsigned residual[10]; unsigned restriction[10]; unsigned interpolation[10]; unsigned communication[10]; unsigned pack[10]; unsigned grid2grid[10]; unsigned unpack[10]; unsigned recv[10]; unsigned send[10]; unsigned wait[10]; unsigned blas1[10]; unsigned blas3[10]; unsigned collectives[10]; unsigned Total[10]; unsigned build; unsigned vcycles; unsigned MGSolve; } cycles;
  int vcycles_performed;
  int Krylov_iterations;
  int CAKrylov_formations_of_G;
  int rank_of_neighbor[27];
  bufferCopy_type *bufferCopies[10];
  int bufferCopy_Pack_Start;
  int bufferCopy_Pack_End;
  int bufferCopy_Local_Start;
  int bufferCopy_Local_End;
  int bufferCopy_Unpack_Start;
  int bufferCopy_Unpack_End;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } ranks_in;
  struct { int i; int j; int k; } subdomains_per_rank_in;
  struct { int i; int j; int k; } subdomains_in;
  struct { int i; int j; int k; } boundary_condition;
  int rank;
  int subdomains_per_rank;
  int numLevels;
  int numGrids;
  int ghosts;
  double h[10];
  double dominant_eigenvalue_of_DinvA[10];
  subdomain_type *subdomains;
  int *vector_ghosts;
} 
OK, this is a typedef or struct we have to account for
vartype = 'domain_type'
arraypart = '*'
domain_type domain   arraypart = '*'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( domain  typedef * = * + 

chillAST_FunctionDecl addVariableToSymbolTable( domain )
adding domain_type domain to a symbol table that didn't already have it
domain_type;
0  domain_type *domain

ConvertRoseInitName()  storing variable declaration 'domain' with unique value 0x7f6f1e2cc050 from  SgInitializedName
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
NOT PARAMETER

new parameter:
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

destroy_domain chillAST_FunctionDecl::addParameter( 0x2101f00  param domain)   total of 1 parameters
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

addparameter done

function destroy_domain is a forward declaration or external


430   0x7f6f1e3c0768   declarations    node SgFunctionDeclaration
ConvertRoseFunctionDecl( create_domain )
ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( domain_type * ) => *
underlying 'domain_type'
OK, looking for domain_type
FunctionDecl looking for datatype domain_type
SourceFile looking for datatype domain_type
5 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
comparing to domain_type
found it
buh IS typedef struct {
  struct { unsigned smooth[10]; unsigned apply_op[10]; unsigned residual[10]; unsigned restriction[10]; unsigned interpolation[10]; unsigned communication[10]; unsigned pack[10]; unsigned grid2grid[10]; unsigned unpack[10]; unsigned recv[10]; unsigned send[10]; unsigned wait[10]; unsigned blas1[10]; unsigned blas3[10]; unsigned collectives[10]; unsigned Total[10]; unsigned build; unsigned vcycles; unsigned MGSolve; } cycles;
  int vcycles_performed;
  int Krylov_iterations;
  int CAKrylov_formations_of_G;
  int rank_of_neighbor[27];
  bufferCopy_type *bufferCopies[10];
  int bufferCopy_Pack_Start;
  int bufferCopy_Pack_End;
  int bufferCopy_Local_Start;
  int bufferCopy_Local_End;
  int bufferCopy_Unpack_Start;
  int bufferCopy_Unpack_End;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } ranks_in;
  struct { int i; int j; int k; } subdomains_per_rank_in;
  struct { int i; int j; int k; } subdomains_in;
  struct { int i; int j; int k; } boundary_condition;
  int rank;
  int subdomains_per_rank;
  int numLevels;
  int numGrids;
  int ghosts;
  double h[10];
  double dominant_eigenvalue_of_DinvA[10];
  subdomain_type *subdomains;
  int *vector_ghosts;
} 
OK, this is a typedef or struct we have to account for
vartype = 'domain_type'
arraypart = '*'
domain_type domain   arraypart = '*'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( domain  typedef * = * + 

chillAST_FunctionDecl addVariableToSymbolTable( domain )
adding domain_type domain to a symbol table that didn't already have it
domain_type;
0  domain_type *domain

ConvertRoseInitName()  storing variable declaration 'domain' with unique value 0x7f6f1e2cc178 from  SgInitializedName
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
NOT PARAMETER

new parameter:
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x2102370  param domain)   total of 1 parameters
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomain_dim_i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomain_dim_i, arraypart '' ) 0x21026a0
2name subdomain_dim_i numdimensions 0
int subdomain_dim_i

chillAST_FunctionDecl addVariableToSymbolTable( subdomain_dim_i )
adding int subdomain_dim_i to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i

ConvertRoseInitName()  storing variable declaration 'subdomain_dim_i' with unique value 0x7f6f1e2cc2a0 from  SgInitializedName
(VarDecl "'int' 'subdomain_dim_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'subdomain_dim_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x21026a0  param subdomain_dim_i)   total of 2 parameters
(VarDecl "'int' 'subdomain_dim_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomain_dim_j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomain_dim_j, arraypart '' ) 0x2102920
2name subdomain_dim_j numdimensions 0
int subdomain_dim_j

chillAST_FunctionDecl addVariableToSymbolTable( subdomain_dim_j )
adding int subdomain_dim_j to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j

ConvertRoseInitName()  storing variable declaration 'subdomain_dim_j' with unique value 0x7f6f1e2cc3c8 from  SgInitializedName
(VarDecl "'int' 'subdomain_dim_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'subdomain_dim_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x2102920  param subdomain_dim_j)   total of 3 parameters
(VarDecl "'int' 'subdomain_dim_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomain_dim_k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomain_dim_k, arraypart '' ) 0x2102b40
2name subdomain_dim_k numdimensions 0
int subdomain_dim_k

chillAST_FunctionDecl addVariableToSymbolTable( subdomain_dim_k )
adding int subdomain_dim_k to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k

ConvertRoseInitName()  storing variable declaration 'subdomain_dim_k' with unique value 0x7f6f1e2cc4f0 from  SgInitializedName
(VarDecl "'int' 'subdomain_dim_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'subdomain_dim_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x2102b40  param subdomain_dim_k)   total of 4 parameters
(VarDecl "'int' 'subdomain_dim_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomains_per_rank_in_i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomains_per_rank_in_i, arraypart '' ) 0x2102e50
2name subdomains_per_rank_in_i numdimensions 0
int subdomains_per_rank_in_i

chillAST_FunctionDecl addVariableToSymbolTable( subdomains_per_rank_in_i )
adding int subdomains_per_rank_in_i to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k
4  int subdomains_per_rank_in_i

ConvertRoseInitName()  storing variable declaration 'subdomains_per_rank_in_i' with unique value 0x7f6f1e2cc618 from  SgInitializedName
(VarDecl "'int' 'subdomains_per_rank_in_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'subdomains_per_rank_in_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x2102e50  param subdomains_per_rank_in_i)   total of 5 parameters
(VarDecl "'int' 'subdomains_per_rank_in_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomains_per_rank_in_j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomains_per_rank_in_j, arraypart '' ) 0x2103180
2name subdomains_per_rank_in_j numdimensions 0
int subdomains_per_rank_in_j

chillAST_FunctionDecl addVariableToSymbolTable( subdomains_per_rank_in_j )
adding int subdomains_per_rank_in_j to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k
4  int subdomains_per_rank_in_i
5  int subdomains_per_rank_in_j

ConvertRoseInitName()  storing variable declaration 'subdomains_per_rank_in_j' with unique value 0x7f6f1e2cc740 from  SgInitializedName
(VarDecl "'int' 'subdomains_per_rank_in_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'subdomains_per_rank_in_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x2103180  param subdomains_per_rank_in_j)   total of 6 parameters
(VarDecl "'int' 'subdomains_per_rank_in_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int subdomains_per_rank_in_k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name subdomains_per_rank_in_k, arraypart '' ) 0x2103360
2name subdomains_per_rank_in_k numdimensions 0
int subdomains_per_rank_in_k

chillAST_FunctionDecl addVariableToSymbolTable( subdomains_per_rank_in_k )
adding int subdomains_per_rank_in_k to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k
4  int subdomains_per_rank_in_i
5  int subdomains_per_rank_in_j
6  int subdomains_per_rank_in_k

ConvertRoseInitName()  storing variable declaration 'subdomains_per_rank_in_k' with unique value 0x7f6f1e2cc868 from  SgInitializedName
(VarDecl "'int' 'subdomains_per_rank_in_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'subdomains_per_rank_in_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x2103360  param subdomains_per_rank_in_k)   total of 7 parameters
(VarDecl "'int' 'subdomains_per_rank_in_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int ranks_in_i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name ranks_in_i, arraypart '' ) 0x21035c0
2name ranks_in_i numdimensions 0
int ranks_in_i

chillAST_FunctionDecl addVariableToSymbolTable( ranks_in_i )
adding int ranks_in_i to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k
4  int subdomains_per_rank_in_i
5  int subdomains_per_rank_in_j
6  int subdomains_per_rank_in_k
7  int ranks_in_i

ConvertRoseInitName()  storing variable declaration 'ranks_in_i' with unique value 0x7f6f1e2cc990 from  SgInitializedName
(VarDecl "'int' 'ranks_in_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'ranks_in_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x21035c0  param ranks_in_i)   total of 8 parameters
(VarDecl "'int' 'ranks_in_i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int ranks_in_j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name ranks_in_j, arraypart '' ) 0x2103840
2name ranks_in_j numdimensions 0
int ranks_in_j

chillAST_FunctionDecl addVariableToSymbolTable( ranks_in_j )
adding int ranks_in_j to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k
4  int subdomains_per_rank_in_i
5  int subdomains_per_rank_in_j
6  int subdomains_per_rank_in_k
7  int ranks_in_i
8  int ranks_in_j

ConvertRoseInitName()  storing variable declaration 'ranks_in_j' with unique value 0x7f6f1e2ccab8 from  SgInitializedName
(VarDecl "'int' 'ranks_in_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'ranks_in_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x2103840  param ranks_in_j)   total of 9 parameters
(VarDecl "'int' 'ranks_in_j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int ranks_in_k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name ranks_in_k, arraypart '' ) 0x2103ba0
2name ranks_in_k numdimensions 0
int ranks_in_k

chillAST_FunctionDecl addVariableToSymbolTable( ranks_in_k )
adding int ranks_in_k to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k
4  int subdomains_per_rank_in_i
5  int subdomains_per_rank_in_j
6  int subdomains_per_rank_in_k
7  int ranks_in_i
8  int ranks_in_j
9  int ranks_in_k

ConvertRoseInitName()  storing variable declaration 'ranks_in_k' with unique value 0x7f6f1e2ccbe0 from  SgInitializedName
(VarDecl "'int' 'ranks_in_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'ranks_in_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x2103ba0  param ranks_in_k)   total of 10 parameters
(VarDecl "'int' 'ranks_in_k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int rank   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name rank, arraypart '' ) 0x20f4df0
2name rank numdimensions 0
int rank

chillAST_FunctionDecl addVariableToSymbolTable( rank )
adding int rank to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k
4  int subdomains_per_rank_in_i
5  int subdomains_per_rank_in_j
6  int subdomains_per_rank_in_k
7  int ranks_in_i
8  int ranks_in_j
9  int ranks_in_k
10  int rank

ConvertRoseInitName()  storing variable declaration 'rank' with unique value 0x7f6f1e2ccd08 from  SgInitializedName
(VarDecl "'int' 'rank' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'rank' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x20f4df0  param rank)   total of 11 parameters
(VarDecl "'int' 'rank' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int * ) => *
underlying 'int'
vartype = 'int'
arraypart = '*'
int boundary_conditions   arraypart = '*'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name boundary_conditions, arraypart '*' ) 0x20f4f90
* = * + 
2name boundary_conditions numdimensions 1
int *boundary_conditions

chillAST_FunctionDecl addVariableToSymbolTable( boundary_conditions )
adding int boundary_conditions to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k
4  int subdomains_per_rank_in_i
5  int subdomains_per_rank_in_j
6  int subdomains_per_rank_in_k
7  int ranks_in_i
8  int ranks_in_j
9  int ranks_in_k
10  int rank
11  int *boundary_conditions

ConvertRoseInitName()  storing variable declaration 'boundary_conditions' with unique value 0x7f6f1e2cce30 from  SgInitializedName
(VarDecl "'int' 'boundary_conditions' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'boundary_conditions' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x20f4f90  param boundary_conditions)   total of 12 parameters
(VarDecl "'int' 'boundary_conditions' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int numGrids   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name numGrids, arraypart '' ) 0x21046d0
2name numGrids numdimensions 0
int numGrids

chillAST_FunctionDecl addVariableToSymbolTable( numGrids )
adding int numGrids to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k
4  int subdomains_per_rank_in_i
5  int subdomains_per_rank_in_j
6  int subdomains_per_rank_in_k
7  int ranks_in_i
8  int ranks_in_j
9  int ranks_in_k
10  int rank
11  int *boundary_conditions
12  int numGrids

ConvertRoseInitName()  storing variable declaration 'numGrids' with unique value 0x7f6f1e2ccf58 from  SgInitializedName
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x21046d0  param numGrids)   total of 13 parameters
(VarDecl "'int' 'numGrids' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int ghosts   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name ghosts, arraypart '' ) 0x2104940
2name ghosts numdimensions 0
int ghosts

chillAST_FunctionDecl addVariableToSymbolTable( ghosts )
adding int ghosts to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k
4  int subdomains_per_rank_in_i
5  int subdomains_per_rank_in_j
6  int subdomains_per_rank_in_k
7  int ranks_in_i
8  int ranks_in_j
9  int ranks_in_k
10  int rank
11  int *boundary_conditions
12  int numGrids
13  int ghosts

ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value 0x7f6f1e2cd080 from  SgInitializedName
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x2104940  param ghosts)   total of 14 parameters
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int numLevels   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name numLevels, arraypart '' ) 0x2104bc0
2name numLevels numdimensions 0
int numLevels

chillAST_FunctionDecl addVariableToSymbolTable( numLevels )
adding int numLevels to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k
4  int subdomains_per_rank_in_i
5  int subdomains_per_rank_in_j
6  int subdomains_per_rank_in_k
7  int ranks_in_i
8  int ranks_in_j
9  int ranks_in_k
10  int rank
11  int *boundary_conditions
12  int numGrids
13  int ghosts
14  int numLevels

ConvertRoseInitName()  storing variable declaration 'numLevels' with unique value 0x7f6f1e2cd1a8 from  SgInitializedName
(VarDecl "'int' 'numLevels' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'numLevels' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x2104bc0  param numLevels)   total of 15 parameters
(VarDecl "'int' 'numLevels' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int * ) => *
underlying 'int'
vartype = 'int'
arraypart = '*'
int vec_ghosts   arraypart = '*'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name vec_ghosts, arraypart '*' ) 0x2104da0
* = * + 
2name vec_ghosts numdimensions 1
int *vec_ghosts

chillAST_FunctionDecl addVariableToSymbolTable( vec_ghosts )
adding int vec_ghosts to a symbol table that didn't already have it
0  domain_type *domain
1  int subdomain_dim_i
2  int subdomain_dim_j
3  int subdomain_dim_k
4  int subdomains_per_rank_in_i
5  int subdomains_per_rank_in_j
6  int subdomains_per_rank_in_k
7  int ranks_in_i
8  int ranks_in_j
9  int ranks_in_k
10  int rank
11  int *boundary_conditions
12  int numGrids
13  int ghosts
14  int numLevels
15  int *vec_ghosts

ConvertRoseInitName()  storing variable declaration 'vec_ghosts' with unique value 0x7f6f1e2cd2d0 from  SgInitializedName
(VarDecl "'int' 'vec_ghosts' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'vec_ghosts' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
PARAMETER

create_domain chillAST_FunctionDecl::addParameter( 0x2104da0  param vec_ghosts)   total of 16 parameters
(VarDecl "'int' 'vec_ghosts' '*'"  n_dim 1  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

function create_domain is a forward declaration or external


431   0x7f6f1e3c0b00   declarations    node SgFunctionDeclaration
ConvertRoseFunctionDecl( MGBuild )
ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( domain_type * ) => *
underlying 'domain_type'
OK, looking for domain_type
FunctionDecl looking for datatype domain_type
SourceFile looking for datatype domain_type
5 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
comparing to domain_type
found it
buh IS typedef struct {
  struct { unsigned smooth[10]; unsigned apply_op[10]; unsigned residual[10]; unsigned restriction[10]; unsigned interpolation[10]; unsigned communication[10]; unsigned pack[10]; unsigned grid2grid[10]; unsigned unpack[10]; unsigned recv[10]; unsigned send[10]; unsigned wait[10]; unsigned blas1[10]; unsigned blas3[10]; unsigned collectives[10]; unsigned Total[10]; unsigned build; unsigned vcycles; unsigned MGSolve; } cycles;
  int vcycles_performed;
  int Krylov_iterations;
  int CAKrylov_formations_of_G;
  int rank_of_neighbor[27];
  bufferCopy_type *bufferCopies[10];
  int bufferCopy_Pack_Start;
  int bufferCopy_Pack_End;
  int bufferCopy_Local_Start;
  int bufferCopy_Local_End;
  int bufferCopy_Unpack_Start;
  int bufferCopy_Unpack_End;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } ranks_in;
  struct { int i; int j; int k; } subdomains_per_rank_in;
  struct { int i; int j; int k; } subdomains_in;
  struct { int i; int j; int k; } boundary_condition;
  int rank;
  int subdomains_per_rank;
  int numLevels;
  int numGrids;
  int ghosts;
  double h[10];
  double dominant_eigenvalue_of_DinvA[10];
  subdomain_type *subdomains;
  int *vector_ghosts;
} 
OK, this is a typedef or struct we have to account for
vartype = 'domain_type'
arraypart = '*'
domain_type domain   arraypart = '*'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( domain  typedef * = * + 

chillAST_FunctionDecl addVariableToSymbolTable( domain )
adding domain_type domain to a symbol table that didn't already have it
domain_type;
0  domain_type *domain

ConvertRoseInitName()  storing variable declaration 'domain' with unique value 0x7f6f1e2cd3f8 from  SgInitializedName
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
NOT PARAMETER

new parameter:
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

MGBuild chillAST_FunctionDecl::addParameter( 0x2105070  param domain)   total of 1 parameters
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double a   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name a, arraypart '' ) 0x21053f0
2name a numdimensions 0
double a

chillAST_FunctionDecl addVariableToSymbolTable( a )
adding double a to a symbol table that didn't already have it
0  domain_type *domain
1  double a

ConvertRoseInitName()  storing variable declaration 'a' with unique value 0x7f6f1e2cd520 from  SgInitializedName
(VarDecl "'double' 'a' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'double' 'a' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

MGBuild chillAST_FunctionDecl::addParameter( 0x21053f0  param a)   total of 2 parameters
(VarDecl "'double' 'a' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double b   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name b, arraypart '' ) 0x2105660
2name b numdimensions 0
double b

chillAST_FunctionDecl addVariableToSymbolTable( b )
adding double b to a symbol table that didn't already have it
0  domain_type *domain
1  double a
2  double b

ConvertRoseInitName()  storing variable declaration 'b' with unique value 0x7f6f1e2cd648 from  SgInitializedName
(VarDecl "'double' 'b' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'double' 'b' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

MGBuild chillAST_FunctionDecl::addParameter( 0x2105660  param b)   total of 3 parameters
(VarDecl "'double' 'b' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double h0   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name h0, arraypart '' ) 0x21058c0
2name h0 numdimensions 0
double h0

chillAST_FunctionDecl addVariableToSymbolTable( h0 )
adding double h0 to a symbol table that didn't already have it
0  domain_type *domain
1  double a
2  double b
3  double h0

ConvertRoseInitName()  storing variable declaration 'h0' with unique value 0x7f6f1e2cd770 from  SgInitializedName
(VarDecl "'double' 'h0' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'double' 'h0' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

MGBuild chillAST_FunctionDecl::addParameter( 0x21058c0  param h0)   total of 4 parameters
(VarDecl "'double' 'h0' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

function MGBuild is a forward declaration or external


432   0x7f6f1e3c0e98   declarations    node SgFunctionDeclaration
ConvertRoseFunctionDecl( MGSolve )
ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( domain_type * ) => *
underlying 'domain_type'
OK, looking for domain_type
FunctionDecl looking for datatype domain_type
SourceFile looking for datatype domain_type
5 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
comparing to domain_type
found it
buh IS typedef struct {
  struct { unsigned smooth[10]; unsigned apply_op[10]; unsigned residual[10]; unsigned restriction[10]; unsigned interpolation[10]; unsigned communication[10]; unsigned pack[10]; unsigned grid2grid[10]; unsigned unpack[10]; unsigned recv[10]; unsigned send[10]; unsigned wait[10]; unsigned blas1[10]; unsigned blas3[10]; unsigned collectives[10]; unsigned Total[10]; unsigned build; unsigned vcycles; unsigned MGSolve; } cycles;
  int vcycles_performed;
  int Krylov_iterations;
  int CAKrylov_formations_of_G;
  int rank_of_neighbor[27];
  bufferCopy_type *bufferCopies[10];
  int bufferCopy_Pack_Start;
  int bufferCopy_Pack_End;
  int bufferCopy_Local_Start;
  int bufferCopy_Local_End;
  int bufferCopy_Unpack_Start;
  int bufferCopy_Unpack_End;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } ranks_in;
  struct { int i; int j; int k; } subdomains_per_rank_in;
  struct { int i; int j; int k; } subdomains_in;
  struct { int i; int j; int k; } boundary_condition;
  int rank;
  int subdomains_per_rank;
  int numLevels;
  int numGrids;
  int ghosts;
  double h[10];
  double dominant_eigenvalue_of_DinvA[10];
  subdomain_type *subdomains;
  int *vector_ghosts;
} 
OK, this is a typedef or struct we have to account for
vartype = 'domain_type'
arraypart = '*'
domain_type domain   arraypart = '*'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( domain  typedef * = * + 

chillAST_FunctionDecl addVariableToSymbolTable( domain )
adding domain_type domain to a symbol table that didn't already have it
domain_type;
0  domain_type *domain

ConvertRoseInitName()  storing variable declaration 'domain' with unique value 0x7f6f1e2cd898 from  SgInitializedName
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
NOT PARAMETER

new parameter:
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

MGSolve chillAST_FunctionDecl::addParameter( 0x2105b90  param domain)   total of 1 parameters
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int u_id   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name u_id, arraypart '' ) 0x2105ed0
2name u_id numdimensions 0
int u_id

chillAST_FunctionDecl addVariableToSymbolTable( u_id )
adding int u_id to a symbol table that didn't already have it
0  domain_type *domain
1  int u_id

ConvertRoseInitName()  storing variable declaration 'u_id' with unique value 0x7f6f1e2cd9c0 from  SgInitializedName
(VarDecl "'int' 'u_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'u_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

MGSolve chillAST_FunctionDecl::addParameter( 0x2105ed0  param u_id)   total of 2 parameters
(VarDecl "'int' 'u_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int F_id   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name F_id, arraypart '' ) 0x2106190
2name F_id numdimensions 0
int F_id

chillAST_FunctionDecl addVariableToSymbolTable( F_id )
adding int F_id to a symbol table that didn't already have it
0  domain_type *domain
1  int u_id
2  int F_id

ConvertRoseInitName()  storing variable declaration 'F_id' with unique value 0x7f6f1e2cdae8 from  SgInitializedName
(VarDecl "'int' 'F_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'F_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

MGSolve chillAST_FunctionDecl::addParameter( 0x2106190  param F_id)   total of 3 parameters
(VarDecl "'int' 'F_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double a   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name a, arraypart '' ) 0x2106400
2name a numdimensions 0
double a

chillAST_FunctionDecl addVariableToSymbolTable( a )
adding double a to a symbol table that didn't already have it
0  domain_type *domain
1  int u_id
2  int F_id
3  double a

ConvertRoseInitName()  storing variable declaration 'a' with unique value 0x7f6f1e2cdc10 from  SgInitializedName
(VarDecl "'double' 'a' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'double' 'a' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

MGSolve chillAST_FunctionDecl::addParameter( 0x2106400  param a)   total of 4 parameters
(VarDecl "'double' 'a' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double b   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name b, arraypart '' ) 0x2106670
2name b numdimensions 0
double b

chillAST_FunctionDecl addVariableToSymbolTable( b )
adding double b to a symbol table that didn't already have it
0  domain_type *domain
1  int u_id
2  int F_id
3  double a
4  double b

ConvertRoseInitName()  storing variable declaration 'b' with unique value 0x7f6f1e2cdd38 from  SgInitializedName
(VarDecl "'double' 'b' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'double' 'b' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

MGSolve chillAST_FunctionDecl::addParameter( 0x2106670  param b)   total of 5 parameters
(VarDecl "'double' 'b' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double desired_mg_norm   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name desired_mg_norm, arraypart '' ) 0x2106930
2name desired_mg_norm numdimensions 0
double desired_mg_norm

chillAST_FunctionDecl addVariableToSymbolTable( desired_mg_norm )
adding double desired_mg_norm to a symbol table that didn't already have it
0  domain_type *domain
1  int u_id
2  int F_id
3  double a
4  double b
5  double desired_mg_norm

ConvertRoseInitName()  storing variable declaration 'desired_mg_norm' with unique value 0x7f6f1e2cde60 from  SgInitializedName
(VarDecl "'double' 'desired_mg_norm' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'double' 'desired_mg_norm' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

MGSolve chillAST_FunctionDecl::addParameter( 0x2106930  param desired_mg_norm)   total of 6 parameters
(VarDecl "'double' 'desired_mg_norm' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

function MGSolve is a forward declaration or external


433   0x7f6f1e3c1230   declarations    node SgFunctionDeclaration
ConvertRoseFunctionDecl( FMGSolve )
ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( domain_type * ) => *
underlying 'domain_type'
OK, looking for domain_type
FunctionDecl looking for datatype domain_type
SourceFile looking for datatype domain_type
5 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
comparing to domain_type
found it
buh IS typedef struct {
  struct { unsigned smooth[10]; unsigned apply_op[10]; unsigned residual[10]; unsigned restriction[10]; unsigned interpolation[10]; unsigned communication[10]; unsigned pack[10]; unsigned grid2grid[10]; unsigned unpack[10]; unsigned recv[10]; unsigned send[10]; unsigned wait[10]; unsigned blas1[10]; unsigned blas3[10]; unsigned collectives[10]; unsigned Total[10]; unsigned build; unsigned vcycles; unsigned MGSolve; } cycles;
  int vcycles_performed;
  int Krylov_iterations;
  int CAKrylov_formations_of_G;
  int rank_of_neighbor[27];
  bufferCopy_type *bufferCopies[10];
  int bufferCopy_Pack_Start;
  int bufferCopy_Pack_End;
  int bufferCopy_Local_Start;
  int bufferCopy_Local_End;
  int bufferCopy_Unpack_Start;
  int bufferCopy_Unpack_End;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } ranks_in;
  struct { int i; int j; int k; } subdomains_per_rank_in;
  struct { int i; int j; int k; } subdomains_in;
  struct { int i; int j; int k; } boundary_condition;
  int rank;
  int subdomains_per_rank;
  int numLevels;
  int numGrids;
  int ghosts;
  double h[10];
  double dominant_eigenvalue_of_DinvA[10];
  subdomain_type *subdomains;
  int *vector_ghosts;
} 
OK, this is a typedef or struct we have to account for
vartype = 'domain_type'
arraypart = '*'
domain_type domain   arraypart = '*'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( domain  typedef * = * + 

chillAST_FunctionDecl addVariableToSymbolTable( domain )
adding domain_type domain to a symbol table that didn't already have it
domain_type;
0  domain_type *domain

ConvertRoseInitName()  storing variable declaration 'domain' with unique value 0x7f6f1e2cdf88 from  SgInitializedName
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
NOT PARAMETER

new parameter:
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

FMGSolve chillAST_FunctionDecl::addParameter( 0x2106be0  param domain)   total of 1 parameters
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int u_id   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name u_id, arraypart '' ) 0x2106f20
2name u_id numdimensions 0
int u_id

chillAST_FunctionDecl addVariableToSymbolTable( u_id )
adding int u_id to a symbol table that didn't already have it
0  domain_type *domain
1  int u_id

ConvertRoseInitName()  storing variable declaration 'u_id' with unique value 0x7f6f1e2ce0b0 from  SgInitializedName
(VarDecl "'int' 'u_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'u_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

FMGSolve chillAST_FunctionDecl::addParameter( 0x2106f20  param u_id)   total of 2 parameters
(VarDecl "'int' 'u_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int F_id   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name F_id, arraypart '' ) 0x21071e0
2name F_id numdimensions 0
int F_id

chillAST_FunctionDecl addVariableToSymbolTable( F_id )
adding int F_id to a symbol table that didn't already have it
0  domain_type *domain
1  int u_id
2  int F_id

ConvertRoseInitName()  storing variable declaration 'F_id' with unique value 0x7f6f1e2ce1d8 from  SgInitializedName
(VarDecl "'int' 'F_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'F_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

FMGSolve chillAST_FunctionDecl::addParameter( 0x21071e0  param F_id)   total of 3 parameters
(VarDecl "'int' 'F_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double a   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name a, arraypart '' ) 0x2107450
2name a numdimensions 0
double a

chillAST_FunctionDecl addVariableToSymbolTable( a )
adding double a to a symbol table that didn't already have it
0  domain_type *domain
1  int u_id
2  int F_id
3  double a

ConvertRoseInitName()  storing variable declaration 'a' with unique value 0x7f6f1e2ce300 from  SgInitializedName
(VarDecl "'double' 'a' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'double' 'a' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

FMGSolve chillAST_FunctionDecl::addParameter( 0x2107450  param a)   total of 4 parameters
(VarDecl "'double' 'a' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double b   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name b, arraypart '' ) 0x21076c0
2name b numdimensions 0
double b

chillAST_FunctionDecl addVariableToSymbolTable( b )
adding double b to a symbol table that didn't already have it
0  domain_type *domain
1  int u_id
2  int F_id
3  double a
4  double b

ConvertRoseInitName()  storing variable declaration 'b' with unique value 0x7f6f1e2ce428 from  SgInitializedName
(VarDecl "'double' 'b' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'double' 'b' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

FMGSolve chillAST_FunctionDecl::addParameter( 0x21076c0  param b)   total of 5 parameters
(VarDecl "'double' 'b' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double desired_mg_norm   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name desired_mg_norm, arraypart '' ) 0x2107980
2name desired_mg_norm numdimensions 0
double desired_mg_norm

chillAST_FunctionDecl addVariableToSymbolTable( desired_mg_norm )
adding double desired_mg_norm to a symbol table that didn't already have it
0  domain_type *domain
1  int u_id
2  int F_id
3  double a
4  double b
5  double desired_mg_norm

ConvertRoseInitName()  storing variable declaration 'desired_mg_norm' with unique value 0x7f6f1e2ce550 from  SgInitializedName
(VarDecl "'double' 'desired_mg_norm' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'double' 'desired_mg_norm' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

FMGSolve chillAST_FunctionDecl::addParameter( 0x2107980  param desired_mg_norm)   total of 6 parameters
(VarDecl "'double' 'desired_mg_norm' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

function FMGSolve is a forward declaration or external


434   0x7f6f1e3c15c8   declarations    node SgFunctionDeclaration
ConvertRoseFunctionDecl( print_timing )
ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( domain_type * ) => *
underlying 'domain_type'
OK, looking for domain_type
FunctionDecl looking for datatype domain_type
SourceFile looking for datatype domain_type
5 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
comparing to domain_type
found it
buh IS typedef struct {
  struct { unsigned smooth[10]; unsigned apply_op[10]; unsigned residual[10]; unsigned restriction[10]; unsigned interpolation[10]; unsigned communication[10]; unsigned pack[10]; unsigned grid2grid[10]; unsigned unpack[10]; unsigned recv[10]; unsigned send[10]; unsigned wait[10]; unsigned blas1[10]; unsigned blas3[10]; unsigned collectives[10]; unsigned Total[10]; unsigned build; unsigned vcycles; unsigned MGSolve; } cycles;
  int vcycles_performed;
  int Krylov_iterations;
  int CAKrylov_formations_of_G;
  int rank_of_neighbor[27];
  bufferCopy_type *bufferCopies[10];
  int bufferCopy_Pack_Start;
  int bufferCopy_Pack_End;
  int bufferCopy_Local_Start;
  int bufferCopy_Local_End;
  int bufferCopy_Unpack_Start;
  int bufferCopy_Unpack_End;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } ranks_in;
  struct { int i; int j; int k; } subdomains_per_rank_in;
  struct { int i; int j; int k; } subdomains_in;
  struct { int i; int j; int k; } boundary_condition;
  int rank;
  int subdomains_per_rank;
  int numLevels;
  int numGrids;
  int ghosts;
  double h[10];
  double dominant_eigenvalue_of_DinvA[10];
  subdomain_type *subdomains;
  int *vector_ghosts;
} 
OK, this is a typedef or struct we have to account for
vartype = 'domain_type'
arraypart = '*'
domain_type domain   arraypart = '*'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( domain  typedef * = * + 

chillAST_FunctionDecl addVariableToSymbolTable( domain )
adding domain_type domain to a symbol table that didn't already have it
domain_type;
0  domain_type *domain

ConvertRoseInitName()  storing variable declaration 'domain' with unique value 0x7f6f1e2ce678 from  SgInitializedName
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
NOT PARAMETER

new parameter:
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

print_timing chillAST_FunctionDecl::addParameter( 0x2107d70  param domain)   total of 1 parameters
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

addparameter done

function print_timing is a forward declaration or external


435   0x7f6f1e3c1960   declarations    node SgFunctionDeclaration
ConvertRoseFunctionDecl( smooth_box_1_64 )
ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( domain_type * ) => *
underlying 'domain_type'
OK, looking for domain_type
FunctionDecl looking for datatype domain_type
SourceFile looking for datatype domain_type
5 global typedefs
comparing to box_type
comparing to bufferCopy_type
comparing to neighbor_type
comparing to subdomain_type
comparing to domain_type
found it
buh IS typedef struct {
  struct { unsigned smooth[10]; unsigned apply_op[10]; unsigned residual[10]; unsigned restriction[10]; unsigned interpolation[10]; unsigned communication[10]; unsigned pack[10]; unsigned grid2grid[10]; unsigned unpack[10]; unsigned recv[10]; unsigned send[10]; unsigned wait[10]; unsigned blas1[10]; unsigned blas3[10]; unsigned collectives[10]; unsigned Total[10]; unsigned build; unsigned vcycles; unsigned MGSolve; } cycles;
  int vcycles_performed;
  int Krylov_iterations;
  int CAKrylov_formations_of_G;
  int rank_of_neighbor[27];
  bufferCopy_type *bufferCopies[10];
  int bufferCopy_Pack_Start;
  int bufferCopy_Pack_End;
  int bufferCopy_Local_Start;
  int bufferCopy_Local_End;
  int bufferCopy_Unpack_Start;
  int bufferCopy_Unpack_End;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } ranks_in;
  struct { int i; int j; int k; } subdomains_per_rank_in;
  struct { int i; int j; int k; } subdomains_in;
  struct { int i; int j; int k; } boundary_condition;
  int rank;
  int subdomains_per_rank;
  int numLevels;
  int numGrids;
  int ghosts;
  double h[10];
  double dominant_eigenvalue_of_DinvA[10];
  subdomain_type *subdomains;
  int *vector_ghosts;
} 
OK, this is a typedef or struct we have to account for
vartype = 'domain_type'
arraypart = '*'
domain_type domain   arraypart = '*'
vardecl of a typedef
chillAST_VarDecl::chillAST_VarDecl( domain  typedef * = * + 

chillAST_FunctionDecl addVariableToSymbolTable( domain )
adding domain_type domain to a symbol table that didn't already have it
domain_type;
0  domain_type *domain

ConvertRoseInitName()  storing variable declaration 'domain' with unique value 0x7f6f1e2ce7a0 from  SgInitializedName
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
NOT PARAMETER

new parameter:
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

smooth_box_1_64 chillAST_FunctionDecl::addParameter( 0x21081d0  param domain)   total of 1 parameters
(VarDecl "'domain_type' 'domain' '*'"  n_dim 1  )  vardef (nil)
typedefinition 0x20eb620
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int level   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name level, arraypart '' ) 0x2108430
2name level numdimensions 0
int level

chillAST_FunctionDecl addVariableToSymbolTable( level )
adding int level to a symbol table that didn't already have it
0  domain_type *domain
1  int level

ConvertRoseInitName()  storing variable declaration 'level' with unique value 0x7f6f1e2ce8c8 from  SgInitializedName
(VarDecl "'int' 'level' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'level' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

smooth_box_1_64 chillAST_FunctionDecl::addParameter( 0x2108430  param level)   total of 2 parameters
(VarDecl "'int' 'level' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int box_id   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name box_id, arraypart '' ) 0x2108650
2name box_id numdimensions 0
int box_id

chillAST_FunctionDecl addVariableToSymbolTable( box_id )
adding int box_id to a symbol table that didn't already have it
0  domain_type *domain
1  int level
2  int box_id

ConvertRoseInitName()  storing variable declaration 'box_id' with unique value 0x7f6f1e2ce9f0 from  SgInitializedName
(VarDecl "'int' 'box_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'box_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

smooth_box_1_64 chillAST_FunctionDecl::addParameter( 0x2108650  param box_id)   total of 3 parameters
(VarDecl "'int' 'box_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int phi_id   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name phi_id, arraypart '' ) 0x21088e0
2name phi_id numdimensions 0
int phi_id

chillAST_FunctionDecl addVariableToSymbolTable( phi_id )
adding int phi_id to a symbol table that didn't already have it
0  domain_type *domain
1  int level
2  int box_id
3  int phi_id

ConvertRoseInitName()  storing variable declaration 'phi_id' with unique value 0x7f6f1e2ceb18 from  SgInitializedName
(VarDecl "'int' 'phi_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'phi_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

smooth_box_1_64 chillAST_FunctionDecl::addParameter( 0x21088e0  param phi_id)   total of 4 parameters
(VarDecl "'int' 'phi_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int rhs_id   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name rhs_id, arraypart '' ) 0x2108b60
2name rhs_id numdimensions 0
int rhs_id

chillAST_FunctionDecl addVariableToSymbolTable( rhs_id )
adding int rhs_id to a symbol table that didn't already have it
0  domain_type *domain
1  int level
2  int box_id
3  int phi_id
4  int rhs_id

ConvertRoseInitName()  storing variable declaration 'rhs_id' with unique value 0x7f6f1e2cec40 from  SgInitializedName
(VarDecl "'int' 'rhs_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'rhs_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

smooth_box_1_64 chillAST_FunctionDecl::addParameter( 0x2108b60  param rhs_id)   total of 5 parameters
(VarDecl "'int' 'rhs_id' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double x   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name x, arraypart '' ) 0x2108e20
2name x numdimensions 0
double x

chillAST_FunctionDecl addVariableToSymbolTable( x )
adding double x to a symbol table that didn't already have it
0  domain_type *domain
1  int level
2  int box_id
3  int phi_id
4  int rhs_id
5  double x

ConvertRoseInitName()  storing variable declaration 'x' with unique value 0x7f6f1e2ced68 from  SgInitializedName
(VarDecl "'double' 'x' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'double' 'x' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

smooth_box_1_64 chillAST_FunctionDecl::addParameter( 0x2108e20  param x)   total of 6 parameters
(VarDecl "'double' 'x' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double y   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name y, arraypart '' ) 0x2109090
2name y numdimensions 0
double y

chillAST_FunctionDecl addVariableToSymbolTable( y )
adding double y to a symbol table that didn't already have it
0  domain_type *domain
1  int level
2  int box_id
3  int phi_id
4  int rhs_id
5  double x
6  double y

ConvertRoseInitName()  storing variable declaration 'y' with unique value 0x7f6f1e2cee90 from  SgInitializedName
(VarDecl "'double' 'y' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'double' 'y' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

smooth_box_1_64 chillAST_FunctionDecl::addParameter( 0x2109090  param y)   total of 7 parameters
(VarDecl "'double' 'y' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseParamVarDecl()   ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int sweep   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name sweep, arraypart '' ) 0x2109300
2name sweep numdimensions 0
int sweep

chillAST_FunctionDecl addVariableToSymbolTable( sweep )
adding int sweep to a symbol table that didn't already have it
0  domain_type *domain
1  int level
2  int box_id
3  int phi_id
4  int rhs_id
5  double x
6  double y
7  int sweep

ConvertRoseInitName()  storing variable declaration 'sweep' with unique value 0x7f6f1e2cefb8 from  SgInitializedName
(VarDecl "'int' 'sweep' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

new parameter:
(VarDecl "'int' 'sweep' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

smooth_box_1_64 chillAST_FunctionDecl::addParameter( 0x2109300  param sweep)   total of 8 parameters
(VarDecl "'int' 'sweep' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
PARAMETER

addparameter done

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: i
arraypart 

checking ugly special case
vartype is int
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart '' ) 0x21096e0
2name i numdimensions 0
int i

chillAST_CompoundStmt addVariableToSymbolTable( i )
adding int i to a symbol table that didn't already have it
0  int i

ConvertRoseInitName()  storing variable declaration 'i' with unique value 0x7f6f1e2cf0e0 from  SgInitializedName
(VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: j
arraypart 

checking ugly special case
vartype is int
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart '' ) 0x2109a20
2name j numdimensions 0
int j

chillAST_CompoundStmt addVariableToSymbolTable( j )
adding int j to a symbol table that didn't already have it
0  int i
1  int j

ConvertRoseInitName()  storing variable declaration 'j' with unique value 0x7f6f1e2cf208 from  SgInitializedName
(VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: k
arraypart 

checking ugly special case
vartype is int
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart '' ) 0x2109d80
2name k numdimensions 0
int k

chillAST_CompoundStmt addVariableToSymbolTable( k )
adding int k to a symbol table that didn't already have it
0  int i
1  int j
2  int k

ConvertRoseInitName()  storing variable declaration 'k' with unique value 0x7f6f1e2cf330 from  SgInitializedName
(VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: t
arraypart 

checking ugly special case
vartype is int
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int t   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name t, arraypart '' ) 0x210a0c0
2name t numdimensions 0
int t

chillAST_CompoundStmt addVariableToSymbolTable( t )
adding int t to a symbol table that didn't already have it
0  int i
1  int j
2  int k
3  int t

ConvertRoseInitName()  storing variable declaration 't' with unique value 0x7f6f1e2cf458 from  SgInitializedName
(VarDecl "'int' 't' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( double ) => 
vartype: double
varname: ALPHA
arraypart 

checking ugly special case
vartype is double
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double ALPHA   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name ALPHA, arraypart '' ) 0x210a3c0
2name ALPHA numdimensions 0
double ALPHA

chillAST_CompoundStmt addVariableToSymbolTable( ALPHA )
adding double ALPHA to a symbol table that didn't already have it
0  int i
1  int j
2  int k
3  int t
4  double ALPHA

ConvertRoseInitName()  storing variable declaration 'ALPHA' with unique value 0x7f6f1e2cf580 from  SgInitializedName
(VarDecl "'double' 'ALPHA' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( double ) => 
vartype: double
varname: BETA
arraypart 

checking ugly special case
vartype is double
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double BETA   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name BETA, arraypart '' ) 0x210a7b0
2name BETA numdimensions 0
double BETA

chillAST_CompoundStmt addVariableToSymbolTable( BETA )
adding double BETA to a symbol table that didn't already have it
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA

ConvertRoseInitName()  storing variable declaration 'BETA' with unique value 0x7f6f1e2cf6a8 from  SgInitializedName
(VarDecl "'double' 'BETA' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( double ) => 
vartype: double
varname: GAMMA
arraypart 

checking ugly special case
vartype is double
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double GAMMA   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name GAMMA, arraypart '' ) 0x210aaf0
2name GAMMA numdimensions 0
double GAMMA

chillAST_CompoundStmt addVariableToSymbolTable( GAMMA )
adding double GAMMA to a symbol table that didn't already have it
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA

ConvertRoseInitName()  storing variable declaration 'GAMMA' with unique value 0x7f6f1e2cf7d0 from  SgInitializedName
(VarDecl "'double' 'GAMMA' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( double ) => 
vartype: double
varname: DELTA
arraypart 

checking ugly special case
vartype is double
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double DELTA   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name DELTA, arraypart '' ) 0x210ada0
2name DELTA numdimensions 0
double DELTA

chillAST_CompoundStmt addVariableToSymbolTable( DELTA )
adding double DELTA to a symbol table that didn't already have it
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA

ConvertRoseInitName()  storing variable declaration 'DELTA' with unique value 0x7f6f1e2cf8f8 from  SgInitializedName
(VarDecl "'double' 'DELTA' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( int ) => 
vartype: int
varname: s
arraypart 

checking ugly special case
vartype is int
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( int ) => 
underlying 'int'
vartype = 'int'
arraypart = ''
int s   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type int, name s, arraypart '' ) 0x210b190
2name s numdimensions 0
int s

chillAST_CompoundStmt addVariableToSymbolTable( s )
adding int s to a symbol table that didn't already have it
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s

ConvertRoseInitName()  storing variable declaration 's' with unique value 0x7f6f1e2cfa20 from  SgInitializedName
(VarDecl "'int' 's' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
s = sweep
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
s
varname s
checking 169 variable declarations
varname s   vartype int   def 0x7f6f1e2cfa20
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
sweep
varname sweep
checking 169 variable declarations
varname sweep   vartype int   def 0x7f6f1e2cefb8
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( double ) => 
vartype: double
varname: h2inv
arraypart 

checking ugly special case
vartype is double
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double h2inv   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name h2inv, arraypart '' ) 0x210b850
2name h2inv numdimensions 0
double h2inv

chillAST_CompoundStmt addVariableToSymbolTable( h2inv )
adding double h2inv to a symbol table that didn't already have it
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv

ConvertRoseInitName()  storing variable declaration 'h2inv' with unique value 0x7f6f1e2cfb48 from  SgInitializedName
(VarDecl "'double' 'h2inv' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( double ) => 
vartype: double
varname: TwoThirds
arraypart 

checking ugly special case
vartype is double
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( double ) => 
underlying 'double'
vartype = 'double'
arraypart = ''
double TwoThirds   arraypart = ''

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name TwoThirds, arraypart '' ) 0x210bc70
2name TwoThirds numdimensions 0
double TwoThirds

chillAST_CompoundStmt addVariableToSymbolTable( TwoThirds )
adding double TwoThirds to a symbol table that didn't already have it
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds

ConvertRoseInitName()  storing variable declaration 'TwoThirds' with unique value 0x7f6f1e2cfc70 from  SgInitializedName
(VarDecl "'double' 'TwoThirds' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( double [66UL][66UL][66UL] ) => [66][66][66]
vartype: double
varname: _in
arraypart [66][66][66]

checking ugly special case
vartype is double
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( double [66UL][66UL][66UL] ) => [66][66][66]
underlying 'double'
ARRAY TYPE
but arraypart is already '[66][66][66]'
vartype = 'double'
arraypart = '[66][66][66]'
double _in   arraypart = '[66][66][66]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name _in, arraypart '[66][66][66]' ) 0x210c050
[66][66][66] =  + [66][66][66]
2name _in numdimensions 3
double _in[66][66][66]

chillAST_CompoundStmt addVariableToSymbolTable( _in )
adding double _in to a symbol table that didn't already have it
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]

ConvertRoseInitName()  storing variable declaration '_in' with unique value 0x7f6f1e2cfd98 from  SgInitializedName
(VarDecl "'double' '_in' '[66][66][66]'"  n_dim 3  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( double [66UL][66UL][66UL] ) => [66][66][66]
vartype: double
varname: _out
arraypart [66][66][66]

checking ugly special case
vartype is double
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( double [66UL][66UL][66UL] ) => [66][66][66]
underlying 'double'
ARRAY TYPE
but arraypart is already '[66][66][66]'
vartype = 'double'
arraypart = '[66][66][66]'
double _out   arraypart = '[66][66][66]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name _out, arraypart '[66][66][66]' ) 0x210c4c0
[66][66][66] =  + [66][66][66]
2name _out numdimensions 3
double _out[66][66][66]

chillAST_CompoundStmt addVariableToSymbolTable( _out )
adding double _out to a symbol table that didn't already have it
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]

ConvertRoseInitName()  storing variable declaration '_out' with unique value 0x7f6f1e2cfec0 from  SgInitializedName
(VarDecl "'double' '_out' '[66][66][66]'"  n_dim 3  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( double [66UL][66UL][66UL] ) => [66][66][66]
vartype: double
varname: _rhs
arraypart [66][66][66]

checking ugly special case
vartype is double
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( double [66UL][66UL][66UL] ) => [66][66][66]
underlying 'double'
ARRAY TYPE
but arraypart is already '[66][66][66]'
vartype = 'double'
arraypart = '[66][66][66]'
double _rhs   arraypart = '[66][66][66]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name _rhs, arraypart '[66][66][66]' ) 0x210c870
[66][66][66] =  + [66][66][66]
2name _rhs numdimensions 3
double _rhs[66][66][66]

chillAST_CompoundStmt addVariableToSymbolTable( _rhs )
adding double _rhs to a symbol table that didn't already have it
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]

ConvertRoseInitName()  storing variable declaration '_rhs' with unique value 0x7f6f1e2cffe8 from  SgInitializedName
(VarDecl "'double' '_rhs' '[66][66][66]'"  n_dim 3  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration
ConvertRoseVarDecl2() 
1 initialized names
parseArrayParts( double [66UL][66UL][66UL] ) => [66][66][66]
vartype: double
varname: _lambda
arraypart [66][66][66]

checking ugly special case
vartype is double
parent is a CompoundStmt
there WAS NO defining declaration, so an int or float or something
ConvertXXXXInitName()
parseArrayParts( double [66UL][66UL][66UL] ) => [66][66][66]
underlying 'double'
ARRAY TYPE
but arraypart is already '[66][66][66]'
vartype = 'double'
arraypart = '[66][66][66]'
double _lambda   arraypart = '[66][66][66]'

*** creating new chillAST_VarDecl ***
2chillAST_VarDecl::chillAST_VarDecl( type double, name _lambda, arraypart '[66][66][66]' ) 0x210cc20
[66][66][66] =  + [66][66][66]
2name _lambda numdimensions 3
double _lambda[66][66][66]

chillAST_CompoundStmt addVariableToSymbolTable( _lambda )
adding double _lambda to a symbol table that didn't already have it
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

ConvertRoseInitName()  storing variable declaration '_lambda' with unique value 0x7f6f1e2d0110 from  SgInitializedName
(VarDecl "'double' '_lambda' '[66][66][66]'"  n_dim 3  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER

ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
i =(j =(k = 0))
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgAssignOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
(j =(k = 0))
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgAssignOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
(k = 0)
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
t = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
t
varname t
checking 175 variable declarations
varname t   vartype int   def 0x7f6f1e2cf458
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
t < 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
t
varname t
checking 175 variable declarations
varname t   vartype int   def 0x7f6f1e2cf458
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
t
varname t
checking 175 variable declarations
varname t   vartype int   def 0x7f6f1e2cf458
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgIfStmt
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 356 SgEqualityOp
((t + s) % 2) == 0
ConvertRoseGenericAST(),  rose AST node of type SgModOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 463 SgModOp
((t + s) % 2)
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(t + s)
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
t
varname t
checking 175 variable declarations
varname t   vartype int   def 0x7f6f1e2cf458
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
s
varname s
checking 175 variable declarations
varname s   vartype int   def 0x7f6f1e2cfa20
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
k = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
k < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
j = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
j < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
i = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
i < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
_out[k][j][i] =((((ALPHA * _in[k][j][i]) +(BETA *(((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) +(ALPHA * _in[k][j][i + 1])))) +(GAMMA *(((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1]))) +(DELTA *(((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1])))
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k][j][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((ALPHA * _in[k][j][i]) +(BETA *(((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) +(ALPHA * _in[k][j][i + 1])))) +(GAMMA *(((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1]))) +(DELTA *(((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1])))
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((ALPHA * _in[k][j][i]) +(BETA *(((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) +(ALPHA * _in[k][j][i + 1])))) +(GAMMA *(((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])))
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((ALPHA * _in[k][j][i]) +(BETA *(((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) +(ALPHA * _in[k][j][i + 1]))))
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(ALPHA * _in[k][j][i])
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
ALPHA
varname ALPHA
checking 175 variable declarations
varname ALPHA   vartype double   def 0x7f6f1e2cf580
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k][j][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(BETA *(((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) +(ALPHA * _in[k][j][i + 1])))
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
BETA
varname BETA
checking 175 variable declarations
varname BETA   vartype double   def 0x7f6f1e2cf6a8
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) +(ALPHA * _in[k][j][i + 1]))
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(_in[k - 1][j][i] + _in[k][j - 1][i])
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k - 1]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k - 1][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k][j - 1]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k][j - 1][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k][j + 1]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k][j + 1][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k + 1]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k + 1][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k][j]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k][j][i - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(ALPHA * _in[k][j][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
ALPHA
varname ALPHA
checking 175 variable declarations
varname ALPHA   vartype double   def 0x7f6f1e2cf580
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k][j]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k][j][i + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(GAMMA *(((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1]))
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
GAMMA
varname GAMMA
checking 175 variable declarations
varname GAMMA   vartype double   def 0x7f6f1e2cf7d0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k - 1]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k - 1][j]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j][i - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k][j - 1]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k][j - 1][i - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k][j + 1]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k][j + 1][i - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k + 1]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k + 1][j]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j][i - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k - 1]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k - 1][j - 1]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j - 1][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k - 1]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k - 1][j + 1]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j + 1][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k + 1]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k + 1][j - 1]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j - 1][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k + 1]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k + 1][j + 1]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j + 1][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k - 1]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k - 1][j]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j][i + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k][j - 1]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k][j - 1][i + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k][j + 1]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k][j + 1][i + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k + 1]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k + 1][j]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j][i + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(DELTA *(((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
DELTA
varname DELTA
checking 175 variable declarations
varname DELTA   vartype double   def 0x7f6f1e2cf8f8
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k - 1]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k - 1][j - 1]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j - 1][i - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k - 1]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k - 1][j + 1]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j + 1][i - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k + 1]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k + 1][j - 1]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j - 1][i - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k + 1]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k + 1][j + 1]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j + 1][i - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k - 1]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k - 1][j - 1]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j - 1][i + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k - 1]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k - 1][j + 1]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k - 1][j + 1][i + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k + 1]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j - 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k + 1][j - 1]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j - 1][i + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k + 1]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_in[k + 1][j + 1]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _in[k + 1][j + 1][i + 1]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
k = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
k < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
j = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
j < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
i = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
i < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
_out[k][j][i] =((x * _in[k][j][i]) -((y * h2inv) * _out[k][j][i]))
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k][j][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
((x * _in[k][j][i]) -((y * h2inv) * _out[k][j][i]))
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(x * _in[k][j][i])
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
x
varname x
checking 175 variable declarations
varname x   vartype double   def 0x7f6f1e2ced68
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k][j][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
((y * h2inv) * _out[k][j][i])
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(y * h2inv)
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
y
varname y
checking 175 variable declarations
varname y   vartype double   def 0x7f6f1e2cee90
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
h2inv
varname h2inv
checking 175 variable declarations
varname h2inv   vartype double   def 0x7f6f1e2cfb48
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k][j][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
k = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
k < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
j = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
j < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
i = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
i < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
_out[k][j][i] =(_in[k][j][i] -((TwoThirds * _lambda[k][j][i]) *(_out[k][j][i] - _rhs[k][j][i])))
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k][j][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
(_in[k][j][i] -((TwoThirds * _lambda[k][j][i]) *(_out[k][j][i] - _rhs[k][j][i])))
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k][j][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
((TwoThirds * _lambda[k][j][i]) *(_out[k][j][i] - _rhs[k][j][i]))
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(TwoThirds * _lambda[k][j][i])
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
TwoThirds
varname TwoThirds
checking 175 variable declarations
varname TwoThirds   vartype double   def 0x7f6f1e2cfc70
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_lambda
varname _lambda
checking 175 variable declarations
varname _lambda   vartype double [66][66][66]   def 0x7f6f1e2d0110
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
checking against '_rhs' vartype double   uniquePtr 0x7f6f1e2cffe8 
checking against '_lambda' vartype double   uniquePtr 0x7f6f1e2d0110 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_lambda'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_lambda' )

ConvertRoseArrayRefExp() result is _lambda[k]
(ArraySubscriptExpr (_lambda) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_lambda' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_lambda[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_lambda) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_lambda' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _lambda[k][j]
(ArraySubscriptExpr (_lambda) 'double' rvalue
  (ArraySubscriptExpr (_lambda) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_lambda' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_lambda[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_lambda) 'double' rvalue
  (ArraySubscriptExpr (_lambda) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_lambda' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _lambda[k][j][i]
(ArraySubscriptExpr (_lambda) 'double' rvalue
  (ArraySubscriptExpr (_lambda) 'double' rvalue
    (ArraySubscriptExpr (_lambda) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_lambda' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
(_out[k][j][i] - _rhs[k][j][i])
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k][j][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_rhs
varname _rhs
checking 175 variable declarations
varname _rhs   vartype double [66][66][66]   def 0x7f6f1e2cffe8
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
checking against '_rhs' vartype double   uniquePtr 0x7f6f1e2cffe8 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_rhs'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_rhs' )

ConvertRoseArrayRefExp() result is _rhs[k]
(ArraySubscriptExpr (_rhs) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_rhs' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_rhs[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_rhs) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_rhs' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _rhs[k][j]
(ArraySubscriptExpr (_rhs) 'double' rvalue
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_rhs' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_rhs[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_rhs) 'double' rvalue
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_rhs' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _rhs[k][j][i]
(ArraySubscriptExpr (_rhs) 'double' rvalue
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_rhs' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
k = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
k < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
j = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
j < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
i = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
i < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
_in[k][j][i] =((((ALPHA * _out[k][j][i]) +(BETA *(((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1]))) +(GAMMA *(((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1]))) +(DELTA *(((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) +(_out[k - 1][j + 1][i + 1] * DELTA)) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1])))
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k][j][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((ALPHA * _out[k][j][i]) +(BETA *(((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1]))) +(GAMMA *(((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1]))) +(DELTA *(((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) +(_out[k - 1][j + 1][i + 1] * DELTA)) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1])))
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((ALPHA * _out[k][j][i]) +(BETA *(((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1]))) +(GAMMA *(((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])))
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((ALPHA * _out[k][j][i]) +(BETA *(((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])))
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(ALPHA * _out[k][j][i])
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
ALPHA
varname ALPHA
checking 175 variable declarations
varname ALPHA   vartype double   def 0x7f6f1e2cf580
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k][j][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(BETA *(((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1]))
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
BETA
varname BETA
checking 175 variable declarations
varname BETA   vartype double   def 0x7f6f1e2cf6a8
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(_out[k - 1][j][i] + _out[k][j - 1][i])
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k - 1]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k - 1][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k][j - 1]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k][j - 1][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k][j + 1]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k][j + 1][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k + 1]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k + 1][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k][j]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k][j][i - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k][j]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k][j][i + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(GAMMA *(((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1]))
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
GAMMA
varname GAMMA
checking 175 variable declarations
varname GAMMA   vartype double   def 0x7f6f1e2cf7d0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k - 1]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k - 1][j]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j][i - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k][j - 1]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k][j - 1][i - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k][j + 1]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k][j + 1][i - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k + 1]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k + 1][j]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j][i - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k - 1]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k - 1][j - 1]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j - 1][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k - 1]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k - 1][j + 1]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j + 1][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k + 1]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k + 1][j - 1]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j - 1][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k + 1]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k + 1][j + 1]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j + 1][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k - 1]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k - 1][j]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j][i + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k][j - 1]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k][j - 1][i + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k][j + 1]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k][j + 1][i + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k + 1]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k + 1][j]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j][i + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(DELTA *(((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) +(_out[k - 1][j + 1][i + 1] * DELTA)) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
DELTA
varname DELTA
checking 175 variable declarations
varname DELTA   vartype double   def 0x7f6f1e2cf8f8
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) +(_out[k - 1][j + 1][i + 1] * DELTA)) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) +(_out[k - 1][j + 1][i + 1] * DELTA)) + _out[k + 1][j - 1][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) +(_out[k - 1][j + 1][i + 1] * DELTA))
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1])
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k - 1]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k - 1][j - 1]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j - 1][i - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k - 1]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k - 1][j + 1]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j + 1][i - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k + 1]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k + 1][j - 1]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j - 1][i - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k + 1]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
i - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k + 1][j + 1]'
ConvertRoseArrayRefExp, index 'i - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j + 1][i - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k - 1]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k - 1][j - 1]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j - 1][i + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(_out[k - 1][j + 1][i + 1] * DELTA)
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
k - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k - 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k - 1]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k - 1][j + 1]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k - 1][j + 1][i + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
DELTA
varname DELTA
checking 175 variable declarations
varname DELTA   vartype double   def 0x7f6f1e2cf8f8
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
j - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k + 1]'
ConvertRoseArrayRefExp, index 'j - 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j - 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k + 1][j - 1]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j - 1][i + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
k + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k + 1'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
j + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k + 1]'
ConvertRoseArrayRefExp, index 'j + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
i + 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseArrayRefExp, base  '_out[k + 1][j + 1]'
ConvertRoseArrayRefExp, index 'i + 1'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp() result is _out[k + 1][j + 1][i + 1]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
k = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
k < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
j = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
j < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
i = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
i < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
_in[k][j][i] =((x * _out[k][j][i]) -((y * h2inv) * _in[k][j][i]))
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k][j][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
((x * _out[k][j][i]) -((y * h2inv) * _in[k][j][i]))
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(x * _out[k][j][i])
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
x
varname x
checking 175 variable declarations
varname x   vartype double   def 0x7f6f1e2ced68
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k][j][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
((y * h2inv) * _in[k][j][i])
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(y * h2inv)
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
y
varname y
checking 175 variable declarations
varname y   vartype double   def 0x7f6f1e2cee90
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
h2inv
varname h2inv
checking 175 variable declarations
varname h2inv   vartype double   def 0x7f6f1e2cfb48
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k][j][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
k = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
k < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
j = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
j < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
i = 0
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 441 SgLessThanOp
i < 64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
64 + 1 - 1
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 3 SgAddOp
64 + 1
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement

ConvertRoseBinaryOp() AST Node is 258 SgAssignOp
_in[k][j][i] =(_out[k][j][i] -((TwoThirds * _lambda[k][j][i]) *(_in[k][j][i] - _rhs[k][j][i])))
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k][j][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
(_out[k][j][i] -((TwoThirds * _lambda[k][j][i]) *(_in[k][j][i] - _rhs[k][j][i])))
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_out
varname _out
checking 175 variable declarations
varname _out   vartype double [66][66][66]   def 0x7f6f1e2cfec0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_out' )

ConvertRoseArrayRefExp() result is _out[k]
(ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_out' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _out[k][j]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_out[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_out' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _out[k][j][i]
(ArraySubscriptExpr (_out) 'double' rvalue
  (ArraySubscriptExpr (_out) 'double' rvalue
    (ArraySubscriptExpr (_out) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_out' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
((TwoThirds * _lambda[k][j][i]) *(_in[k][j][i] - _rhs[k][j][i]))
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 470 SgMultiplyOp
(TwoThirds * _lambda[k][j][i])
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
TwoThirds
varname TwoThirds
checking 175 variable declarations
varname TwoThirds   vartype double   def 0x7f6f1e2cfc70
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_lambda
varname _lambda
checking 175 variable declarations
varname _lambda   vartype double [66][66][66]   def 0x7f6f1e2d0110
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
checking against '_rhs' vartype double   uniquePtr 0x7f6f1e2cffe8 
checking against '_lambda' vartype double   uniquePtr 0x7f6f1e2d0110 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_lambda'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_lambda' )

ConvertRoseArrayRefExp() result is _lambda[k]
(ArraySubscriptExpr (_lambda) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_lambda' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_lambda[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_lambda) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_lambda' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _lambda[k][j]
(ArraySubscriptExpr (_lambda) 'double' rvalue
  (ArraySubscriptExpr (_lambda) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_lambda' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_lambda[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_lambda) 'double' rvalue
  (ArraySubscriptExpr (_lambda) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_lambda' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _lambda[k][j][i]
(ArraySubscriptExpr (_lambda) 'double' rvalue
  (ArraySubscriptExpr (_lambda) 'double' rvalue
    (ArraySubscriptExpr (_lambda) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_lambda' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

(a binary op)

ConvertRoseBinaryOp() AST Node is 589 SgSubtractOp
(_in[k][j][i] - _rhs[k][j][i])
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_in
varname _in
checking 175 variable declarations
varname _in   vartype double [66][66][66]   def 0x7f6f1e2cfd98
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_in' )

ConvertRoseArrayRefExp() result is _in[k]
(ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_in' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _in[k][j]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_in[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_in' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _in[k][j][i]
(ArraySubscriptExpr (_in) 'double' rvalue
  (ArraySubscriptExpr (_in) 'double' rvalue
    (ArraySubscriptExpr (_in) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_in' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
converting base
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
_rhs
varname _rhs
checking 175 variable declarations
varname _rhs   vartype double [66][66][66]   def 0x7f6f1e2cffe8
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c2c50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c2d78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2ea0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c30f0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c3218 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c3340 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c3590 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c36b8 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c37e0 
checking against 'volume' vartype int   uniquePtr 0x7f6f1e2c3908 
checking against 'bufsizes' vartype int   uniquePtr 0x7f6f1e2c3a30 
checking against 'surface_bufs' vartype double   uniquePtr 0x7f6f1e2c3b58 
checking against 'ghost_bufs' vartype double   uniquePtr 0x7f6f1e2c3c80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c3da8 
checking against 'grids' vartype double   uniquePtr 0x7f6f1e2c3ed0 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'box' vartype box_type   uniquePtr (nil) 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2c4248 
checking against 'low_i' vartype int   uniquePtr 0x7f6f1e2c4370 
checking against 'low_j' vartype int   uniquePtr 0x7f6f1e2c4498 
checking against 'low_k' vartype int   uniquePtr 0x7f6f1e2c45c0 
checking against 'dim_i' vartype int   uniquePtr 0x7f6f1e2c46e8 
checking against 'dim_j' vartype int   uniquePtr 0x7f6f1e2c4810 
checking against 'dim_k' vartype int   uniquePtr 0x7f6f1e2c4938 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c4a60 
checking against 'isFace' vartype int   uniquePtr 0x7f6f1e2c4b88 
checking against 'isEdge' vartype int   uniquePtr 0x7f6f1e2c4cb0 
checking against 'isCorner' vartype int   uniquePtr 0x7f6f1e2c4dd8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c4f00 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c5028 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5150 
checking against 'box' vartype int   uniquePtr 0x7f6f1e2c53a0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c54c8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c55f0 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c5718 
checking against 'pencil' vartype int   uniquePtr 0x7f6f1e2c5840 
checking against 'plane' vartype int   uniquePtr 0x7f6f1e2c5968 
checking against 'ptr' vartype double   uniquePtr 0x7f6f1e2c5a90 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2c5e08 
checking against 'local_index' vartype int   uniquePtr 0x7f6f1e2c5f30 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c6058 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6180 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c62a8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c64f8 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c6620 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c6748 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2c6998 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2c6ac0 
checking against 'neighbors' vartype neighbor_type   uniquePtr (nil) 
checking against 'levels' vartype box_type   uniquePtr (nil) 
checking against 'smooth' vartype unsigned   uniquePtr 0x7f6f1e2c6e38 
checking against 'apply_op' vartype unsigned   uniquePtr 0x7f6f1e2c6f60 
checking against 'residual' vartype unsigned   uniquePtr 0x7f6f1e2c7088 
checking against 'restriction' vartype unsigned   uniquePtr 0x7f6f1e2c71b0 
checking against 'interpolation' vartype unsigned   uniquePtr 0x7f6f1e2c72d8 
checking against 'communication' vartype unsigned   uniquePtr 0x7f6f1e2c7400 
checking against 'pack' vartype unsigned   uniquePtr 0x7f6f1e2c7528 
checking against 'grid2grid' vartype unsigned   uniquePtr 0x7f6f1e2c7650 
checking against 'unpack' vartype unsigned   uniquePtr 0x7f6f1e2c7778 
checking against 'recv' vartype unsigned   uniquePtr 0x7f6f1e2c78a0 
checking against 'send' vartype unsigned   uniquePtr 0x7f6f1e2c79c8 
checking against 'wait' vartype unsigned   uniquePtr 0x7f6f1e2c7af0 
checking against 'blas1' vartype unsigned   uniquePtr 0x7f6f1e2c7c18 
checking against 'blas3' vartype unsigned   uniquePtr 0x7f6f1e2c7d40 
checking against 'collectives' vartype unsigned   uniquePtr 0x7f6f1e2c7e68 
checking against 'Total' vartype unsigned   uniquePtr 0x7f6f1e2c7f90 
checking against 'build' vartype unsigned   uniquePtr 0x7f6f1e2c80b8 
checking against 'vcycles' vartype unsigned   uniquePtr 0x7f6f1e2c81e0 
checking against 'MGSolve' vartype unsigned   uniquePtr 0x7f6f1e2c8308 
checking against 'vcycles_performed' vartype int   uniquePtr 0x7f6f1e2c8558 
checking against 'Krylov_iterations' vartype int   uniquePtr 0x7f6f1e2c8680 
checking against 'CAKrylov_formations_of_G' vartype int   uniquePtr 0x7f6f1e2c87a8 
checking against 'rank_of_neighbor' vartype int   uniquePtr 0x7f6f1e2c88d0 
checking against 'bufferCopies' vartype bufferCopy_type   uniquePtr (nil) 
checking against 'bufferCopy_Pack_Start' vartype int   uniquePtr 0x7f6f1e2c8b20 
checking against 'bufferCopy_Pack_End' vartype int   uniquePtr 0x7f6f1e2c8c48 
checking against 'bufferCopy_Local_Start' vartype int   uniquePtr 0x7f6f1e2c8d70 
checking against 'bufferCopy_Local_End' vartype int   uniquePtr 0x7f6f1e2c8e98 
checking against 'bufferCopy_Unpack_Start' vartype int   uniquePtr 0x7f6f1e2c8fc0 
checking against 'bufferCopy_Unpack_End' vartype int   uniquePtr 0x7f6f1e2c90e8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9210 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9338 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9460 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c96b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c97d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9900 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9b50 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c9c78 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c9da0 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c9ff0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca118 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca240 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2ca490 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2ca5b8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2ca6e0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ca930 
checking against 'subdomains_per_rank' vartype int   uniquePtr 0x7f6f1e2caa58 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cab80 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2caca8 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cadd0 
checking against 'h' vartype double   uniquePtr 0x7f6f1e2caef8 
checking against 'dominant_eigenvalue_of_DinvA' vartype double   uniquePtr 0x7f6f1e2cb020 
checking against 'subdomains' vartype subdomain_type   uniquePtr (nil) 
checking against 'vector_ghosts' vartype int   uniquePtr 0x7f6f1e2cb270 
checking against 'box' vartype subdomain_type   uniquePtr (nil) 
checking against 'subdomain_low_i' vartype int   uniquePtr 0x7f6f1e2cb4c0 
checking against 'subdomain_low_j' vartype int   uniquePtr 0x7f6f1e2cb5e8 
checking against 'subdomain_low_k' vartype int   uniquePtr 0x7f6f1e2cb710 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cb838 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cb960 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cba88 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2cbbb0 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cbcd8 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cbe00 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cbf28 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'subdomain_dim_i' vartype int   uniquePtr 0x7f6f1e2cc2a0 
checking against 'subdomain_dim_j' vartype int   uniquePtr 0x7f6f1e2cc3c8 
checking against 'subdomain_dim_k' vartype int   uniquePtr 0x7f6f1e2cc4f0 
checking against 'subdomains_per_rank_in_i' vartype int   uniquePtr 0x7f6f1e2cc618 
checking against 'subdomains_per_rank_in_j' vartype int   uniquePtr 0x7f6f1e2cc740 
checking against 'subdomains_per_rank_in_k' vartype int   uniquePtr 0x7f6f1e2cc868 
checking against 'ranks_in_i' vartype int   uniquePtr 0x7f6f1e2cc990 
checking against 'ranks_in_j' vartype int   uniquePtr 0x7f6f1e2ccab8 
checking against 'ranks_in_k' vartype int   uniquePtr 0x7f6f1e2ccbe0 
checking against 'rank' vartype int   uniquePtr 0x7f6f1e2ccd08 
checking against 'boundary_conditions' vartype int   uniquePtr 0x7f6f1e2cce30 
checking against 'numGrids' vartype int   uniquePtr 0x7f6f1e2ccf58 
checking against 'ghosts' vartype int   uniquePtr 0x7f6f1e2cd080 
checking against 'numLevels' vartype int   uniquePtr 0x7f6f1e2cd1a8 
checking against 'vec_ghosts' vartype int   uniquePtr 0x7f6f1e2cd2d0 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cd520 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cd648 
checking against 'h0' vartype double   uniquePtr 0x7f6f1e2cd770 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2cd9c0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2cdae8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2cdc10 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2cdd38 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2cde60 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'u_id' vartype int   uniquePtr 0x7f6f1e2ce0b0 
checking against 'F_id' vartype int   uniquePtr 0x7f6f1e2ce1d8 
checking against 'a' vartype double   uniquePtr 0x7f6f1e2ce300 
checking against 'b' vartype double   uniquePtr 0x7f6f1e2ce428 
checking against 'desired_mg_norm' vartype double   uniquePtr 0x7f6f1e2ce550 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'domain' vartype domain_type   uniquePtr (nil) 
checking against 'level' vartype int   uniquePtr 0x7f6f1e2ce8c8 
checking against 'box_id' vartype int   uniquePtr 0x7f6f1e2ce9f0 
checking against 'phi_id' vartype int   uniquePtr 0x7f6f1e2ceb18 
checking against 'rhs_id' vartype int   uniquePtr 0x7f6f1e2cec40 
checking against 'x' vartype double   uniquePtr 0x7f6f1e2ced68 
checking against 'y' vartype double   uniquePtr 0x7f6f1e2cee90 
checking against 'sweep' vartype int   uniquePtr 0x7f6f1e2cefb8 
checking against 'i' vartype int   uniquePtr 0x7f6f1e2cf0e0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2cf208 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2cf330 
checking against 't' vartype int   uniquePtr 0x7f6f1e2cf458 
checking against 'ALPHA' vartype double   uniquePtr 0x7f6f1e2cf580 
checking against 'BETA' vartype double   uniquePtr 0x7f6f1e2cf6a8 
checking against 'GAMMA' vartype double   uniquePtr 0x7f6f1e2cf7d0 
checking against 'DELTA' vartype double   uniquePtr 0x7f6f1e2cf8f8 
checking against 's' vartype int   uniquePtr 0x7f6f1e2cfa20 
checking against 'h2inv' vartype double   uniquePtr 0x7f6f1e2cfb48 
checking against 'TwoThirds' vartype double   uniquePtr 0x7f6f1e2cfc70 
checking against '_in' vartype double   uniquePtr 0x7f6f1e2cfd98 
checking against '_out' vartype double   uniquePtr 0x7f6f1e2cfec0 
checking against '_rhs' vartype double   uniquePtr 0x7f6f1e2cffe8 
found it!

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
k
varname k
checking 175 variable declarations
varname k   vartype int   def 0x7f6f1e2cf330
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
checking against 'k' vartype int   uniquePtr 0x7f6f1e2c2a00 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_rhs'
ConvertRoseArrayRefExp, index 'k'
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [66][66][66]' Var  '_rhs' )

ConvertRoseArrayRefExp() result is _rhs[k]
(ArraySubscriptExpr (_rhs) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_rhs' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
j
varname j
checking 175 variable declarations
varname j   vartype int   def 0x7f6f1e2cf208
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
checking against 'j' vartype int   uniquePtr 0x7f6f1e2c28d8 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_rhs[k]'
ConvertRoseArrayRefExp, index 'j'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_rhs) 'double' rvalue
  (DeclRefExpr 'double [66][66][66]' Var  '_rhs' )
  (DeclRefExpr 'int' Var  'k' )
)

ConvertRoseArrayRefExp() result is _rhs[k][j]
(ArraySubscriptExpr (_rhs) 'double' rvalue
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_rhs' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertXXXXXVarRefExpr()
i
varname i
checking 175 variable declarations
varname i   vartype int   def 0x7f6f1e2cf0e0
checking against 'i' vartype int   uniquePtr 0x7f6f1e2c27b0 
here's something of the same name!
and the same type!

ConvertRoseArrayRefExp, base  '_rhs[k][j]'
ConvertRoseArrayRefExp, index 'i'
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_rhs) 'double' rvalue
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (DeclRefExpr 'double [66][66][66]' Var  '_rhs' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)

ConvertRoseArrayRefExp() result is _rhs[k][j][i]
(ArraySubscriptExpr (_rhs) 'double' rvalue
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (DeclRefExpr 'double [66][66][66]' Var  '_rhs' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)



436   0x7f6f26c9a010   symbol_table    node SgSymbolTable
unhandled top node 436/442 of type SgSymbolTable


437   0x1a5e130   type_table    node SgTypeTable
unhandled top node 437/442 of type SgTypeTable
topnode 438 of 442, first == NULL??  blurb numeric_label


439   0x1a4c828   startOfConstruct    node Sg_File_Info
unhandled top node 439/442 of type Sg_File_Info


440   0x1a4c8b8   endOfConstruct    node Sg_File_Info
unhandled top node 440/442 of type Sg_File_Info


441   0x7f6f26d03010   parent    node SgSourceFile
unhandled top node 441/442 of type SgSourceFile
ConvertRoseFile(), returning topnode
found the procedure named smooth_box_1_64
local Function Definition 0x2107f60

void smooth_box_1_64( domain_type *domain, int level, int box_id, int phi_id, int rhs_id, double x, double y, int sweep )
{
  int i;
  int j;
  int k;
  int t;
  double ALPHA;
  double BETA;
  double GAMMA;
  double DELTA;
  int s;
  s = sweep;
  double h2inv;
  double TwoThirds;
  double _in[66][66][66];
  double _out[66][66][66];
  double _rhs[66][66][66];
  double _lambda[66][66][66];
  i = (j = (k = 0));
  for (t = 0; t < 1; t++) 
    if (((t + s) % 2) == 0) {
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
        }
      }

    }
    else {
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
        }
      }

    }
}


printing whole file


TypedefDecl
FunctionDecl
FunctionDecl
TypedefDecl
TypedefDecl
TypedefDecl
TypedefDecl
FunctionDecl
FunctionDecl
FunctionDecl
FunctionDecl
FunctionDecl
FunctionDecl
FunctionDecl
FunctionDecl

// this source derived from CHILL AST originally from file 'jacobi_box_1_64.c' as parsed by frontend compiler rose

#define __rose_lt(x,y) ((x)<(y)?(x):(y))
#define __rose_gt(x,y) ((x)>(y)?(x):(y))
typedef struct {
  struct { int i; int j; int k; } low;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } dim_with_ghosts;
  int ghosts;
  int pencil;
  int plane;
  int volume;
  int bufsizes[27];
  double * __restrict__ surface_bufs[27];
  double * __restrict__ ghost_bufs[27];
  int numGrids;
  double ** __restrict__ grids;
} 
box_type;

void destroy_box( box_type *box ); // fwd decl

int create_box( box_type *box, int numGrids, int low_i, int low_j, int low_k, int dim_i, int dim_j, int dim_k, int ghosts ); // fwd decl
typedef struct {
  int isFace;
  int isEdge;
  int isCorner;
  struct { int i; int j; int k; } dim;
  struct { int box; int i; int j; int k; int pencil; int plane; double * __restrict__ ptr; } read;
  struct { int box; int i; int j; int k; int pencil; int plane; double * __restrict__ ptr; } write;
} 
bufferCopy_type;
typedef struct {
  int rank;
  int local_index;
} 
neighbor_type;
typedef struct {
  struct { int i; int j; int k; } low;
  struct { int i; int j; int k; } dim;
  int numLevels;
  int ghosts;
  neighbor_type neighbors[27];
  box_type *levels;
} 
subdomain_type;
typedef struct {
  struct { unsigned smooth[10]; unsigned apply_op[10]; unsigned residual[10]; unsigned restriction[10]; unsigned interpolation[10]; unsigned communication[10]; unsigned pack[10]; unsigned grid2grid[10]; unsigned unpack[10]; unsigned recv[10]; unsigned send[10]; unsigned wait[10]; unsigned blas1[10]; unsigned blas3[10]; unsigned collectives[10]; unsigned Total[10]; unsigned build; unsigned vcycles; unsigned MGSolve; } cycles;
  int vcycles_performed;
  int Krylov_iterations;
  int CAKrylov_formations_of_G;
  int rank_of_neighbor[27];
  bufferCopy_type *bufferCopies[10];
  int bufferCopy_Pack_Start;
  int bufferCopy_Pack_End;
  int bufferCopy_Local_Start;
  int bufferCopy_Local_End;
  int bufferCopy_Unpack_Start;
  int bufferCopy_Unpack_End;
  struct { int i; int j; int k; } dim;
  struct { int i; int j; int k; } ranks_in;
  struct { int i; int j; int k; } subdomains_per_rank_in;
  struct { int i; int j; int k; } subdomains_in;
  struct { int i; int j; int k; } boundary_condition;
  int rank;
  int subdomains_per_rank;
  int numLevels;
  int numGrids;
  int ghosts;
  double h[10];
  double dominant_eigenvalue_of_DinvA[10];
  subdomain_type *subdomains;
  int *vector_ghosts;
} 
domain_type;

int create_subdomain( subdomain_type *box, int subdomain_low_i, int subdomain_low_j, int subdomain_low_k, int subdomain_dim_i, int subdomain_dim_j, int subdomain_dim_k, int numGrids, int ghosts, int numLevels, int *vec_ghosts ); // fwd decl

void destroy_domain( domain_type *domain ); // fwd decl

int create_domain( domain_type *domain, int subdomain_dim_i, int subdomain_dim_j, int subdomain_dim_k, int subdomains_per_rank_in_i, int subdomains_per_rank_in_j, int subdomains_per_rank_in_k, int ranks_in_i, int ranks_in_j, int ranks_in_k, int rank, int *boundary_conditions, int numGrids, int ghosts, int numLevels, int *vec_ghosts ); // fwd decl

void MGBuild( domain_type *domain, double a, double b, double h0 ); // fwd decl

void MGSolve( domain_type *domain, int u_id, int F_id, double a, double b, double desired_mg_norm ); // fwd decl

void FMGSolve( domain_type *domain, int u_id, int F_id, double a, double b, double desired_mg_norm ); // fwd decl

void print_timing( domain_type *domain ); // fwd decl

void smooth_box_1_64( domain_type *domain, int level, int box_id, int phi_id, int rhs_id, double x, double y, int sweep )
{
  int i;
  int j;
  int k;
  int t;
  double ALPHA;
  double BETA;
  double GAMMA;
  double DELTA;
  int s;
  s = sweep;
  double h2inv;
  double TwoThirds;
  double _in[66][66][66];
  double _out[66][66][66];
  double _rhs[66][66][66];
  double _lambda[66][66][66];
  i = (j = (k = 0));
  for (t = 0; t < 1; t++) 
    if (((t + s) % 2) == 0) {
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
        }
      }

    }
    else {
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
        }
      }

    }
}

//CHILL AST originally from file 'jacobi_box_1_64.c'
(TypedefDecl  box_type (null))

(FunctionDecl void destroy_box(box_type *box)
)

(FunctionDecl int create_box(box_type *box, int numGrids, int low_i, int low_j, int low_k, int dim_i, int dim_j, int dim_k, int ghosts)
)
(TypedefDecl  bufferCopy_type (null))
(TypedefDecl  neighbor_type (null))
(TypedefDecl  subdomain_type (null))
(TypedefDecl  domain_type (null))

(FunctionDecl int create_subdomain(subdomain_type *box, int subdomain_low_i, int subdomain_low_j, int subdomain_low_k, int subdomain_dim_i, int subdomain_dim_j, int subdomain_dim_k, int numGrids, int ghosts, int numLevels, int *vec_ghosts)
)

(FunctionDecl void destroy_domain(domain_type *domain)
)

(FunctionDecl int create_domain(domain_type *domain, int subdomain_dim_i, int subdomain_dim_j, int subdomain_dim_k, int subdomains_per_rank_in_i, int subdomains_per_rank_in_j, int subdomains_per_rank_in_k, int ranks_in_i, int ranks_in_j, int ranks_in_k, int rank, int *boundary_conditions, int numGrids, int ghosts, int numLevels, int *vec_ghosts)
)

(FunctionDecl void MGBuild(domain_type *domain, double a, double b, double h0)
)

(FunctionDecl void MGSolve(domain_type *domain, int u_id, int F_id, double a, double b, double desired_mg_norm)
)

(FunctionDecl void FMGSolve(domain_type *domain, int u_id, int F_id, double a, double b, double desired_mg_norm)
)

(FunctionDecl void print_timing(domain_type *domain)
)

(FunctionDecl void smooth_box_1_64(domain_type *domain, int level, int box_id, int phi_id, int rhs_id, double x, double y, int sweep)
  (CompoundStmt 
    (VarDecl "'int' 'i' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'int' 'j' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'int' 'k' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'int' 't' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'double' 'ALPHA' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'double' 'BETA' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'double' 'GAMMA' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'double' 'DELTA' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'int' 's' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (BinaryOperator '='
      (DeclRefExpr 'int' Var  's' )
      (DeclRefExpr 'int' ParmVar  'sweep' )
    )
    (VarDecl "'double' 'h2inv' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'double' 'TwoThirds' ''"  n_dim 0  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'double' '_in' '[66][66][66]'"  n_dim 3  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'double' '_out' '[66][66][66]'"  n_dim 3  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'double' '_rhs' '[66][66][66]'"  n_dim 3  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (VarDecl "'double' '_lambda' '[66][66][66]'"  n_dim 3  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER
    (BinaryOperator '='
      (DeclRefExpr 'int' Var  'i' )
      (BinaryOperator '='
        (DeclRefExpr 'int' Var  'j' )
        (BinaryOperator '='
          (DeclRefExpr 'int' Var  'k' )
          (IntegerLiteral 'int' 0)
        )
      )
    )
    (ForStmt 
      (BinaryOperator '='
        (DeclRefExpr 'int' Var  't' )
        (IntegerLiteral 'int' 0)
      )
      (BinaryOperator '<'
        (DeclRefExpr 'int' Var  't' )
        (IntegerLiteral 'int' 1)
      )
      (UnaryOperator postfix ++
        (DeclRefExpr 'int' Var  't' )
      )
      (CompoundStmt 
        (if 
((          t + s) % 2) == 0
          for (k = 0; k < (64 + 1 - 1); k++) {
            for (j = 0; j < (64 + 1 - 1); j++) {
              for (i = 0; i < (64 + 1 - 1); i++) 
                _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
            }
          }
          for (k = 0; k < (64 + 1 - 1); k++) {
            for (j = 0; j < (64 + 1 - 1); j++) {
              for (i = 0; i < (64 + 1 - 1); i++) 
                _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
            }
          }
          for (k = 0; k < (64 + 1 - 1); k++) {
            for (j = 0; j < (64 + 1 - 1); j++) {
              for (i = 0; i < (64 + 1 - 1); i++) 
                _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
            }
          }

          for (k = 0; k < (64 + 1 - 1); k++) {
            for (j = 0; j < (64 + 1 - 1); j++) {
              for (i = 0; i < (64 + 1 - 1); i++) 
                _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
            }
          }
          for (k = 0; k < (64 + 1 - 1); k++) {
            for (j = 0; j < (64 + 1 - 1); j++) {
              for (i = 0; i < (64 + 1 - 1); i++) 
                _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
            }
          }
          for (k = 0; k < (64 + 1 - 1); k++) {
            for (j = 0; j < (64 + 1 - 1); j++) {
              for (i = 0; i < (64 + 1 - 1); i++) 
                _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
            }
          }

        )
      )
    )
  )
)
need to create symbol tables?

ir_rose.cc, calling new CG_chillBuilder()

CG_chillBuilder::CG_chillBuilder()

function is:

void smooth_box_1_64( domain_type *domain, int level, int box_id, int phi_id, int rhs_id, double x, double y, int sweep )
{
  int i;
  int j;
  int k;
  int t;
  double ALPHA;
  double BETA;
  double GAMMA;
  double DELTA;
  int s;
  s = sweep;
  double h2inv;
  double TwoThirds;
  double _in[66][66][66];
  double _out[66][66][66];
  double _rhs[66][66][66];
  double _lambda[66][66][66];
  i = (j = (k = 0));
  for (t = 0; t < 1; t++) 
    if (((t + s) % 2) == 0) {
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
        }
      }

    }
    else {
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
        }
      }

    }
}



symtab_:
0  domain_type *domain
1  int level
2  int box_id
3  int phi_id
4  int rhs_id
5  double x
6  double y
7  int sweep



symtab2_:
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

LOOP RETURN ir_code = new IR_roseCode(source_filename, procedure_name);
parser.yy L504  yyparse  block = ir_code->GetCode();
IR_roseCode::GetCode()
chillfunc 0x2107f60
chillast body of func is 0x21094e0
making a new IR_roseBlock 0x2109440 with chillAST 0x2107f60
it is:

void smooth_box_1_64( domain_type *domain, int level, int box_id, int phi_id, int rhs_id, double x, double y, int sweep )
{
  int i;
  int j;
  int k;
  int t;
  double ALPHA;
  double BETA;
  double GAMMA;
  double DELTA;
  int s;
  s = sweep;
  double h2inv;
  double TwoThirds;
  double _in[66][66][66];
  double _out[66][66][66];
  double _rhs[66][66][66];
  double _lambda[66][66][66];
  i = (j = (k = 0));
  for (t = 0; t < 1; t++) 
    if (((t + s) % 2) == 0) {
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
        }
      }

    }
    else {
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
        }
      }

    }
}

block 0x2109440 still has chillAST 0x2107f60
parser.yy L506 irblock from getcode is 0x2109440

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x2107f60
basic block 0x2107f60 0x2107f60 is:
block ast of type FunctionDecl

void smooth_box_1_64( domain_type *domain, int level, int box_id, int phi_id, int rhs_id, double x, double y, int sweep )
{
  int i;
  int j;
  int k;
  int t;
  double ALPHA;
  double BETA;
  double GAMMA;
  double DELTA;
  int s;
  s = sweep;
  double h2inv;
  double TwoThirds;
  double _in[66][66][66];
  double _out[66][66][66];
  double _rhs[66][66][66];
  double _lambda[66][66][66];
  i = (j = (k = 0));
  for (t = 0; t < 1; t++) 
    if (((t + s) % 2) == 0) {
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
        }
      }

    }
    else {
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
        }
      }
      for (k = 0; k < (64 + 1 - 1); k++) {
        for (j = 0; j < (64 + 1 - 1); j++) {
          for (i = 0; i < (64 + 1 - 1); i++) 
            _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
        }
      }

    }
}


blockast is a Functiondecl
IR_block has 18 statements
i 0/18  0x21096e0
child 0/18 is of type VarDecl
starting a run at 0
i 1/18  0x2109a20
child 1/18 is of type VarDecl
i 2/18  0x2109d80
child 2/18 is of type VarDecl
i 3/18  0x210a0c0
child 3/18 is of type VarDecl
i 4/18  0x210a3c0
child 4/18 is of type VarDecl
i 5/18  0x210a7b0
child 5/18 is of type VarDecl
i 6/18  0x210aaf0
child 6/18 is of type VarDecl
i 7/18  0x210ada0
child 7/18 is of type VarDecl
i 8/18  0x210b190
child 8/18 is of type VarDecl
i 9/18  0x210b550
child 9/18 is of type BinaryOperator
i 10/18  0x210b850
child 10/18 is of type VarDecl
i 11/18  0x210bc70
child 11/18 is of type VarDecl
i 12/18  0x210c050
child 12/18 is of type VarDecl
i 13/18  0x210c4c0
child 13/18 is of type VarDecl
i 14/18  0x210c870
child 14/18 is of type VarDecl
i 15/18  0x210cc20
child 15/18 is of type VarDecl
i 16/18  0x210cd10
child 16/18 is of type BinaryOperator
i 17/18  0x213b040
child 17/18 is of type ForStmt
loop
there was a run of statements before the Loop
making a new IR_roseBlock with NO chillAST (nil)
rb 0x20d6b20   startofrun 0   i 17
j 533469824   int i
j 27438280   int j
j 27438320   int k
j 34446784   int t
j 34446784   double ALPHA
j 34623296   double BETA
j 34623280   double GAMMA
j 34623288   double DELTA
j 34623296   int s
j 34434272   s = sweep
j 34434224   double h2inv
j 34434232   double TwoThirds
j 34434240   double _in[66][66][66]
j 34434248   double _out[66][66][66]
j 34434256   double _rhs[66][66][66]
j 34434264   double _lambda[66][66][66]
j 34434272   i = (j = (k = 0))
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (t = 0; t < 1; t++) 
  if (((t + s) % 2) == 0) {
    for (k = 0; k < (64 + 1 - 1); k++) {
      for (j = 0; j < (64 + 1 - 1); j++) {
        for (i = 0; i < (64 + 1 - 1); i++) 
          _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
      }
    }
    for (k = 0; k < (64 + 1 - 1); k++) {
      for (j = 0; j < (64 + 1 - 1); j++) {
        for (i = 0; i < (64 + 1 - 1); i++) 
          _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
      }
    }
    for (k = 0; k < (64 + 1 - 1); k++) {
      for (j = 0; j < (64 + 1 - 1); j++) {
        for (i = 0; i < (64 + 1 - 1); i++) 
          _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
      }
    }

  }
  else {
    for (k = 0; k < (64 + 1 - 1); k++) {
      for (j = 0; j < (64 + 1 - 1); j++) {
        for (i = 0; i < (64 + 1 - 1); i++) 
          _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
      }
    }
    for (k = 0; k < (64 + 1 - 1); k++) {
      for (j = 0; j < (64 + 1 - 1); j++) {
        for (i = 0; i < (64 + 1 - 1); i++) 
          _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
      }
    }
    for (k = 0; k < (64 + 1 - 1); k++) {
      for (j = 0; j < (64 + 1 - 1); j++) {
        for (i = 0; i < (64 + 1 - 1); i++) 
          _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
      }
    }

  }
IR_roseLoop::IR_roseLoop()    chillbody
body is:
if (((t + s) % 2) == 0) {
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
    }
  }

}
else {
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
    }
  }

}

chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d6c60

IR_roseCode::FindOneLevelControlStructure() returning 2 controls
(parser.yy) I found 1 loops in the procedure

parse.yy  L 505 making a new myloop loop num start 0

***                                                   ROSE (parser.yy) making a new myloop

Loop::Loop(const IR_Control *control)
control type is 0   IR_CONTROL_LOOP
in Loop::Loop, calling  build_ir_tree()
IR_roseLoop::clone()
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (t = 0; t < 1; t++) 
  if (((t + s) % 2) == 0) {
    for (k = 0; k < (64 + 1 - 1); k++) {
      for (j = 0; j < (64 + 1 - 1); j++) {
        for (i = 0; i < (64 + 1 - 1); i++) 
          _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
      }
    }
    for (k = 0; k < (64 + 1 - 1); k++) {
      for (j = 0; j < (64 + 1 - 1); j++) {
        for (i = 0; i < (64 + 1 - 1); i++) 
          _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
      }
    }
    for (k = 0; k < (64 + 1 - 1); k++) {
      for (j = 0; j < (64 + 1 - 1); j++) {
        for (i = 0; i < (64 + 1 - 1); i++) 
          _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
      }
    }

  }
  else {
    for (k = 0; k < (64 + 1 - 1); k++) {
      for (j = 0; j < (64 + 1 - 1); j++) {
        for (i = 0; i < (64 + 1 - 1); i++) 
          _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
      }
    }
    for (k = 0; k < (64 + 1 - 1); k++) {
      for (j = 0; j < (64 + 1 - 1); j++) {
        for (i = 0; i < (64 + 1 - 1); i++) 
          _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
      }
    }
    for (k = 0; k < (64 + 1 - 1); k++) {
      for (j = 0; j < (64 + 1 - 1); j++) {
        for (i = 0; i < (64 + 1 - 1); i++) 
          _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
      }
    }

  }
IR_roseLoop::IR_roseLoop()    chillbody
body is:
if (((t + s) % 2) == 0) {
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
    }
  }

}
else {
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
    }
  }

}

chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
case IR_CONTROL_LOOP
recursing. build_ir_tree() of CONTROL_LOOP creating children  L122
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x210d710
it is:
if (((t + s) % 2) == 0) {
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
    }
  }

}
else {
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
    }
  }

}
block 0x2109440 still has chillAST 0x210d710
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x210d710
basic block 0x210d710 0x210d710 is:
block ast of type CompoundStmt
if (((t + s) % 2) == 0) {
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
    }
  }

}
else {
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
    }
  }
  for (k = 0; k < (64 + 1 - 1); k++) {
    for (j = 0; j < (64 + 1 - 1); j++) {
      for (i = 0; i < (64 + 1 - 1); i++) 
        _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
    }
  }

}

found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x213afe0
child 0/1 is of type IfStmt
if
there was no run of statements before the IF
adding the IF to controls
IR_roseIf( const IR_Code *irc, chillAST_node *anif)  0x20d5ee0
roseIf 0x20d5ee0

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_IF
making a new IR_roseBlock 0x2109440 with chillAST 0x210dcf0
it is:
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
  }
}
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
  }
}
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
  }
}

block 0x2109440 still has chillAST 0x210dcf0
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x210dcf0
basic block 0x210dcf0 0x210dcf0 is:
block ast of type CompoundStmt
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
  }
}
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
  }
}
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
  }
}


found a top level Basic Block Compound Statement
IR_block has 3 statements
i 0/3  0x211d9e0
child 0/3 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
  }
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
}


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7160
i 1/3  0x2120b00
child 1/3 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
  }
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
}


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d71c0
i 2/3  0x2124550
child 2/3 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
  }
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
}


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7220

IR_roseCode::FindOneLevelControlStructure() returning 3 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  3 controls
controls.size() == 3  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x210e3c0
it is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
}

block 0x2109440 still has chillAST 0x210e3c0
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x210e3c0
basic block 0x210e3c0 0x210e3c0 is:
block ast of type CompoundStmt
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
}


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x211d970
child 0/1 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7280

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x210eb70
it is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));

block 0x2109440 still has chillAST 0x210eb70
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x210eb70
basic block 0x210eb70 0x210eb70 is:
block ast of type CompoundStmt
for (i = 0; i < (64 + 1 - 1); i++) 
  _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x211d900
child 0/1 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));

IR_roseLoop::IR_roseLoop()    chillbody
body is:
_out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d72e0

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x210f320
it is:
_out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));

block 0x2109440 still has chillAST 0x210f320
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x210f320
basic block 0x210f320 0x210f320 is:
block ast of type CompoundStmt
_out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]));


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x210cb00
child 0/1 is of type BinaryOperator
starting a run at 0
adding final run of 1 statements starting with 0
making a new IR_roseBlock with NO chillAST (nil)

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x20d7340)
0 statements    ast 0x210cb00
basic block 0x210cb00 0x210cb00 is:
block ast of type BinaryOperator
_out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))

irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
controls[1] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x211df40
it is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
}

block 0x2109440 still has chillAST 0x211df40
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x211df40
basic block 0x211df40 0x211df40 is:
block ast of type CompoundStmt
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
}


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x2120a90
child 0/1 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7430

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x211e720
it is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));

block 0x2109440 still has chillAST 0x211e720
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x211e720
basic block 0x211e720 0x211e720 is:
block ast of type CompoundStmt
for (i = 0; i < (64 + 1 - 1); i++) 
  _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x2120a20
child 0/1 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));

IR_roseLoop::IR_roseLoop()    chillbody
body is:
_out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d74d0

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x211ef00
it is:
_out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));

block 0x2109440 still has chillAST 0x211ef00
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x211ef00
basic block 0x211ef00 0x211ef00 is:
block ast of type CompoundStmt
_out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]));


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x211ee90
child 0/1 is of type BinaryOperator
starting a run at 0
adding final run of 1 statements starting with 0
making a new IR_roseBlock with NO chillAST (nil)

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x20d7570)
0 statements    ast 0x211ee90
basic block 0x211ee90 0x211ee90 is:
block ast of type BinaryOperator
_out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))

irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
controls[2] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x2121010
it is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
}

block 0x2109440 still has chillAST 0x2121010
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x2121010
basic block 0x2121010 0x2121010 is:
block ast of type CompoundStmt
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
}


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x21244e0
child 0/1 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7660

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x21217f0
it is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));

block 0x2109440 still has chillAST 0x21217f0
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x21217f0
basic block 0x21217f0 0x21217f0 is:
block ast of type CompoundStmt
for (i = 0; i < (64 + 1 - 1); i++) 
  _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x2124470
child 0/1 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));

IR_roseLoop::IR_roseLoop()    chillbody
body is:
_out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7720

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x2121fd0
it is:
_out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));

block 0x2109440 still has chillAST 0x2121fd0
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x2121fd0
basic block 0x2121fd0 0x2121fd0 is:
block ast of type CompoundStmt
_out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])));


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x2121f60
child 0/1 is of type BinaryOperator
starting a run at 0
adding final run of 1 statements starting with 0
making a new IR_roseBlock with NO chillAST (nil)

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x20d77e0)
0 statements    ast 0x2121f60
basic block 0x2121f60 0x2121f60 is:
block ast of type BinaryOperator
_out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))

irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 3 parts
making a new IR_roseBlock 0x2109440 with chillAST 0x2123ee0
it is:
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
  }
}
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
  }
}
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
  }
}

block 0x2109440 still has chillAST 0x2123ee0
IF_CONTROL has an else
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x2123ee0
basic block 0x2123ee0 0x2123ee0 is:
block ast of type CompoundStmt
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
  }
}
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
  }
}
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
  }
}


found a top level Basic Block Compound Statement
IR_block has 3 statements
i 0/3  0x2134820
child 0/3 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
  }
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
}


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7950
i 1/3  0x2137830
child 1/3 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
  }
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
}


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d79b0
i 2/3  0x213af30
child 2/3 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (k = 0; k < (64 + 1 - 1); k++) {
  for (j = 0; j < (64 + 1 - 1); j++) {
    for (i = 0; i < (64 + 1 - 1); i++) 
      _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
  }
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
}


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7a30

IR_roseCode::FindOneLevelControlStructure() returning 3 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  3 controls
controls.size() == 3  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x2124d00
it is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
}

block 0x2109440 still has chillAST 0x2124d00
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x2124d00
basic block 0x2124d00 0x2124d00 is:
block ast of type CompoundStmt
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
}


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x21347b0
child 0/1 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7ad0

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x2125290
it is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));

block 0x2109440 still has chillAST 0x2125290
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x2125290
basic block 0x2125290 0x2125290 is:
block ast of type CompoundStmt
for (i = 0; i < (64 + 1 - 1); i++) 
  _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x2134740
child 0/1 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));

IR_roseLoop::IR_roseLoop()    chillbody
body is:
_in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7b70

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x2125a70
it is:
_in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));

block 0x2109440 still has chillAST 0x2125a70
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x2125a70
basic block 0x2125a70 0x2125a70 is:
block ast of type CompoundStmt
_in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]));


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x2125a00
child 0/1 is of type BinaryOperator
starting a run at 0
adding final run of 1 statements starting with 0
making a new IR_roseBlock with NO chillAST (nil)

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x20d7c30)
0 statements    ast 0x2125a00
basic block 0x2125a00 0x2125a00 is:
block ast of type BinaryOperator
_in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))

irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
controls[1] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x2134eb0
it is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
}

block 0x2109440 still has chillAST 0x2134eb0
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x2134eb0
basic block 0x2134eb0 0x2134eb0 is:
block ast of type CompoundStmt
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
}


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x21377c0
child 0/1 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7d60

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x2135660
it is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));

block 0x2109440 still has chillAST 0x2135660
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x2135660
basic block 0x2135660 0x2135660 is:
block ast of type CompoundStmt
for (i = 0; i < (64 + 1 - 1); i++) 
  _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x2137750
child 0/1 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));

IR_roseLoop::IR_roseLoop()    chillbody
body is:
_in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7e20

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x2135e10
it is:
_in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));

block 0x2109440 still has chillAST 0x2135e10
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x2135e10
basic block 0x2135e10 0x2135e10 is:
block ast of type CompoundStmt
_in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]));


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x2136060
child 0/1 is of type BinaryOperator
starting a run at 0
adding final run of 1 statements starting with 0
making a new IR_roseBlock with NO chillAST (nil)

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x20d7ee0)
0 statements    ast 0x2136060
basic block 0x2136060 0x2136060 is:
block ast of type BinaryOperator
_in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))

irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
controls[2] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x2137e30
it is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
}

block 0x2109440 still has chillAST 0x2137e30
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x2137e30
basic block 0x2137e30 0x2137e30 is:
block ast of type CompoundStmt
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
}


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x213aec0
child 0/1 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (j = 0; j < (64 + 1 - 1); j++) {
  for (i = 0; i < (64 + 1 - 1); i++) 
    _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d7ff0

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x21385e0
it is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));

block 0x2109440 still has chillAST 0x21385e0
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x21385e0
basic block 0x21385e0 0x21385e0 is:
block ast of type CompoundStmt
for (i = 0; i < (64 + 1 - 1); i++) 
  _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x213ae50
child 0/1 is of type ForStmt
loop
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (i = 0; i < (64 + 1 - 1); i++) 
  _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));

IR_roseLoop::IR_roseLoop()    chillbody
body is:
_in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
roseLoop 0x20d80b0

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock 0x2109440 with chillAST 0x2138d90
it is:
_in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));

block 0x2109440 still has chillAST 0x2138d90
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x2109440)
0 statements    ast 0x2138d90
basic block 0x2138d90 0x2138d90 is:
block ast of type CompoundStmt
_in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])));


found a top level Basic Block Compound Statement
IR_block has 1 statements
i 0/1  0x2139270
child 0/1 is of type BinaryOperator
starting a run at 0
adding final run of 1 statements starting with 0
making a new IR_roseBlock with NO chillAST (nil)

IR_roseCode::FindOneLevelControlStructure() returning 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure( block 0x20d8170)
0 statements    ast 0x2139270
basic block 0x2139270 0x2139270 is:
block ast of type BinaryOperator
_in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))

irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 3 parts
build_ir_tree()  vector result has 2 parts
recursing. build_ir_tree() of CONTROL_LOOP creating children DONE
build_ir_tree()  vector result has 1 parts
in Loop::Loop. ir_tree has 1 parts
loop.cc after build_ir_tree() 0 statements
before init_loops, 0 freevar
count 0
loop.cc before init_loop, 0 statements

                                                  Loop::init_loop()
extract
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 2
IR_CONTROL_IF( recursing )
extract_ir_stmts()   ir_tree.size() 3
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
IR_CONTROL_IF( recursing )
extract_ir_stmts()   ir_tree.size() 3
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
nesting level stmt size = 6
6 statements?
i 0
stmt_nesting_level[0] = 4
i 1
stmt_nesting_level[1] = 4
i 2
stmt_nesting_level[2] = 4
i 3
stmt_nesting_level[3] = 4
i 4
stmt_nesting_level[4] = 4
i 5
stmt_nesting_level[5] = 4
in init_loop, made 6 stmts
max nesting level 4 at location 0
itn = stmt[0]
parent
IR_CONTROL_LOOP  cur_dim 3
making ROSE scalar symbol i
index[3] = 'i'
parent
IR_CONTROL_LOOP  cur_dim 2
making ROSE scalar symbol j
index[2] = 'j'
parent
IR_CONTROL_LOOP  cur_dim 1
making ROSE scalar symbol k
index[1] = 'k'
parent
parent
IR_CONTROL_LOOP  cur_dim 0
making ROSE scalar symbol t
index[0] = 't'
align loops by names,

set relation variable names                      ****
Relation r(4)
it's a loop.  temp_depth 3
r.name_set_var( 4, i )
it's a loop.  temp_depth 2
r.name_set_var( 3, j )
it's a loop.  temp_depth 1
r.name_set_var( 2, k )
it's a loop.  temp_depth 0
r.name_set_var( 1, t )
Relation r   {[t,k,j,i] : TRUE }
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : TRUE }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i and exists ( e1,e2 : ( i+e2 < e1 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i and exists ( e1,e2 : ( i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i and exists ( e1,e2 : ( i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i and exists ( e1,e2 : ( i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : 0 <= i and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( j+e6 < e5 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) and exists ( e9,e10 : ( k+e10 < e9 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) and exists ( e9,e10 : ( k+e10 < e9 and exists ( e11,e12 : ( e11+e12 = e9 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) and exists ( e9,e10 : ( k+e10 < e9 and exists ( e11,e12 : ( e11+e12 = e9 && 64 = e11 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) and exists ( e9,e10 : ( k+e10 < e9 and exists ( e11,e12 : ( e11+e12 = e9 && 64 = e11 && 1 = e12 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
IR_CONTROL_IF
IR_roseIf::condition()   ((t + s) % 2) == 0
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  (t + s) % 2
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) and exists ( e9,e10 : ( 1 = e10 && k+e10 < e9 and exists ( e11,e12 : ( e11+e12 = e9 && 64 = e11 && 1 = e12 )) )) and exists ( alpha : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  t + s
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) and exists ( e9,e10 : ( 1 = e10 && k+e10 < e9 and exists ( e11,e12 : ( e11+e12 = e9 && 64 = e11 && 1 = e12 )) )) and exists ( alpha : ( exists ( e13,e14 : ( e13 = alpha+2e14 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  t
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) and exists ( e9,e10 : ( 1 = e10 && k+e10 < e9 and exists ( e11,e12 : ( e11+e12 = e9 && 64 = e11 && 1 = e12 )) )) and exists ( alpha : ( exists ( e13,e14 : ( e13 = alpha+2e14 and exists ( e15,e16 : ( e15+e16 = e13 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making ROSE scalar symbol t
s t

*** exp2formula()
repr  s
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) and exists ( e9,e10 : ( 1 = e10 && k+e10 < e9 and exists ( e11,e12 : ( e11+e12 = e9 && 64 = e11 && 1 = e12 )) )) and exists ( alpha : ( exists ( e13,e14 : ( e13 = alpha+2e14 and exists ( e15,e16 : ( e15+e16 = e13 && t = e15 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  s
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     s
making ROSE scalar symbol s
s s

*** exp2formula()
repr  0
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) and exists ( e9,e10 : ( 1 = e10 && k+e10 < e9 and exists ( e11,e12 : ( e11+e12 = e9 && 64 = e11 && 1 = e12 )) )) and exists ( alpha : ( exists ( e13,e14 : ( e13 = alpha+2e14 and exists ( e15,e16 : ( e15+e16 = e13 && t = e15 && s = e16 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) and exists ( e9,e10 : ( 1 = e10 && k+e10 < e9 and exists ( e11,e12 : ( e11+e12 = e9 && 64 = e11 && 1 = e12 )) )) and exists ( alpha : ( exists ( e13,e14 : ( e13 = alpha+2e14 and exists ( e15,e16 : ( e15+e16 = e13 && t = e15 && s = e16 )) )) and 0 = alpha )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  1
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k && 0 <= t and exists ( e1,e2 : ( 1 = e2 && i+e2 < e1 and exists ( e3,e4 : ( e3+e4 = e1 && 64 = e3 && 1 = e4 )) )) and exists ( e5,e6 : ( 1 = e6 && j+e6 < e5 and exists ( e7,e8 : ( e7+e8 = e5 && 64 = e7 && 1 = e8 )) )) and exists ( e9,e10 : ( 1 = e10 && k+e10 < e9 and exists ( e11,e12 : ( e11+e12 = e9 && 64 = e11 && 1 = e12 )) )) and exists ( alpha : ( exists ( e13,e14 : ( e13 = alpha+2e14 and exists ( e15,e16 : ( e15+e16 = e13 && t = e15 && s = e16 )) )) and 0 = alpha )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
add information for missing loops   n_dim(4)
loop.cc L441 insert the statement
loop.cc before extract
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
code =  ocg->CreateSubstitutedStmt(...)


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
0 vars and 0 substitutions
nosubs old code was:
stmt = _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))
stmt
for int i < n_dim(4)
whew
max nesting level 4 at location 1
align loops by names,
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( k )
k was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol k


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( j )
j was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol j


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( i )
i was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol i


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions

set relation variable names                      ****
Relation r(4)
it's a loop.  temp_depth 3
r.name_set_var( 4, i )
it's a loop.  temp_depth 2
r.name_set_var( 3, j )
it's a loop.  temp_depth 1
r.name_set_var( 2, k )
it's a loop.  temp_depth 0
r.name_set_var( 1, t )
Relation r   {[t,k,j,i] : TRUE }
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : TRUE }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i and exists ( e17,e18 : ( i+e18 < e17 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i and exists ( e17,e18 : ( i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i and exists ( e17,e18 : ( i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i and exists ( e17,e18 : ( i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : 0 <= i and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( j+e22 < e21 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( k+e26 < e25 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( k+e26 < e25 and exists ( e27,e28 : ( e27+e28 = e25 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( k+e26 < e25 and exists ( e27,e28 : ( e27+e28 = e25 && 64 = e27 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( k+e26 < e25 and exists ( e27,e28 : ( e27+e28 = e25 && 64 = e27 && 1 = e28 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
IR_CONTROL_IF
IR_roseIf::condition()   ((t + s) % 2) == 0
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  (t + s) % 2
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( 1 = e26 && k+e26 < e25 and exists ( e27,e28 : ( e27+e28 = e25 && 64 = e27 && 1 = e28 )) )) and exists ( alpha : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  t + s
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( 1 = e26 && k+e26 < e25 and exists ( e27,e28 : ( e27+e28 = e25 && 64 = e27 && 1 = e28 )) )) and exists ( alpha : ( exists ( e29,e30 : ( e29 = alpha+2e30 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  t
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( 1 = e26 && k+e26 < e25 and exists ( e27,e28 : ( e27+e28 = e25 && 64 = e27 && 1 = e28 )) )) and exists ( alpha : ( exists ( e29,e30 : ( e29 = alpha+2e30 and exists ( e31,e32 : ( e31+e32 = e29 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making ROSE scalar symbol t
s t

*** exp2formula()
repr  s
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( 1 = e26 && k+e26 < e25 and exists ( e27,e28 : ( e27+e28 = e25 && 64 = e27 && 1 = e28 )) )) and exists ( alpha : ( exists ( e29,e30 : ( e29 = alpha+2e30 and exists ( e31,e32 : ( e31+e32 = e29 && t = e31 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  s
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     s
making ROSE scalar symbol s
s s

*** exp2formula()
repr  0
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( 1 = e26 && k+e26 < e25 and exists ( e27,e28 : ( e27+e28 = e25 && 64 = e27 && 1 = e28 )) )) and exists ( alpha : ( exists ( e29,e30 : ( e29 = alpha+2e30 and exists ( e31,e32 : ( e31+e32 = e29 && t = e31 && s = e32 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( 1 = e26 && k+e26 < e25 and exists ( e27,e28 : ( e27+e28 = e25 && 64 = e27 && 1 = e28 )) )) and exists ( alpha : ( exists ( e29,e30 : ( e29 = alpha+2e30 and exists ( e31,e32 : ( e31+e32 = e29 && t = e31 && s = e32 )) )) and 0 = alpha )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  1
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k && 0 <= t and exists ( e17,e18 : ( 1 = e18 && i+e18 < e17 and exists ( e19,e20 : ( e19+e20 = e17 && 64 = e19 && 1 = e20 )) )) and exists ( e21,e22 : ( 1 = e22 && j+e22 < e21 and exists ( e23,e24 : ( e23+e24 = e21 && 64 = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( 1 = e26 && k+e26 < e25 and exists ( e27,e28 : ( e27+e28 = e25 && 64 = e27 && 1 = e28 )) )) and exists ( alpha : ( exists ( e29,e30 : ( e29 = alpha+2e30 and exists ( e31,e32 : ( e31+e32 = e29 && t = e31 && s = e32 )) )) and 0 = alpha )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
add information for missing loops   n_dim(4)
loop.cc L441 insert the statement
loop.cc before extract
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
code =  ocg->CreateSubstitutedStmt(...)


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
0 vars and 0 substitutions
nosubs old code was:
stmt = _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))
stmt
for int i < n_dim(4)
whew
max nesting level 4 at location 2
align loops by names,
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( k )
k was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol k


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( j )
j was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol j


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( i )
i was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol i


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions

set relation variable names                      ****
Relation r(4)
it's a loop.  temp_depth 3
r.name_set_var( 4, i )
it's a loop.  temp_depth 2
r.name_set_var( 3, j )
it's a loop.  temp_depth 1
r.name_set_var( 2, k )
it's a loop.  temp_depth 0
r.name_set_var( 1, t )
Relation r   {[t,k,j,i] : TRUE }
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : TRUE }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i and exists ( e33,e34 : ( i+e34 < e33 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i and exists ( e33,e34 : ( i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i and exists ( e33,e34 : ( i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i and exists ( e33,e34 : ( i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : 0 <= i and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( j+e38 < e37 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) and exists ( e41,e42 : ( k+e42 < e41 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) and exists ( e41,e42 : ( k+e42 < e41 and exists ( e43,e44 : ( e43+e44 = e41 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) and exists ( e41,e42 : ( k+e42 < e41 and exists ( e43,e44 : ( e43+e44 = e41 && 64 = e43 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) and exists ( e41,e42 : ( k+e42 < e41 and exists ( e43,e44 : ( e43+e44 = e41 && 64 = e43 && 1 = e44 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
IR_CONTROL_IF
IR_roseIf::condition()   ((t + s) % 2) == 0
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  (t + s) % 2
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) and exists ( e41,e42 : ( 1 = e42 && k+e42 < e41 and exists ( e43,e44 : ( e43+e44 = e41 && 64 = e43 && 1 = e44 )) )) and exists ( alpha : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  t + s
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) and exists ( e41,e42 : ( 1 = e42 && k+e42 < e41 and exists ( e43,e44 : ( e43+e44 = e41 && 64 = e43 && 1 = e44 )) )) and exists ( alpha : ( exists ( e45,e46 : ( e45 = alpha+2e46 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  t
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) and exists ( e41,e42 : ( 1 = e42 && k+e42 < e41 and exists ( e43,e44 : ( e43+e44 = e41 && 64 = e43 && 1 = e44 )) )) and exists ( alpha : ( exists ( e45,e46 : ( e45 = alpha+2e46 and exists ( e47,e48 : ( e47+e48 = e45 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making ROSE scalar symbol t
s t

*** exp2formula()
repr  s
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) and exists ( e41,e42 : ( 1 = e42 && k+e42 < e41 and exists ( e43,e44 : ( e43+e44 = e41 && 64 = e43 && 1 = e44 )) )) and exists ( alpha : ( exists ( e45,e46 : ( e45 = alpha+2e46 and exists ( e47,e48 : ( e47+e48 = e45 && t = e47 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  s
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     s
making ROSE scalar symbol s
s s

*** exp2formula()
repr  0
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) and exists ( e41,e42 : ( 1 = e42 && k+e42 < e41 and exists ( e43,e44 : ( e43+e44 = e41 && 64 = e43 && 1 = e44 )) )) and exists ( alpha : ( exists ( e45,e46 : ( e45 = alpha+2e46 and exists ( e47,e48 : ( e47+e48 = e45 && t = e47 && s = e48 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) and exists ( e41,e42 : ( 1 = e42 && k+e42 < e41 and exists ( e43,e44 : ( e43+e44 = e41 && 64 = e43 && 1 = e44 )) )) and exists ( alpha : ( exists ( e45,e46 : ( e45 = alpha+2e46 and exists ( e47,e48 : ( e47+e48 = e45 && t = e47 && s = e48 )) )) and 0 = alpha )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  1
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k && 0 <= t and exists ( e33,e34 : ( 1 = e34 && i+e34 < e33 and exists ( e35,e36 : ( e35+e36 = e33 && 64 = e35 && 1 = e36 )) )) and exists ( e37,e38 : ( 1 = e38 && j+e38 < e37 and exists ( e39,e40 : ( e39+e40 = e37 && 64 = e39 && 1 = e40 )) )) and exists ( e41,e42 : ( 1 = e42 && k+e42 < e41 and exists ( e43,e44 : ( e43+e44 = e41 && 64 = e43 && 1 = e44 )) )) and exists ( alpha : ( exists ( e45,e46 : ( e45 = alpha+2e46 and exists ( e47,e48 : ( e47+e48 = e45 && t = e47 && s = e48 )) )) and 0 = alpha )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
add information for missing loops   n_dim(4)
loop.cc L441 insert the statement
loop.cc before extract
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
code =  ocg->CreateSubstitutedStmt(...)


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
0 vars and 0 substitutions
nosubs old code was:
stmt = _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))
stmt
for int i < n_dim(4)
whew
max nesting level 4 at location 3
align loops by names,
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( k )
k was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol k


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( j )
j was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol j


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( i )
i was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol i


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions

set relation variable names                      ****
Relation r(4)
it's a loop.  temp_depth 3
r.name_set_var( 4, i )
it's a loop.  temp_depth 2
r.name_set_var( 3, j )
it's a loop.  temp_depth 1
r.name_set_var( 2, k )
it's a loop.  temp_depth 0
r.name_set_var( 1, t )
Relation r   {[t,k,j,i] : TRUE }
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : TRUE }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i and exists ( e49,e50 : ( i+e50 < e49 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i and exists ( e49,e50 : ( i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i and exists ( e49,e50 : ( i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i and exists ( e49,e50 : ( i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : 0 <= i and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( j+e54 < e53 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) and exists ( e57,e58 : ( k+e58 < e57 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) and exists ( e57,e58 : ( k+e58 < e57 and exists ( e59,e60 : ( e59+e60 = e57 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) and exists ( e57,e58 : ( k+e58 < e57 and exists ( e59,e60 : ( e59+e60 = e57 && 64 = e59 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) and exists ( e57,e58 : ( k+e58 < e57 and exists ( e59,e60 : ( e59+e60 = e57 && 64 = e59 && 1 = e60 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
IR_CONTROL_IF
IR_roseIf::condition()   ((t + s) % 2) == 0
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  (t + s) % 2
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) and exists ( e57,e58 : ( 1 = e58 && k+e58 < e57 and exists ( e59,e60 : ( e59+e60 = e57 && 64 = e59 && 1 = e60 )) )) and  not ( exists ( alpha : ( TRUE )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  t + s
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) and exists ( e57,e58 : ( 1 = e58 && k+e58 < e57 and exists ( e59,e60 : ( e59+e60 = e57 && 64 = e59 && 1 = e60 )) )) and  not ( exists ( alpha : ( exists ( e61,e62 : ( e61 = alpha+2e62 )) )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  t
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) and exists ( e57,e58 : ( 1 = e58 && k+e58 < e57 and exists ( e59,e60 : ( e59+e60 = e57 && 64 = e59 && 1 = e60 )) )) and  not ( exists ( alpha : ( exists ( e61,e62 : ( e61 = alpha+2e62 and exists ( e63,e64 : ( e63+e64 = e61 )) )) )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making ROSE scalar symbol t
s t

*** exp2formula()
repr  s
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) and exists ( e57,e58 : ( 1 = e58 && k+e58 < e57 and exists ( e59,e60 : ( e59+e60 = e57 && 64 = e59 && 1 = e60 )) )) and  not ( exists ( alpha : ( exists ( e61,e62 : ( e61 = alpha+2e62 and exists ( e63,e64 : ( e63+e64 = e61 && t = e63 )) )) )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  s
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     s
making ROSE scalar symbol s
s s

*** exp2formula()
repr  0
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) and exists ( e57,e58 : ( 1 = e58 && k+e58 < e57 and exists ( e59,e60 : ( e59+e60 = e57 && 64 = e59 && 1 = e60 )) )) and  not ( exists ( alpha : ( exists ( e61,e62 : ( e61 = alpha+2e62 and exists ( e63,e64 : ( e63+e64 = e61 && t = e63 && s = e64 )) )) )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) and exists ( e57,e58 : ( 1 = e58 && k+e58 < e57 and exists ( e59,e60 : ( e59+e60 = e57 && 64 = e59 && 1 = e60 )) )) and  not ( exists ( alpha : ( exists ( e61,e62 : ( e61 = alpha+2e62 and exists ( e63,e64 : ( e63+e64 = e61 && t = e63 && s = e64 )) )) and 0 = alpha )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  1
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k && 0 <= t and exists ( e49,e50 : ( 1 = e50 && i+e50 < e49 and exists ( e51,e52 : ( e51+e52 = e49 && 64 = e51 && 1 = e52 )) )) and exists ( e53,e54 : ( 1 = e54 && j+e54 < e53 and exists ( e55,e56 : ( e55+e56 = e53 && 64 = e55 && 1 = e56 )) )) and exists ( e57,e58 : ( 1 = e58 && k+e58 < e57 and exists ( e59,e60 : ( e59+e60 = e57 && 64 = e59 && 1 = e60 )) )) and  not ( exists ( alpha : ( exists ( e61,e62 : ( e61 = alpha+2e62 and exists ( e63,e64 : ( e63+e64 = e61 && t = e63 && s = e64 )) )) and 0 = alpha )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
add information for missing loops   n_dim(4)
loop.cc L441 insert the statement
loop.cc before extract
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
code =  ocg->CreateSubstitutedStmt(...)


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
0 vars and 0 substitutions
nosubs old code was:
stmt = _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))
stmt
for int i < n_dim(4)
whew
max nesting level 4 at location 4
align loops by names,
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( k )
k was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol k


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( j )
j was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol j


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( i )
i was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol i


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions

set relation variable names                      ****
Relation r(4)
it's a loop.  temp_depth 3
r.name_set_var( 4, i )
it's a loop.  temp_depth 2
r.name_set_var( 3, j )
it's a loop.  temp_depth 1
r.name_set_var( 2, k )
it's a loop.  temp_depth 0
r.name_set_var( 1, t )
Relation r   {[t,k,j,i] : TRUE }
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : TRUE }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i and exists ( e65,e66 : ( i+e66 < e65 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i and exists ( e65,e66 : ( i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i and exists ( e65,e66 : ( i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i and exists ( e65,e66 : ( i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : 0 <= i and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( j+e70 < e69 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) and exists ( e73,e74 : ( k+e74 < e73 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) and exists ( e73,e74 : ( k+e74 < e73 and exists ( e75,e76 : ( e75+e76 = e73 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) and exists ( e73,e74 : ( k+e74 < e73 and exists ( e75,e76 : ( e75+e76 = e73 && 64 = e75 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) and exists ( e73,e74 : ( k+e74 < e73 and exists ( e75,e76 : ( e75+e76 = e73 && 64 = e75 && 1 = e76 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
IR_CONTROL_IF
IR_roseIf::condition()   ((t + s) % 2) == 0
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  (t + s) % 2
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) and exists ( e73,e74 : ( 1 = e74 && k+e74 < e73 and exists ( e75,e76 : ( e75+e76 = e73 && 64 = e75 && 1 = e76 )) )) and  not ( exists ( alpha : ( TRUE )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  t + s
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) and exists ( e73,e74 : ( 1 = e74 && k+e74 < e73 and exists ( e75,e76 : ( e75+e76 = e73 && 64 = e75 && 1 = e76 )) )) and  not ( exists ( alpha : ( exists ( e77,e78 : ( e77 = alpha+2e78 )) )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  t
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) and exists ( e73,e74 : ( 1 = e74 && k+e74 < e73 and exists ( e75,e76 : ( e75+e76 = e73 && 64 = e75 && 1 = e76 )) )) and  not ( exists ( alpha : ( exists ( e77,e78 : ( e77 = alpha+2e78 and exists ( e79,e80 : ( e79+e80 = e77 )) )) )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making ROSE scalar symbol t
s t

*** exp2formula()
repr  s
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) and exists ( e73,e74 : ( 1 = e74 && k+e74 < e73 and exists ( e75,e76 : ( e75+e76 = e73 && 64 = e75 && 1 = e76 )) )) and  not ( exists ( alpha : ( exists ( e77,e78 : ( e77 = alpha+2e78 and exists ( e79,e80 : ( e79+e80 = e77 && t = e79 )) )) )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  s
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     s
making ROSE scalar symbol s
s s

*** exp2formula()
repr  0
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) and exists ( e73,e74 : ( 1 = e74 && k+e74 < e73 and exists ( e75,e76 : ( e75+e76 = e73 && 64 = e75 && 1 = e76 )) )) and  not ( exists ( alpha : ( exists ( e77,e78 : ( e77 = alpha+2e78 and exists ( e79,e80 : ( e79+e80 = e77 && t = e79 && s = e80 )) )) )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) and exists ( e73,e74 : ( 1 = e74 && k+e74 < e73 and exists ( e75,e76 : ( e75+e76 = e73 && 64 = e75 && 1 = e76 )) )) and  not ( exists ( alpha : ( exists ( e77,e78 : ( e77 = alpha+2e78 and exists ( e79,e80 : ( e79+e80 = e77 && t = e79 && s = e80 )) )) and 0 = alpha )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  1
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k && 0 <= t and exists ( e65,e66 : ( 1 = e66 && i+e66 < e65 and exists ( e67,e68 : ( e67+e68 = e65 && 64 = e67 && 1 = e68 )) )) and exists ( e69,e70 : ( 1 = e70 && j+e70 < e69 and exists ( e71,e72 : ( e71+e72 = e69 && 64 = e71 && 1 = e72 )) )) and exists ( e73,e74 : ( 1 = e74 && k+e74 < e73 and exists ( e75,e76 : ( e75+e76 = e73 && 64 = e75 && 1 = e76 )) )) and  not ( exists ( alpha : ( exists ( e77,e78 : ( e77 = alpha+2e78 and exists ( e79,e80 : ( e79+e80 = e77 && t = e79 && s = e80 )) )) and 0 = alpha )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
add information for missing loops   n_dim(4)
loop.cc L441 insert the statement
loop.cc before extract
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
code =  ocg->CreateSubstitutedStmt(...)


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
0 vars and 0 substitutions
nosubs old code was:
stmt = _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))
stmt
for int i < n_dim(4)
whew
max nesting level 4 at location 5
align loops by names,
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( k )
k was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol k


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( j )
j was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol j


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
CG_chillBuilder::CreateIdent( i )
i was already defined in the function body
0  int i
1  int j
2  int k
3  int t
4  double ALPHA
5  double BETA
6  double GAMMA
7  double DELTA
8  int s
9  double h2inv
10  double TwoThirds
11  double _in[66][66][66]
12  double _out[66][66][66]
13  double _rhs[66][66][66]
14  double _lambda[66][66][66]

dammit
making ROSE scalar symbol i


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions

set relation variable names                      ****
Relation r(4)
it's a loop.  temp_depth 3
r.name_set_var( 4, i )
it's a loop.  temp_depth 2
r.name_set_var( 3, j )
it's a loop.  temp_depth 1
r.name_set_var( 2, k )
it's a loop.  temp_depth 0
r.name_set_var( 1, t )
Relation r   {[t,k,j,i] : TRUE }
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : TRUE }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i and exists ( e81,e82 : ( i+e82 < e81 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i and exists ( e81,e82 : ( i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i and exists ( e81,e82 : ( i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i and exists ( e81,e82 : ( i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : 0 <= i and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( j+e86 < e85 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{[t,k,j,i] : 0 <= i && 0 <= j and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
64 + 1 - 1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  64 + 1 - 1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64 + 1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) and exists ( e89,e90 : ( k+e90 < e89 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  64
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) and exists ( e89,e90 : ( k+e90 < e89 and exists ( e91,e92 : ( e91+e92 = e89 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) and exists ( e89,e90 : ( k+e90 < e89 and exists ( e91,e92 : ( e91+e92 = e89 && 64 = e91 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  1
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) and exists ( e89,e90 : ( k+e90 < e89 and exists ( e91,e92 : ( e91+e92 = e89 && 64 = e91 && 1 = e92 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
IR_CONTROL_IF
IR_roseIf::condition()   ((t + s) % 2) == 0
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  (t + s) % 2
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) and exists ( e89,e90 : ( 1 = e90 && k+e90 < e89 and exists ( e91,e92 : ( e91+e92 = e89 && 64 = e91 && 1 = e92 )) )) and  not ( exists ( alpha : ( TRUE )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  t + s
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) and exists ( e89,e90 : ( 1 = e90 && k+e90 < e89 and exists ( e91,e92 : ( e91+e92 = e89 && 64 = e91 && 1 = e92 )) )) and  not ( exists ( alpha : ( exists ( e93,e94 : ( e93 = alpha+2e94 )) )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  t
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) and exists ( e89,e90 : ( 1 = e90 && k+e90 < e89 and exists ( e91,e92 : ( e91+e92 = e89 && 64 = e91 && 1 = e92 )) )) and  not ( exists ( alpha : ( exists ( e93,e94 : ( e93 = alpha+2e94 and exists ( e95,e96 : ( e95+e96 = e93 )) )) )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making ROSE scalar symbol t
s t

*** exp2formula()
repr  s
{[t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) and exists ( e89,e90 : ( 1 = e90 && k+e90 < e89 and exists ( e91,e92 : ( e91+e92 = e89 && 64 = e91 && 1 = e92 )) )) and  not ( exists ( alpha : ( exists ( e93,e94 : ( e93 = alpha+2e94 and exists ( e95,e96 : ( e95+e96 = e93 && t = e95 )) )) )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  s
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     s
making ROSE scalar symbol s
s s

*** exp2formula()
repr  0
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) and exists ( e89,e90 : ( 1 = e90 && k+e90 < e89 and exists ( e91,e92 : ( e91+e92 = e89 && 64 = e91 && 1 = e92 )) )) and  not ( exists ( alpha : ( exists ( e93,e94 : ( e93 = alpha+2e94 and exists ( e95,e96 : ( e95+e96 = e93 && t = e95 && s = e96 )) )) )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
loop.cc l 462  IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

loop.cc, got the lower bound. it is:
0


*** exp2formula()
repr  0
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) and exists ( e89,e90 : ( 1 = e90 && k+e90 < e89 and exists ( e91,e92 : ( e91+e92 = e89 && 64 = e91 && 1 = e92 )) )) and  not ( exists ( alpha : ( exists ( e93,e94 : ( e93 = alpha+2e94 and exists ( e95,e96 : ( e95+e96 = e93 && t = e95 && s = e96 )) )) and 0 = alpha )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
1

IR_roseLoop::stop_cond()

*** exp2formula()
repr  1
{ Sym=[s] [t,k,j,i] : 0 <= i && 0 <= j && 0 <= k && 0 <= t and exists ( e81,e82 : ( 1 = e82 && i+e82 < e81 and exists ( e83,e84 : ( e83+e84 = e81 && 64 = e83 && 1 = e84 )) )) and exists ( e85,e86 : ( 1 = e86 && j+e86 < e85 and exists ( e87,e88 : ( e87+e88 = e85 && 64 = e87 && 1 = e88 )) )) and exists ( e89,e90 : ( 1 = e90 && k+e90 < e89 and exists ( e91,e92 : ( e91+e92 = e89 && 64 = e91 && 1 = e92 )) )) and  not ( exists ( alpha : ( exists ( e93,e94 : ( e93 = alpha+2e94 and exists ( e95,e96 : ( e95+e96 = e93 && t = e95 && s = e96 )) )) and 0 = alpha )) ) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
0
(IntegerLiteral 'int' 0)

IR_roseCode::QueryExpOperation()
abs(c)
add information for missing loops   n_dim(4)
loop.cc L441 insert the statement
loop.cc before extract
IR_roseBlock::extract()
block has chillAST of type BinaryOperator
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
code =  ocg->CreateSubstitutedStmt(...)


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
0 vars and 0 substitutions
nosubs old code was:
stmt = _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))
stmt
for int i < n_dim(4)
whew
                                        loop.cc   Loop::init_loop() END

after init_loop, 1 freevar
loop.cc after init_loop, 6 statements
this really REALLY needs some comments
i 0
j 0

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))
repr2   _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
repr1 == repr2
repr1->dump()
_out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))

28 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[3] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[4] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[5] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[6] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[7] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[8] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[9] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[10] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[11] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[12] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[13] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[14] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[15] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[16] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[17] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[18] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[19] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[20] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[21] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[22] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[23] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[24] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[25] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[26] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[27] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

access of size 28
WRITE  array access 0 = _out
       array access 1 = _in
       array access 2 = _in
       array access 3 = _in
       array access 4 = _in
       array access 5 = _in
       array access 6 = _in
       array access 7 = _in
       array access 8 = _in
       array access 9 = _in
       array access 10 = _in
       array access 11 = _in
       array access 12 = _in
       array access 13 = _in
       array access 14 = _in
       array access 15 = _in
       array access 16 = _in
       array access 17 = _in
       array access 18 = _in
       array access 19 = _in
       array access 20 = _in
       array access 21 = _in
       array access 22 = _in
       array access 23 = _in
       array access 24 = _in
       array access 25 = _in
       array access 26 = _in
       array access 27 = _in
that was the list


before mapRefstoStatements()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
after mapRefstoStatements()

i 0
sym_a = _out
irtools.cc j 0
sym_b = _out
irtools.cc ij 0 0
*sym_a == *sym_b
0 a->is_write()
0 b->is_write()

irtools.cc ij 0 0   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e97,e98 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e97,e98 : ( k = e97 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e97,e98 : ( k = e97 && k' = e98 && e98 = e97 )) and exists ( e99,e100 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e97,e98 : ( k = e97 && k' = e98 && e98 = e97 )) and exists ( e99,e100 : ( j = e99 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e97,e98 : ( k = e97 && k' = e98 && e98 = e97 )) and exists ( e99,e100 : ( j = e99 && j' = e100 && e100 = e99 )) and exists ( e101,e102 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e97,e98 : ( k = e97 && k' = e98 && e98 = e97 )) and exists ( e99,e100 : ( j = e99 && j' = e100 && e100 = e99 )) and exists ( e101,e102 : ( i = e101 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e97,e98 : ( k = e97 && k' = e98 && e98 = e97 )) and exists ( e99,e100 : ( j = e99 && j' = e100 && e100 = e99 )) and exists ( e101,e102 : ( i = e101 && i' = e102 && e102 = e101 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e97,e98 : ( k = e97 && k' = e98 && e98 = e97 )) and exists ( e99,e100 : ( j = e99 && j' = e100 && e100 = e99 )) and exists ( e101,e102 : ( i = e101 && i' = e102 && e102 = e101 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
1
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
leaving relation2dependences, 0 and 0 dependences

irtools.cc ij 0 0 dv.first 0   dv.second 0
234irtools.cc j 1
sym_b = _in
irtools.cc ij 0 1
*sym_a NOT == *sym_b
0 a->is_write()
1 b->is_NOT_write()
irtools.cc j 2
sym_b = _in
irtools.cc ij 0 2
*sym_a NOT == *sym_b
0 a->is_write()
2 b->is_NOT_write()
irtools.cc j 3
sym_b = _in
irtools.cc ij 0 3
*sym_a NOT == *sym_b
0 a->is_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _in
irtools.cc ij 0 4
*sym_a NOT == *sym_b
0 a->is_write()
4 b->is_NOT_write()
irtools.cc j 5
sym_b = _in
irtools.cc ij 0 5
*sym_a NOT == *sym_b
0 a->is_write()
5 b->is_NOT_write()
irtools.cc j 6
sym_b = _in
irtools.cc ij 0 6
*sym_a NOT == *sym_b
0 a->is_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _in
irtools.cc ij 0 7
*sym_a NOT == *sym_b
0 a->is_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _in
irtools.cc ij 0 8
*sym_a NOT == *sym_b
0 a->is_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _in
irtools.cc ij 0 9
*sym_a NOT == *sym_b
0 a->is_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _in
irtools.cc ij 0 10
*sym_a NOT == *sym_b
0 a->is_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _in
irtools.cc ij 0 11
*sym_a NOT == *sym_b
0 a->is_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _in
irtools.cc ij 0 12
*sym_a NOT == *sym_b
0 a->is_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 0 13
*sym_a NOT == *sym_b
0 a->is_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 0 14
*sym_a NOT == *sym_b
0 a->is_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 0 15
*sym_a NOT == *sym_b
0 a->is_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 0 16
*sym_a NOT == *sym_b
0 a->is_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 0 17
*sym_a NOT == *sym_b
0 a->is_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 0 18
*sym_a NOT == *sym_b
0 a->is_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 0 19
*sym_a NOT == *sym_b
0 a->is_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 0 20
*sym_a NOT == *sym_b
0 a->is_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 0 21
*sym_a NOT == *sym_b
0 a->is_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 0 22
*sym_a NOT == *sym_b
0 a->is_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 0 23
*sym_a NOT == *sym_b
0 a->is_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 0 24
*sym_a NOT == *sym_b
0 a->is_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 0 25
*sym_a NOT == *sym_b
0 a->is_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 0 26
*sym_a NOT == *sym_b
0 a->is_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 0 27
*sym_a NOT == *sym_b
0 a->is_write()
27 b->is_NOT_write()
i 1
sym_a = _in
irtools.cc j 1
sym_b = _in
irtools.cc ij 1 1
*sym_a == *sym_b
1 a->is_NOT_write()
1 b->is_NOT_write()
irtools.cc j 2
sym_b = _in
irtools.cc ij 1 2
*sym_a == *sym_b
1 a->is_NOT_write()
2 b->is_NOT_write()
irtools.cc j 3
sym_b = _in
irtools.cc ij 1 3
*sym_a == *sym_b
1 a->is_NOT_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _in
irtools.cc ij 1 4
*sym_a == *sym_b
1 a->is_NOT_write()
4 b->is_NOT_write()
irtools.cc j 5
sym_b = _in
irtools.cc ij 1 5
*sym_a == *sym_b
1 a->is_NOT_write()
5 b->is_NOT_write()
irtools.cc j 6
sym_b = _in
irtools.cc ij 1 6
*sym_a == *sym_b
1 a->is_NOT_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _in
irtools.cc ij 1 7
*sym_a == *sym_b
1 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _in
irtools.cc ij 1 8
*sym_a == *sym_b
1 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _in
irtools.cc ij 1 9
*sym_a == *sym_b
1 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _in
irtools.cc ij 1 10
*sym_a == *sym_b
1 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _in
irtools.cc ij 1 11
*sym_a == *sym_b
1 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _in
irtools.cc ij 1 12
*sym_a == *sym_b
1 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 1 13
*sym_a == *sym_b
1 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 1 14
*sym_a == *sym_b
1 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 1 15
*sym_a == *sym_b
1 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 1 16
*sym_a == *sym_b
1 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 1 17
*sym_a == *sym_b
1 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 1 18
*sym_a == *sym_b
1 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 1 19
*sym_a == *sym_b
1 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 1 20
*sym_a == *sym_b
1 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 1 21
*sym_a == *sym_b
1 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 1 22
*sym_a == *sym_b
1 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 1 23
*sym_a == *sym_b
1 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 1 24
*sym_a == *sym_b
1 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 1 25
*sym_a == *sym_b
1 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 1 26
*sym_a == *sym_b
1 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 1 27
*sym_a == *sym_b
1 a->is_NOT_write()
27 b->is_NOT_write()
i 2
sym_a = _in
irtools.cc j 2
sym_b = _in
irtools.cc ij 2 2
*sym_a == *sym_b
2 a->is_NOT_write()
2 b->is_NOT_write()
irtools.cc j 3
sym_b = _in
irtools.cc ij 2 3
*sym_a == *sym_b
2 a->is_NOT_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _in
irtools.cc ij 2 4
*sym_a == *sym_b
2 a->is_NOT_write()
4 b->is_NOT_write()
irtools.cc j 5
sym_b = _in
irtools.cc ij 2 5
*sym_a == *sym_b
2 a->is_NOT_write()
5 b->is_NOT_write()
irtools.cc j 6
sym_b = _in
irtools.cc ij 2 6
*sym_a == *sym_b
2 a->is_NOT_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _in
irtools.cc ij 2 7
*sym_a == *sym_b
2 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _in
irtools.cc ij 2 8
*sym_a == *sym_b
2 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _in
irtools.cc ij 2 9
*sym_a == *sym_b
2 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _in
irtools.cc ij 2 10
*sym_a == *sym_b
2 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _in
irtools.cc ij 2 11
*sym_a == *sym_b
2 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _in
irtools.cc ij 2 12
*sym_a == *sym_b
2 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 2 13
*sym_a == *sym_b
2 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 2 14
*sym_a == *sym_b
2 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 2 15
*sym_a == *sym_b
2 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 2 16
*sym_a == *sym_b
2 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 2 17
*sym_a == *sym_b
2 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 2 18
*sym_a == *sym_b
2 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 2 19
*sym_a == *sym_b
2 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 2 20
*sym_a == *sym_b
2 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 2 21
*sym_a == *sym_b
2 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 2 22
*sym_a == *sym_b
2 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 2 23
*sym_a == *sym_b
2 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 2 24
*sym_a == *sym_b
2 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 2 25
*sym_a == *sym_b
2 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 2 26
*sym_a == *sym_b
2 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 2 27
*sym_a == *sym_b
2 a->is_NOT_write()
27 b->is_NOT_write()
i 3
sym_a = _in
irtools.cc j 3
sym_b = _in
irtools.cc ij 3 3
*sym_a == *sym_b
3 a->is_NOT_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _in
irtools.cc ij 3 4
*sym_a == *sym_b
3 a->is_NOT_write()
4 b->is_NOT_write()
irtools.cc j 5
sym_b = _in
irtools.cc ij 3 5
*sym_a == *sym_b
3 a->is_NOT_write()
5 b->is_NOT_write()
irtools.cc j 6
sym_b = _in
irtools.cc ij 3 6
*sym_a == *sym_b
3 a->is_NOT_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _in
irtools.cc ij 3 7
*sym_a == *sym_b
3 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _in
irtools.cc ij 3 8
*sym_a == *sym_b
3 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _in
irtools.cc ij 3 9
*sym_a == *sym_b
3 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _in
irtools.cc ij 3 10
*sym_a == *sym_b
3 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _in
irtools.cc ij 3 11
*sym_a == *sym_b
3 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _in
irtools.cc ij 3 12
*sym_a == *sym_b
3 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 3 13
*sym_a == *sym_b
3 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 3 14
*sym_a == *sym_b
3 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 3 15
*sym_a == *sym_b
3 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 3 16
*sym_a == *sym_b
3 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 3 17
*sym_a == *sym_b
3 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 3 18
*sym_a == *sym_b
3 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 3 19
*sym_a == *sym_b
3 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 3 20
*sym_a == *sym_b
3 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 3 21
*sym_a == *sym_b
3 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 3 22
*sym_a == *sym_b
3 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 3 23
*sym_a == *sym_b
3 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 3 24
*sym_a == *sym_b
3 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 3 25
*sym_a == *sym_b
3 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 3 26
*sym_a == *sym_b
3 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 3 27
*sym_a == *sym_b
3 a->is_NOT_write()
27 b->is_NOT_write()
i 4
sym_a = _in
irtools.cc j 4
sym_b = _in
irtools.cc ij 4 4
*sym_a == *sym_b
4 a->is_NOT_write()
4 b->is_NOT_write()
irtools.cc j 5
sym_b = _in
irtools.cc ij 4 5
*sym_a == *sym_b
4 a->is_NOT_write()
5 b->is_NOT_write()
irtools.cc j 6
sym_b = _in
irtools.cc ij 4 6
*sym_a == *sym_b
4 a->is_NOT_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _in
irtools.cc ij 4 7
*sym_a == *sym_b
4 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _in
irtools.cc ij 4 8
*sym_a == *sym_b
4 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _in
irtools.cc ij 4 9
*sym_a == *sym_b
4 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _in
irtools.cc ij 4 10
*sym_a == *sym_b
4 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _in
irtools.cc ij 4 11
*sym_a == *sym_b
4 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _in
irtools.cc ij 4 12
*sym_a == *sym_b
4 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 4 13
*sym_a == *sym_b
4 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 4 14
*sym_a == *sym_b
4 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 4 15
*sym_a == *sym_b
4 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 4 16
*sym_a == *sym_b
4 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 4 17
*sym_a == *sym_b
4 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 4 18
*sym_a == *sym_b
4 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 4 19
*sym_a == *sym_b
4 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 4 20
*sym_a == *sym_b
4 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 4 21
*sym_a == *sym_b
4 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 4 22
*sym_a == *sym_b
4 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 4 23
*sym_a == *sym_b
4 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 4 24
*sym_a == *sym_b
4 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 4 25
*sym_a == *sym_b
4 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 4 26
*sym_a == *sym_b
4 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 4 27
*sym_a == *sym_b
4 a->is_NOT_write()
27 b->is_NOT_write()
i 5
sym_a = _in
irtools.cc j 5
sym_b = _in
irtools.cc ij 5 5
*sym_a == *sym_b
5 a->is_NOT_write()
5 b->is_NOT_write()
irtools.cc j 6
sym_b = _in
irtools.cc ij 5 6
*sym_a == *sym_b
5 a->is_NOT_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _in
irtools.cc ij 5 7
*sym_a == *sym_b
5 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _in
irtools.cc ij 5 8
*sym_a == *sym_b
5 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _in
irtools.cc ij 5 9
*sym_a == *sym_b
5 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _in
irtools.cc ij 5 10
*sym_a == *sym_b
5 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _in
irtools.cc ij 5 11
*sym_a == *sym_b
5 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _in
irtools.cc ij 5 12
*sym_a == *sym_b
5 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 5 13
*sym_a == *sym_b
5 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 5 14
*sym_a == *sym_b
5 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 5 15
*sym_a == *sym_b
5 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 5 16
*sym_a == *sym_b
5 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 5 17
*sym_a == *sym_b
5 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 5 18
*sym_a == *sym_b
5 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 5 19
*sym_a == *sym_b
5 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 5 20
*sym_a == *sym_b
5 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 5 21
*sym_a == *sym_b
5 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 5 22
*sym_a == *sym_b
5 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 5 23
*sym_a == *sym_b
5 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 5 24
*sym_a == *sym_b
5 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 5 25
*sym_a == *sym_b
5 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 5 26
*sym_a == *sym_b
5 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 5 27
*sym_a == *sym_b
5 a->is_NOT_write()
27 b->is_NOT_write()
i 6
sym_a = _in
irtools.cc j 6
sym_b = _in
irtools.cc ij 6 6
*sym_a == *sym_b
6 a->is_NOT_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _in
irtools.cc ij 6 7
*sym_a == *sym_b
6 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _in
irtools.cc ij 6 8
*sym_a == *sym_b
6 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _in
irtools.cc ij 6 9
*sym_a == *sym_b
6 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _in
irtools.cc ij 6 10
*sym_a == *sym_b
6 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _in
irtools.cc ij 6 11
*sym_a == *sym_b
6 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _in
irtools.cc ij 6 12
*sym_a == *sym_b
6 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 6 13
*sym_a == *sym_b
6 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 6 14
*sym_a == *sym_b
6 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 6 15
*sym_a == *sym_b
6 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 6 16
*sym_a == *sym_b
6 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 6 17
*sym_a == *sym_b
6 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 6 18
*sym_a == *sym_b
6 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 6 19
*sym_a == *sym_b
6 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 6 20
*sym_a == *sym_b
6 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 6 21
*sym_a == *sym_b
6 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 6 22
*sym_a == *sym_b
6 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 6 23
*sym_a == *sym_b
6 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 6 24
*sym_a == *sym_b
6 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 6 25
*sym_a == *sym_b
6 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 6 26
*sym_a == *sym_b
6 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 6 27
*sym_a == *sym_b
6 a->is_NOT_write()
27 b->is_NOT_write()
i 7
sym_a = _in
irtools.cc j 7
sym_b = _in
irtools.cc ij 7 7
*sym_a == *sym_b
7 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _in
irtools.cc ij 7 8
*sym_a == *sym_b
7 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _in
irtools.cc ij 7 9
*sym_a == *sym_b
7 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _in
irtools.cc ij 7 10
*sym_a == *sym_b
7 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _in
irtools.cc ij 7 11
*sym_a == *sym_b
7 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _in
irtools.cc ij 7 12
*sym_a == *sym_b
7 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 7 13
*sym_a == *sym_b
7 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 7 14
*sym_a == *sym_b
7 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 7 15
*sym_a == *sym_b
7 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 7 16
*sym_a == *sym_b
7 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 7 17
*sym_a == *sym_b
7 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 7 18
*sym_a == *sym_b
7 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 7 19
*sym_a == *sym_b
7 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 7 20
*sym_a == *sym_b
7 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 7 21
*sym_a == *sym_b
7 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 7 22
*sym_a == *sym_b
7 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 7 23
*sym_a == *sym_b
7 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 7 24
*sym_a == *sym_b
7 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 7 25
*sym_a == *sym_b
7 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 7 26
*sym_a == *sym_b
7 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 7 27
*sym_a == *sym_b
7 a->is_NOT_write()
27 b->is_NOT_write()
i 8
sym_a = _in
irtools.cc j 8
sym_b = _in
irtools.cc ij 8 8
*sym_a == *sym_b
8 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _in
irtools.cc ij 8 9
*sym_a == *sym_b
8 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _in
irtools.cc ij 8 10
*sym_a == *sym_b
8 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _in
irtools.cc ij 8 11
*sym_a == *sym_b
8 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _in
irtools.cc ij 8 12
*sym_a == *sym_b
8 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 8 13
*sym_a == *sym_b
8 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 8 14
*sym_a == *sym_b
8 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 8 15
*sym_a == *sym_b
8 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 8 16
*sym_a == *sym_b
8 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 8 17
*sym_a == *sym_b
8 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 8 18
*sym_a == *sym_b
8 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 8 19
*sym_a == *sym_b
8 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 8 20
*sym_a == *sym_b
8 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 8 21
*sym_a == *sym_b
8 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 8 22
*sym_a == *sym_b
8 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 8 23
*sym_a == *sym_b
8 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 8 24
*sym_a == *sym_b
8 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 8 25
*sym_a == *sym_b
8 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 8 26
*sym_a == *sym_b
8 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 8 27
*sym_a == *sym_b
8 a->is_NOT_write()
27 b->is_NOT_write()
i 9
sym_a = _in
irtools.cc j 9
sym_b = _in
irtools.cc ij 9 9
*sym_a == *sym_b
9 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _in
irtools.cc ij 9 10
*sym_a == *sym_b
9 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _in
irtools.cc ij 9 11
*sym_a == *sym_b
9 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _in
irtools.cc ij 9 12
*sym_a == *sym_b
9 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 9 13
*sym_a == *sym_b
9 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 9 14
*sym_a == *sym_b
9 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 9 15
*sym_a == *sym_b
9 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 9 16
*sym_a == *sym_b
9 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 9 17
*sym_a == *sym_b
9 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 9 18
*sym_a == *sym_b
9 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 9 19
*sym_a == *sym_b
9 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 9 20
*sym_a == *sym_b
9 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 9 21
*sym_a == *sym_b
9 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 9 22
*sym_a == *sym_b
9 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 9 23
*sym_a == *sym_b
9 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 9 24
*sym_a == *sym_b
9 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 9 25
*sym_a == *sym_b
9 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 9 26
*sym_a == *sym_b
9 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 9 27
*sym_a == *sym_b
9 a->is_NOT_write()
27 b->is_NOT_write()
i 10
sym_a = _in
irtools.cc j 10
sym_b = _in
irtools.cc ij 10 10
*sym_a == *sym_b
10 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _in
irtools.cc ij 10 11
*sym_a == *sym_b
10 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _in
irtools.cc ij 10 12
*sym_a == *sym_b
10 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 10 13
*sym_a == *sym_b
10 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 10 14
*sym_a == *sym_b
10 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 10 15
*sym_a == *sym_b
10 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 10 16
*sym_a == *sym_b
10 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 10 17
*sym_a == *sym_b
10 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 10 18
*sym_a == *sym_b
10 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 10 19
*sym_a == *sym_b
10 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 10 20
*sym_a == *sym_b
10 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 10 21
*sym_a == *sym_b
10 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 10 22
*sym_a == *sym_b
10 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 10 23
*sym_a == *sym_b
10 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 10 24
*sym_a == *sym_b
10 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 10 25
*sym_a == *sym_b
10 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 10 26
*sym_a == *sym_b
10 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 10 27
*sym_a == *sym_b
10 a->is_NOT_write()
27 b->is_NOT_write()
i 11
sym_a = _in
irtools.cc j 11
sym_b = _in
irtools.cc ij 11 11
*sym_a == *sym_b
11 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _in
irtools.cc ij 11 12
*sym_a == *sym_b
11 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 11 13
*sym_a == *sym_b
11 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 11 14
*sym_a == *sym_b
11 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 11 15
*sym_a == *sym_b
11 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 11 16
*sym_a == *sym_b
11 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 11 17
*sym_a == *sym_b
11 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 11 18
*sym_a == *sym_b
11 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 11 19
*sym_a == *sym_b
11 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 11 20
*sym_a == *sym_b
11 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 11 21
*sym_a == *sym_b
11 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 11 22
*sym_a == *sym_b
11 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 11 23
*sym_a == *sym_b
11 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 11 24
*sym_a == *sym_b
11 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 11 25
*sym_a == *sym_b
11 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 11 26
*sym_a == *sym_b
11 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 11 27
*sym_a == *sym_b
11 a->is_NOT_write()
27 b->is_NOT_write()
i 12
sym_a = _in
irtools.cc j 12
sym_b = _in
irtools.cc ij 12 12
*sym_a == *sym_b
12 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _in
irtools.cc ij 12 13
*sym_a == *sym_b
12 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 12 14
*sym_a == *sym_b
12 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 12 15
*sym_a == *sym_b
12 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 12 16
*sym_a == *sym_b
12 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 12 17
*sym_a == *sym_b
12 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 12 18
*sym_a == *sym_b
12 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 12 19
*sym_a == *sym_b
12 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 12 20
*sym_a == *sym_b
12 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 12 21
*sym_a == *sym_b
12 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 12 22
*sym_a == *sym_b
12 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 12 23
*sym_a == *sym_b
12 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 12 24
*sym_a == *sym_b
12 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 12 25
*sym_a == *sym_b
12 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 12 26
*sym_a == *sym_b
12 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 12 27
*sym_a == *sym_b
12 a->is_NOT_write()
27 b->is_NOT_write()
i 13
sym_a = _in
irtools.cc j 13
sym_b = _in
irtools.cc ij 13 13
*sym_a == *sym_b
13 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _in
irtools.cc ij 13 14
*sym_a == *sym_b
13 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 13 15
*sym_a == *sym_b
13 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 13 16
*sym_a == *sym_b
13 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 13 17
*sym_a == *sym_b
13 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 13 18
*sym_a == *sym_b
13 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 13 19
*sym_a == *sym_b
13 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 13 20
*sym_a == *sym_b
13 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 13 21
*sym_a == *sym_b
13 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 13 22
*sym_a == *sym_b
13 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 13 23
*sym_a == *sym_b
13 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 13 24
*sym_a == *sym_b
13 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 13 25
*sym_a == *sym_b
13 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 13 26
*sym_a == *sym_b
13 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 13 27
*sym_a == *sym_b
13 a->is_NOT_write()
27 b->is_NOT_write()
i 14
sym_a = _in
irtools.cc j 14
sym_b = _in
irtools.cc ij 14 14
*sym_a == *sym_b
14 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _in
irtools.cc ij 14 15
*sym_a == *sym_b
14 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 14 16
*sym_a == *sym_b
14 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 14 17
*sym_a == *sym_b
14 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 14 18
*sym_a == *sym_b
14 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 14 19
*sym_a == *sym_b
14 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 14 20
*sym_a == *sym_b
14 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 14 21
*sym_a == *sym_b
14 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 14 22
*sym_a == *sym_b
14 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 14 23
*sym_a == *sym_b
14 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 14 24
*sym_a == *sym_b
14 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 14 25
*sym_a == *sym_b
14 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 14 26
*sym_a == *sym_b
14 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 14 27
*sym_a == *sym_b
14 a->is_NOT_write()
27 b->is_NOT_write()
i 15
sym_a = _in
irtools.cc j 15
sym_b = _in
irtools.cc ij 15 15
*sym_a == *sym_b
15 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _in
irtools.cc ij 15 16
*sym_a == *sym_b
15 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 15 17
*sym_a == *sym_b
15 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 15 18
*sym_a == *sym_b
15 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 15 19
*sym_a == *sym_b
15 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 15 20
*sym_a == *sym_b
15 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 15 21
*sym_a == *sym_b
15 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 15 22
*sym_a == *sym_b
15 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 15 23
*sym_a == *sym_b
15 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 15 24
*sym_a == *sym_b
15 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 15 25
*sym_a == *sym_b
15 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 15 26
*sym_a == *sym_b
15 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 15 27
*sym_a == *sym_b
15 a->is_NOT_write()
27 b->is_NOT_write()
i 16
sym_a = _in
irtools.cc j 16
sym_b = _in
irtools.cc ij 16 16
*sym_a == *sym_b
16 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _in
irtools.cc ij 16 17
*sym_a == *sym_b
16 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 16 18
*sym_a == *sym_b
16 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 16 19
*sym_a == *sym_b
16 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 16 20
*sym_a == *sym_b
16 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 16 21
*sym_a == *sym_b
16 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 16 22
*sym_a == *sym_b
16 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 16 23
*sym_a == *sym_b
16 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 16 24
*sym_a == *sym_b
16 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 16 25
*sym_a == *sym_b
16 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 16 26
*sym_a == *sym_b
16 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 16 27
*sym_a == *sym_b
16 a->is_NOT_write()
27 b->is_NOT_write()
i 17
sym_a = _in
irtools.cc j 17
sym_b = _in
irtools.cc ij 17 17
*sym_a == *sym_b
17 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _in
irtools.cc ij 17 18
*sym_a == *sym_b
17 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 17 19
*sym_a == *sym_b
17 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 17 20
*sym_a == *sym_b
17 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 17 21
*sym_a == *sym_b
17 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 17 22
*sym_a == *sym_b
17 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 17 23
*sym_a == *sym_b
17 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 17 24
*sym_a == *sym_b
17 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 17 25
*sym_a == *sym_b
17 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 17 26
*sym_a == *sym_b
17 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 17 27
*sym_a == *sym_b
17 a->is_NOT_write()
27 b->is_NOT_write()
i 18
sym_a = _in
irtools.cc j 18
sym_b = _in
irtools.cc ij 18 18
*sym_a == *sym_b
18 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _in
irtools.cc ij 18 19
*sym_a == *sym_b
18 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 18 20
*sym_a == *sym_b
18 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 18 21
*sym_a == *sym_b
18 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 18 22
*sym_a == *sym_b
18 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 18 23
*sym_a == *sym_b
18 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 18 24
*sym_a == *sym_b
18 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 18 25
*sym_a == *sym_b
18 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 18 26
*sym_a == *sym_b
18 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 18 27
*sym_a == *sym_b
18 a->is_NOT_write()
27 b->is_NOT_write()
i 19
sym_a = _in
irtools.cc j 19
sym_b = _in
irtools.cc ij 19 19
*sym_a == *sym_b
19 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _in
irtools.cc ij 19 20
*sym_a == *sym_b
19 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 19 21
*sym_a == *sym_b
19 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 19 22
*sym_a == *sym_b
19 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 19 23
*sym_a == *sym_b
19 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 19 24
*sym_a == *sym_b
19 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 19 25
*sym_a == *sym_b
19 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 19 26
*sym_a == *sym_b
19 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 19 27
*sym_a == *sym_b
19 a->is_NOT_write()
27 b->is_NOT_write()
i 20
sym_a = _in
irtools.cc j 20
sym_b = _in
irtools.cc ij 20 20
*sym_a == *sym_b
20 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _in
irtools.cc ij 20 21
*sym_a == *sym_b
20 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 20 22
*sym_a == *sym_b
20 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 20 23
*sym_a == *sym_b
20 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 20 24
*sym_a == *sym_b
20 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 20 25
*sym_a == *sym_b
20 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 20 26
*sym_a == *sym_b
20 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 20 27
*sym_a == *sym_b
20 a->is_NOT_write()
27 b->is_NOT_write()
i 21
sym_a = _in
irtools.cc j 21
sym_b = _in
irtools.cc ij 21 21
*sym_a == *sym_b
21 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _in
irtools.cc ij 21 22
*sym_a == *sym_b
21 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 21 23
*sym_a == *sym_b
21 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 21 24
*sym_a == *sym_b
21 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 21 25
*sym_a == *sym_b
21 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 21 26
*sym_a == *sym_b
21 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 21 27
*sym_a == *sym_b
21 a->is_NOT_write()
27 b->is_NOT_write()
i 22
sym_a = _in
irtools.cc j 22
sym_b = _in
irtools.cc ij 22 22
*sym_a == *sym_b
22 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _in
irtools.cc ij 22 23
*sym_a == *sym_b
22 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 22 24
*sym_a == *sym_b
22 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 22 25
*sym_a == *sym_b
22 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 22 26
*sym_a == *sym_b
22 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 22 27
*sym_a == *sym_b
22 a->is_NOT_write()
27 b->is_NOT_write()
i 23
sym_a = _in
irtools.cc j 23
sym_b = _in
irtools.cc ij 23 23
*sym_a == *sym_b
23 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _in
irtools.cc ij 23 24
*sym_a == *sym_b
23 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 23 25
*sym_a == *sym_b
23 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 23 26
*sym_a == *sym_b
23 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 23 27
*sym_a == *sym_b
23 a->is_NOT_write()
27 b->is_NOT_write()
i 24
sym_a = _in
irtools.cc j 24
sym_b = _in
irtools.cc ij 24 24
*sym_a == *sym_b
24 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _in
irtools.cc ij 24 25
*sym_a == *sym_b
24 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 24 26
*sym_a == *sym_b
24 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 24 27
*sym_a == *sym_b
24 a->is_NOT_write()
27 b->is_NOT_write()
i 25
sym_a = _in
irtools.cc j 25
sym_b = _in
irtools.cc ij 25 25
*sym_a == *sym_b
25 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _in
irtools.cc ij 25 26
*sym_a == *sym_b
25 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 25 27
*sym_a == *sym_b
25 a->is_NOT_write()
27 b->is_NOT_write()
i 26
sym_a = _in
irtools.cc j 26
sym_b = _in
irtools.cc ij 26 26
*sym_a == *sym_b
26 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _in
irtools.cc ij 26 27
*sym_a == *sym_b
26 a->is_NOT_write()
27 b->is_NOT_write()
i 27
sym_a = _in
irtools.cc j 27
sym_b = _in
irtools.cc ij 27 27
*sym_a == *sym_b
27 a->is_NOT_write()
27 b->is_NOT_write()
LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0
j 1

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))
repr2   _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))

28 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[3] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[4] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[5] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[6] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[7] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[8] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[9] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[10] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[11] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[12] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[13] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[14] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[15] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[16] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[17] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[18] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[19] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[20] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[21] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[22] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[23] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[24] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[25] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[26] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[27] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))

3 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e103,e104 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e103,e104 : ( k = e103 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e103,e104 : ( k = e103 && k' = e104 && e104 = e103 )) and exists ( e105,e106 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e103,e104 : ( k = e103 && k' = e104 && e104 = e103 )) and exists ( e105,e106 : ( j = e105 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e103,e104 : ( k = e103 && k' = e104 && e104 = e103 )) and exists ( e105,e106 : ( j = e105 && j' = e106 && e106 = e105 )) and exists ( e107,e108 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e103,e104 : ( k = e103 && k' = e104 && e104 = e103 )) and exists ( e105,e106 : ( j = e105 && j' = e106 && e106 = e105 )) and exists ( e107,e108 : ( i = e107 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e103,e104 : ( k = e103 && k' = e104 && e104 = e103 )) and exists ( e105,e106 : ( j = e105 && j' = e106 && e106 = e105 )) and exists ( e107,e108 : ( i = e107 && i' = e108 && e108 = e107 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _out  ADDING A DEPENDENCE OF TYPE DEP_W2W to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _out

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _out
symbol _out  HAS A left  DEPENDENCE OF TYPE DEP_W2W
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e109,e110 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e109,e110 : ( k = e109 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e109,e110 : ( k = e109 && k' = e110 && e110 = e109 )) and exists ( e111,e112 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e109,e110 : ( k = e109 && k' = e110 && e110 = e109 )) and exists ( e111,e112 : ( j = e111 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e109,e110 : ( k = e109 && k' = e110 && e110 = e109 )) and exists ( e111,e112 : ( j = e111 && j' = e112 && e112 = e111 )) and exists ( e113,e114 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e109,e110 : ( k = e109 && k' = e110 && e110 = e109 )) and exists ( e111,e112 : ( j = e111 && j' = e112 && e112 = e111 )) and exists ( e113,e114 : ( i = e113 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e109,e110 : ( k = e109 && k' = e110 && e110 = e109 )) and exists ( e111,e112 : ( j = e111 && j' = e112 && e112 = e111 )) and exists ( e113,e114 : ( i = e113 && i' = e114 && e114 = e113 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _out  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _out

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _out
symbol _out  HAS A left  DEPENDENCE OF TYPE DEP_W2R
i 1
i 2
i 3
i 4
i 5
i 6
i 7
i 8
i 9
i 10
i 11
i 12
i 13
i 14
i 15
i 16
i 17
i 18
i 19
i 20
i 21
i 22
i 23
i 24
i 25
i 26
i 27
LEAVING test_data_dependences()  first size 2    second size 0

dv.first.size() 2
k1 0
k1 1
j 2

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))
repr2   _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))

28 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[3] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[4] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[5] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[6] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[7] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[8] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[9] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[10] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[11] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[12] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[13] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[14] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[15] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[16] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[17] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[18] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[19] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[20] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[21] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[22] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[23] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[24] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[25] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[26] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[27] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))

5 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _lambda is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_lambda' write 0

ref[3] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[4] _rhs is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_rhs' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e115,e116 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e115,e116 : ( k = e115 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e115,e116 : ( k = e115 && k' = e116 && e116 = e115 )) and exists ( e117,e118 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e115,e116 : ( k = e115 && k' = e116 && e116 = e115 )) and exists ( e117,e118 : ( j = e117 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e115,e116 : ( k = e115 && k' = e116 && e116 = e115 )) and exists ( e117,e118 : ( j = e117 && j' = e118 && e118 = e117 )) and exists ( e119,e120 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e115,e116 : ( k = e115 && k' = e116 && e116 = e115 )) and exists ( e117,e118 : ( j = e117 && j' = e118 && e118 = e117 )) and exists ( e119,e120 : ( i = e119 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e115,e116 : ( k = e115 && k' = e116 && e116 = e115 )) and exists ( e117,e118 : ( j = e117 && j' = e118 && e118 = e117 )) and exists ( e119,e120 : ( i = e119 && i' = e120 && e120 = e119 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _out  ADDING A DEPENDENCE OF TYPE DEP_W2W to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _out

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _out
symbol _out  HAS A left  DEPENDENCE OF TYPE DEP_W2W
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e121,e122 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e121,e122 : ( k = e121 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e121,e122 : ( k = e121 && k' = e122 && e122 = e121 )) and exists ( e123,e124 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e121,e122 : ( k = e121 && k' = e122 && e122 = e121 )) and exists ( e123,e124 : ( j = e123 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e121,e122 : ( k = e121 && k' = e122 && e122 = e121 )) and exists ( e123,e124 : ( j = e123 && j' = e124 && e124 = e123 )) and exists ( e125,e126 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e121,e122 : ( k = e121 && k' = e122 && e122 = e121 )) and exists ( e123,e124 : ( j = e123 && j' = e124 && e124 = e123 )) and exists ( e125,e126 : ( i = e125 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e121,e122 : ( k = e121 && k' = e122 && e122 = e121 )) and exists ( e123,e124 : ( j = e123 && j' = e124 && e124 = e123 )) and exists ( e125,e126 : ( i = e125 && i' = e126 && e126 = e125 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _out  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _out

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _out
symbol _out  HAS A left  DEPENDENCE OF TYPE DEP_W2R
i 1
i 2
i 3
i 4
i 5
i 6
i 7
i 8
i 9
i 10
i 11
i 12
i 13
i 14
i 15
i 16
i 17
i 18
i 19
i 20
i 21
i 22
i 23
i 24
i 25
i 26
i 27
LEAVING test_data_dependences()  first size 2    second size 0

dv.first.size() 2
k1 0
k1 1
j 3

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))
repr2   _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))

28 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[3] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[4] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[5] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[6] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[7] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[8] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[9] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[10] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[11] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[12] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[13] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[14] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[15] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[16] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[17] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[18] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[19] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[20] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[21] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[22] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[23] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[24] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[25] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[26] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[27] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))

28 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[3] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[4] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[5] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[6] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[7] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[8] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[9] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[10] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[11] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[12] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[13] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[14] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[15] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[16] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[17] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[18] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[19] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[20] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[21] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[22] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[23] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[24] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[25] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[26] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[27] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e127,e128 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e127,e128 : ( k = e127 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e127,e128 : ( k = e127 && k' = e128 && e128 = e127 )) and exists ( e129,e130 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e127,e128 : ( k = e127 && k' = e128 && e128 = e127 )) and exists ( e129,e130 : ( j = e129 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e127,e128 : ( k = e127 && k' = e128 && e128 = e127 )) and exists ( e129,e130 : ( j = e129 && j' = e130 && e130 = e129 )) and exists ( e131,e132 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e127,e128 : ( k = e127 && k' = e128 && e128 = e127 )) and exists ( e129,e130 : ( j = e129 && j' = e130 && e130 = e129 )) and exists ( e131,e132 : ( i = e131 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e127,e128 : ( k = e127 && k' = e128 && e128 = e127 )) and exists ( e129,e130 : ( j = e129 && j' = e130 && e130 = e129 )) and exists ( e131,e132 : ( i = e131 && i' = e132 && e132 = e131 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e133,e134 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e133,e134 : ( k = e133 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e133,e134 : ( k = e133 and exists ( e135,e136 : ( e135 = e134+e136 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e133,e134 : ( k = e133 and exists ( e135,e136 : ( e135 = e134+e136 && k' = e135 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e133,e134 : ( k = e133 && e134 = e133 and exists ( e135,e136 : ( e135 = e134+e136 && k' = e135 && 1 = e136 )) )) and exists ( e137,e138 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e133,e134 : ( k = e133 && e134 = e133 and exists ( e135,e136 : ( e135 = e134+e136 && k' = e135 && 1 = e136 )) )) and exists ( e137,e138 : ( j = e137 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e133,e134 : ( k = e133 && e134 = e133 and exists ( e135,e136 : ( e135 = e134+e136 && k' = e135 && 1 = e136 )) )) and exists ( e137,e138 : ( j = e137 && j' = e138 && e138 = e137 )) and exists ( e139,e140 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e133,e134 : ( k = e133 && e134 = e133 and exists ( e135,e136 : ( e135 = e134+e136 && k' = e135 && 1 = e136 )) )) and exists ( e137,e138 : ( j = e137 && j' = e138 && e138 = e137 )) and exists ( e139,e140 : ( i = e139 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e133,e134 : ( k = e133 && e134 = e133 and exists ( e135,e136 : ( e135 = e134+e136 && k' = e135 && 1 = e136 )) )) and exists ( e137,e138 : ( j = e137 && j' = e138 && e138 = e137 )) and exists ( e139,e140 : ( i = e139 && i' = e140 && e140 = e139 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e141,e142 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e141,e142 : ( k = e141 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e141,e142 : ( k = e141 && k' = e142 && e142 = e141 )) and exists ( e143,e144 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e141,e142 : ( k = e141 && k' = e142 && e142 = e141 )) and exists ( e143,e144 : ( j = e143 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e141,e142 : ( k = e141 && k' = e142 && e142 = e141 )) and exists ( e143,e144 : ( j = e143 and exists ( e145,e146 : ( e145 = e144+e146 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e141,e142 : ( k = e141 && k' = e142 && e142 = e141 )) and exists ( e143,e144 : ( j = e143 and exists ( e145,e146 : ( e145 = e144+e146 && j' = e145 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e141,e142 : ( k = e141 && k' = e142 && e142 = e141 )) and exists ( e143,e144 : ( j = e143 && e144 = e143 and exists ( e145,e146 : ( e145 = e144+e146 && j' = e145 && 1 = e146 )) )) and exists ( e147,e148 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e141,e142 : ( k = e141 && k' = e142 && e142 = e141 )) and exists ( e143,e144 : ( j = e143 && e144 = e143 and exists ( e145,e146 : ( e145 = e144+e146 && j' = e145 && 1 = e146 )) )) and exists ( e147,e148 : ( i = e147 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e141,e142 : ( k = e141 && k' = e142 && e142 = e141 )) and exists ( e143,e144 : ( j = e143 && e144 = e143 and exists ( e145,e146 : ( e145 = e144+e146 && j' = e145 && 1 = e146 )) )) and exists ( e147,e148 : ( i = e147 && i' = e148 && e148 = e147 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e149,e150 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e149,e150 : ( k = e149 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e149,e150 : ( k = e149 && k' = e150 && e150 = e149 )) and exists ( e151,e152 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e149,e150 : ( k = e149 && k' = e150 && e150 = e149 )) and exists ( e151,e152 : ( j = e151 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e149,e150 : ( k = e149 && k' = e150 && e150 = e149 )) and exists ( e151,e152 : ( j = e151 and exists ( e153,e154 : ( e153+e154 = e152 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e149,e150 : ( k = e149 && k' = e150 && e150 = e149 )) and exists ( e151,e152 : ( j = e151 and exists ( e153,e154 : ( e153+e154 = e152 && j' = e153 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e149,e150 : ( k = e149 && k' = e150 && e150 = e149 )) and exists ( e151,e152 : ( j = e151 && e152 = e151 and exists ( e153,e154 : ( e153+e154 = e152 && j' = e153 && 1 = e154 )) )) and exists ( e155,e156 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e149,e150 : ( k = e149 && k' = e150 && e150 = e149 )) and exists ( e151,e152 : ( j = e151 && e152 = e151 and exists ( e153,e154 : ( e153+e154 = e152 && j' = e153 && 1 = e154 )) )) and exists ( e155,e156 : ( i = e155 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e149,e150 : ( k = e149 && k' = e150 && e150 = e149 )) and exists ( e151,e152 : ( j = e151 && e152 = e151 and exists ( e153,e154 : ( e153+e154 = e152 && j' = e153 && 1 = e154 )) )) and exists ( e155,e156 : ( i = e155 && i' = e156 && e156 = e155 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e157,e158 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e157,e158 : ( k = e157 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e157,e158 : ( k = e157 and exists ( e159,e160 : ( e159+e160 = e158 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e157,e158 : ( k = e157 and exists ( e159,e160 : ( e159+e160 = e158 && k' = e159 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e157,e158 : ( k = e157 && e158 = e157 and exists ( e159,e160 : ( e159+e160 = e158 && k' = e159 && 1 = e160 )) )) and exists ( e161,e162 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e157,e158 : ( k = e157 && e158 = e157 and exists ( e159,e160 : ( e159+e160 = e158 && k' = e159 && 1 = e160 )) )) and exists ( e161,e162 : ( j = e161 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e157,e158 : ( k = e157 && e158 = e157 and exists ( e159,e160 : ( e159+e160 = e158 && k' = e159 && 1 = e160 )) )) and exists ( e161,e162 : ( j = e161 && j' = e162 && e162 = e161 )) and exists ( e163,e164 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e157,e158 : ( k = e157 && e158 = e157 and exists ( e159,e160 : ( e159+e160 = e158 && k' = e159 && 1 = e160 )) )) and exists ( e161,e162 : ( j = e161 && j' = e162 && e162 = e161 )) and exists ( e163,e164 : ( i = e163 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e157,e158 : ( k = e157 && e158 = e157 and exists ( e159,e160 : ( e159+e160 = e158 && k' = e159 && 1 = e160 )) )) and exists ( e161,e162 : ( j = e161 && j' = e162 && e162 = e161 )) and exists ( e163,e164 : ( i = e163 && i' = e164 && e164 = e163 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e165,e166 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e165,e166 : ( k = e165 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e165,e166 : ( k = e165 && k' = e166 && e166 = e165 )) and exists ( e167,e168 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e165,e166 : ( k = e165 && k' = e166 && e166 = e165 )) and exists ( e167,e168 : ( j = e167 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e165,e166 : ( k = e165 && k' = e166 && e166 = e165 )) and exists ( e167,e168 : ( j = e167 && j' = e168 && e168 = e167 )) and exists ( e169,e170 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e165,e166 : ( k = e165 && k' = e166 && e166 = e165 )) and exists ( e167,e168 : ( j = e167 && j' = e168 && e168 = e167 )) and exists ( e169,e170 : ( i = e169 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e165,e166 : ( k = e165 && k' = e166 && e166 = e165 )) and exists ( e167,e168 : ( j = e167 && j' = e168 && e168 = e167 )) and exists ( e169,e170 : ( i = e169 and exists ( e171,e172 : ( e171 = e170+e172 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e165,e166 : ( k = e165 && k' = e166 && e166 = e165 )) and exists ( e167,e168 : ( j = e167 && j' = e168 && e168 = e167 )) and exists ( e169,e170 : ( i = e169 and exists ( e171,e172 : ( e171 = e170+e172 && i' = e171 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e165,e166 : ( k = e165 && k' = e166 && e166 = e165 )) and exists ( e167,e168 : ( j = e167 && j' = e168 && e168 = e167 )) and exists ( e169,e170 : ( i = e169 && e170 = e169 and exists ( e171,e172 : ( e171 = e170+e172 && i' = e171 && 1 = e172 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e173,e174 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e173,e174 : ( k = e173 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e173,e174 : ( k = e173 && k' = e174 && e174 = e173 )) and exists ( e175,e176 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e173,e174 : ( k = e173 && k' = e174 && e174 = e173 )) and exists ( e175,e176 : ( j = e175 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e173,e174 : ( k = e173 && k' = e174 && e174 = e173 )) and exists ( e175,e176 : ( j = e175 && j' = e176 && e176 = e175 )) and exists ( e177,e178 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e173,e174 : ( k = e173 && k' = e174 && e174 = e173 )) and exists ( e175,e176 : ( j = e175 && j' = e176 && e176 = e175 )) and exists ( e177,e178 : ( i = e177 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e173,e174 : ( k = e173 && k' = e174 && e174 = e173 )) and exists ( e175,e176 : ( j = e175 && j' = e176 && e176 = e175 )) and exists ( e177,e178 : ( i = e177 and exists ( e179,e180 : ( e179+e180 = e178 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e173,e174 : ( k = e173 && k' = e174 && e174 = e173 )) and exists ( e175,e176 : ( j = e175 && j' = e176 && e176 = e175 )) and exists ( e177,e178 : ( i = e177 and exists ( e179,e180 : ( e179+e180 = e178 && i' = e179 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e173,e174 : ( k = e173 && k' = e174 && e174 = e173 )) and exists ( e175,e176 : ( j = e175 && j' = e176 && e176 = e175 )) and exists ( e177,e178 : ( i = e177 && e178 = e177 and exists ( e179,e180 : ( e179+e180 = e178 && i' = e179 && 1 = e180 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e181,e182 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e181,e182 : ( k = e181 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e181,e182 : ( k = e181 and exists ( e183,e184 : ( e183 = e182+e184 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e181,e182 : ( k = e181 and exists ( e183,e184 : ( e183 = e182+e184 && k' = e183 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e181,e182 : ( k = e181 && e182 = e181 and exists ( e183,e184 : ( e183 = e182+e184 && k' = e183 && 1 = e184 )) )) and exists ( e185,e186 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e181,e182 : ( k = e181 && e182 = e181 and exists ( e183,e184 : ( e183 = e182+e184 && k' = e183 && 1 = e184 )) )) and exists ( e185,e186 : ( j = e185 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e181,e182 : ( k = e181 && e182 = e181 and exists ( e183,e184 : ( e183 = e182+e184 && k' = e183 && 1 = e184 )) )) and exists ( e185,e186 : ( j = e185 && j' = e186 && e186 = e185 )) and exists ( e187,e188 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e181,e182 : ( k = e181 && e182 = e181 and exists ( e183,e184 : ( e183 = e182+e184 && k' = e183 && 1 = e184 )) )) and exists ( e185,e186 : ( j = e185 && j' = e186 && e186 = e185 )) and exists ( e187,e188 : ( i = e187 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e181,e182 : ( k = e181 && e182 = e181 and exists ( e183,e184 : ( e183 = e182+e184 && k' = e183 && 1 = e184 )) )) and exists ( e185,e186 : ( j = e185 && j' = e186 && e186 = e185 )) and exists ( e187,e188 : ( i = e187 and exists ( e189,e190 : ( e189 = e188+e190 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e181,e182 : ( k = e181 && e182 = e181 and exists ( e183,e184 : ( e183 = e182+e184 && k' = e183 && 1 = e184 )) )) and exists ( e185,e186 : ( j = e185 && j' = e186 && e186 = e185 )) and exists ( e187,e188 : ( i = e187 and exists ( e189,e190 : ( e189 = e188+e190 && i' = e189 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e181,e182 : ( k = e181 && e182 = e181 and exists ( e183,e184 : ( e183 = e182+e184 && k' = e183 && 1 = e184 )) )) and exists ( e185,e186 : ( j = e185 && j' = e186 && e186 = e185 )) and exists ( e187,e188 : ( i = e187 && e188 = e187 and exists ( e189,e190 : ( e189 = e188+e190 && i' = e189 && 1 = e190 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e191,e192 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e191,e192 : ( k = e191 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e191,e192 : ( k = e191 && k' = e192 && e192 = e191 )) and exists ( e193,e194 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e191,e192 : ( k = e191 && k' = e192 && e192 = e191 )) and exists ( e193,e194 : ( j = e193 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e191,e192 : ( k = e191 && k' = e192 && e192 = e191 )) and exists ( e193,e194 : ( j = e193 and exists ( e195,e196 : ( e195 = e194+e196 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e191,e192 : ( k = e191 && k' = e192 && e192 = e191 )) and exists ( e193,e194 : ( j = e193 and exists ( e195,e196 : ( e195 = e194+e196 && j' = e195 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e191,e192 : ( k = e191 && k' = e192 && e192 = e191 )) and exists ( e193,e194 : ( j = e193 && e194 = e193 and exists ( e195,e196 : ( e195 = e194+e196 && j' = e195 && 1 = e196 )) )) and exists ( e197,e198 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e191,e192 : ( k = e191 && k' = e192 && e192 = e191 )) and exists ( e193,e194 : ( j = e193 && e194 = e193 and exists ( e195,e196 : ( e195 = e194+e196 && j' = e195 && 1 = e196 )) )) and exists ( e197,e198 : ( i = e197 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e191,e192 : ( k = e191 && k' = e192 && e192 = e191 )) and exists ( e193,e194 : ( j = e193 && e194 = e193 and exists ( e195,e196 : ( e195 = e194+e196 && j' = e195 && 1 = e196 )) )) and exists ( e197,e198 : ( i = e197 and exists ( e199,e200 : ( e199 = e198+e200 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e191,e192 : ( k = e191 && k' = e192 && e192 = e191 )) and exists ( e193,e194 : ( j = e193 && e194 = e193 and exists ( e195,e196 : ( e195 = e194+e196 && j' = e195 && 1 = e196 )) )) and exists ( e197,e198 : ( i = e197 and exists ( e199,e200 : ( e199 = e198+e200 && i' = e199 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e191,e192 : ( k = e191 && k' = e192 && e192 = e191 )) and exists ( e193,e194 : ( j = e193 && e194 = e193 and exists ( e195,e196 : ( e195 = e194+e196 && j' = e195 && 1 = e196 )) )) and exists ( e197,e198 : ( i = e197 && e198 = e197 and exists ( e199,e200 : ( e199 = e198+e200 && i' = e199 && 1 = e200 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e201,e202 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e201,e202 : ( k = e201 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e201,e202 : ( k = e201 && k' = e202 && e202 = e201 )) and exists ( e203,e204 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e201,e202 : ( k = e201 && k' = e202 && e202 = e201 )) and exists ( e203,e204 : ( j = e203 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e201,e202 : ( k = e201 && k' = e202 && e202 = e201 )) and exists ( e203,e204 : ( j = e203 and exists ( e205,e206 : ( e205+e206 = e204 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e201,e202 : ( k = e201 && k' = e202 && e202 = e201 )) and exists ( e203,e204 : ( j = e203 and exists ( e205,e206 : ( e205+e206 = e204 && j' = e205 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e201,e202 : ( k = e201 && k' = e202 && e202 = e201 )) and exists ( e203,e204 : ( j = e203 && e204 = e203 and exists ( e205,e206 : ( e205+e206 = e204 && j' = e205 && 1 = e206 )) )) and exists ( e207,e208 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e201,e202 : ( k = e201 && k' = e202 && e202 = e201 )) and exists ( e203,e204 : ( j = e203 && e204 = e203 and exists ( e205,e206 : ( e205+e206 = e204 && j' = e205 && 1 = e206 )) )) and exists ( e207,e208 : ( i = e207 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e201,e202 : ( k = e201 && k' = e202 && e202 = e201 )) and exists ( e203,e204 : ( j = e203 && e204 = e203 and exists ( e205,e206 : ( e205+e206 = e204 && j' = e205 && 1 = e206 )) )) and exists ( e207,e208 : ( i = e207 and exists ( e209,e210 : ( e209 = e208+e210 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e201,e202 : ( k = e201 && k' = e202 && e202 = e201 )) and exists ( e203,e204 : ( j = e203 && e204 = e203 and exists ( e205,e206 : ( e205+e206 = e204 && j' = e205 && 1 = e206 )) )) and exists ( e207,e208 : ( i = e207 and exists ( e209,e210 : ( e209 = e208+e210 && i' = e209 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e201,e202 : ( k = e201 && k' = e202 && e202 = e201 )) and exists ( e203,e204 : ( j = e203 && e204 = e203 and exists ( e205,e206 : ( e205+e206 = e204 && j' = e205 && 1 = e206 )) )) and exists ( e207,e208 : ( i = e207 && e208 = e207 and exists ( e209,e210 : ( e209 = e208+e210 && i' = e209 && 1 = e210 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e211,e212 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e211,e212 : ( k = e211 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e211,e212 : ( k = e211 and exists ( e213,e214 : ( e213+e214 = e212 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e211,e212 : ( k = e211 and exists ( e213,e214 : ( e213+e214 = e212 && k' = e213 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e211,e212 : ( k = e211 && e212 = e211 and exists ( e213,e214 : ( e213+e214 = e212 && k' = e213 && 1 = e214 )) )) and exists ( e215,e216 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e211,e212 : ( k = e211 && e212 = e211 and exists ( e213,e214 : ( e213+e214 = e212 && k' = e213 && 1 = e214 )) )) and exists ( e215,e216 : ( j = e215 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e211,e212 : ( k = e211 && e212 = e211 and exists ( e213,e214 : ( e213+e214 = e212 && k' = e213 && 1 = e214 )) )) and exists ( e215,e216 : ( j = e215 && j' = e216 && e216 = e215 )) and exists ( e217,e218 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e211,e212 : ( k = e211 && e212 = e211 and exists ( e213,e214 : ( e213+e214 = e212 && k' = e213 && 1 = e214 )) )) and exists ( e215,e216 : ( j = e215 && j' = e216 && e216 = e215 )) and exists ( e217,e218 : ( i = e217 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e211,e212 : ( k = e211 && e212 = e211 and exists ( e213,e214 : ( e213+e214 = e212 && k' = e213 && 1 = e214 )) )) and exists ( e215,e216 : ( j = e215 && j' = e216 && e216 = e215 )) and exists ( e217,e218 : ( i = e217 and exists ( e219,e220 : ( e219 = e218+e220 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e211,e212 : ( k = e211 && e212 = e211 and exists ( e213,e214 : ( e213+e214 = e212 && k' = e213 && 1 = e214 )) )) and exists ( e215,e216 : ( j = e215 && j' = e216 && e216 = e215 )) and exists ( e217,e218 : ( i = e217 and exists ( e219,e220 : ( e219 = e218+e220 && i' = e219 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e211,e212 : ( k = e211 && e212 = e211 and exists ( e213,e214 : ( e213+e214 = e212 && k' = e213 && 1 = e214 )) )) and exists ( e215,e216 : ( j = e215 && j' = e216 && e216 = e215 )) and exists ( e217,e218 : ( i = e217 && e218 = e217 and exists ( e219,e220 : ( e219 = e218+e220 && i' = e219 && 1 = e220 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e221,e222 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e221,e222 : ( k = e221 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e221,e222 : ( k = e221 and exists ( e223,e224 : ( e223 = e222+e224 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e221,e222 : ( k = e221 and exists ( e223,e224 : ( e223 = e222+e224 && k' = e223 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e221,e222 : ( k = e221 && e222 = e221 and exists ( e223,e224 : ( e223 = e222+e224 && k' = e223 && 1 = e224 )) )) and exists ( e225,e226 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e221,e222 : ( k = e221 && e222 = e221 and exists ( e223,e224 : ( e223 = e222+e224 && k' = e223 && 1 = e224 )) )) and exists ( e225,e226 : ( j = e225 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e221,e222 : ( k = e221 && e222 = e221 and exists ( e223,e224 : ( e223 = e222+e224 && k' = e223 && 1 = e224 )) )) and exists ( e225,e226 : ( j = e225 and exists ( e227,e228 : ( e227 = e226+e228 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e221,e222 : ( k = e221 && e222 = e221 and exists ( e223,e224 : ( e223 = e222+e224 && k' = e223 && 1 = e224 )) )) and exists ( e225,e226 : ( j = e225 and exists ( e227,e228 : ( e227 = e226+e228 && j' = e227 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e221,e222 : ( k = e221 && e222 = e221 and exists ( e223,e224 : ( e223 = e222+e224 && k' = e223 && 1 = e224 )) )) and exists ( e225,e226 : ( j = e225 && e226 = e225 and exists ( e227,e228 : ( e227 = e226+e228 && j' = e227 && 1 = e228 )) )) and exists ( e229,e230 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e221,e222 : ( k = e221 && e222 = e221 and exists ( e223,e224 : ( e223 = e222+e224 && k' = e223 && 1 = e224 )) )) and exists ( e225,e226 : ( j = e225 && e226 = e225 and exists ( e227,e228 : ( e227 = e226+e228 && j' = e227 && 1 = e228 )) )) and exists ( e229,e230 : ( i = e229 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e221,e222 : ( k = e221 && e222 = e221 and exists ( e223,e224 : ( e223 = e222+e224 && k' = e223 && 1 = e224 )) )) and exists ( e225,e226 : ( j = e225 && e226 = e225 and exists ( e227,e228 : ( e227 = e226+e228 && j' = e227 && 1 = e228 )) )) and exists ( e229,e230 : ( i = e229 && i' = e230 && e230 = e229 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e231,e232 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e231,e232 : ( k = e231 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e231,e232 : ( k = e231 and exists ( e233,e234 : ( e233 = e232+e234 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e231,e232 : ( k = e231 and exists ( e233,e234 : ( e233 = e232+e234 && k' = e233 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e231,e232 : ( k = e231 && e232 = e231 and exists ( e233,e234 : ( e233 = e232+e234 && k' = e233 && 1 = e234 )) )) and exists ( e235,e236 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e231,e232 : ( k = e231 && e232 = e231 and exists ( e233,e234 : ( e233 = e232+e234 && k' = e233 && 1 = e234 )) )) and exists ( e235,e236 : ( j = e235 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e231,e232 : ( k = e231 && e232 = e231 and exists ( e233,e234 : ( e233 = e232+e234 && k' = e233 && 1 = e234 )) )) and exists ( e235,e236 : ( j = e235 and exists ( e237,e238 : ( e237+e238 = e236 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e231,e232 : ( k = e231 && e232 = e231 and exists ( e233,e234 : ( e233 = e232+e234 && k' = e233 && 1 = e234 )) )) and exists ( e235,e236 : ( j = e235 and exists ( e237,e238 : ( e237+e238 = e236 && j' = e237 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e231,e232 : ( k = e231 && e232 = e231 and exists ( e233,e234 : ( e233 = e232+e234 && k' = e233 && 1 = e234 )) )) and exists ( e235,e236 : ( j = e235 && e236 = e235 and exists ( e237,e238 : ( e237+e238 = e236 && j' = e237 && 1 = e238 )) )) and exists ( e239,e240 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e231,e232 : ( k = e231 && e232 = e231 and exists ( e233,e234 : ( e233 = e232+e234 && k' = e233 && 1 = e234 )) )) and exists ( e235,e236 : ( j = e235 && e236 = e235 and exists ( e237,e238 : ( e237+e238 = e236 && j' = e237 && 1 = e238 )) )) and exists ( e239,e240 : ( i = e239 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e231,e232 : ( k = e231 && e232 = e231 and exists ( e233,e234 : ( e233 = e232+e234 && k' = e233 && 1 = e234 )) )) and exists ( e235,e236 : ( j = e235 && e236 = e235 and exists ( e237,e238 : ( e237+e238 = e236 && j' = e237 && 1 = e238 )) )) and exists ( e239,e240 : ( i = e239 && i' = e240 && e240 = e239 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e241,e242 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e241,e242 : ( k = e241 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e241,e242 : ( k = e241 and exists ( e243,e244 : ( e243+e244 = e242 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e241,e242 : ( k = e241 and exists ( e243,e244 : ( e243+e244 = e242 && k' = e243 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e241,e242 : ( k = e241 && e242 = e241 and exists ( e243,e244 : ( e243+e244 = e242 && k' = e243 && 1 = e244 )) )) and exists ( e245,e246 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e241,e242 : ( k = e241 && e242 = e241 and exists ( e243,e244 : ( e243+e244 = e242 && k' = e243 && 1 = e244 )) )) and exists ( e245,e246 : ( j = e245 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e241,e242 : ( k = e241 && e242 = e241 and exists ( e243,e244 : ( e243+e244 = e242 && k' = e243 && 1 = e244 )) )) and exists ( e245,e246 : ( j = e245 and exists ( e247,e248 : ( e247 = e246+e248 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e241,e242 : ( k = e241 && e242 = e241 and exists ( e243,e244 : ( e243+e244 = e242 && k' = e243 && 1 = e244 )) )) and exists ( e245,e246 : ( j = e245 and exists ( e247,e248 : ( e247 = e246+e248 && j' = e247 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e241,e242 : ( k = e241 && e242 = e241 and exists ( e243,e244 : ( e243+e244 = e242 && k' = e243 && 1 = e244 )) )) and exists ( e245,e246 : ( j = e245 && e246 = e245 and exists ( e247,e248 : ( e247 = e246+e248 && j' = e247 && 1 = e248 )) )) and exists ( e249,e250 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e241,e242 : ( k = e241 && e242 = e241 and exists ( e243,e244 : ( e243+e244 = e242 && k' = e243 && 1 = e244 )) )) and exists ( e245,e246 : ( j = e245 && e246 = e245 and exists ( e247,e248 : ( e247 = e246+e248 && j' = e247 && 1 = e248 )) )) and exists ( e249,e250 : ( i = e249 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e241,e242 : ( k = e241 && e242 = e241 and exists ( e243,e244 : ( e243+e244 = e242 && k' = e243 && 1 = e244 )) )) and exists ( e245,e246 : ( j = e245 && e246 = e245 and exists ( e247,e248 : ( e247 = e246+e248 && j' = e247 && 1 = e248 )) )) and exists ( e249,e250 : ( i = e249 && i' = e250 && e250 = e249 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e251,e252 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e251,e252 : ( k = e251 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e251,e252 : ( k = e251 and exists ( e253,e254 : ( e253+e254 = e252 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e251,e252 : ( k = e251 and exists ( e253,e254 : ( e253+e254 = e252 && k' = e253 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e251,e252 : ( k = e251 && e252 = e251 and exists ( e253,e254 : ( e253+e254 = e252 && k' = e253 && 1 = e254 )) )) and exists ( e255,e256 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e251,e252 : ( k = e251 && e252 = e251 and exists ( e253,e254 : ( e253+e254 = e252 && k' = e253 && 1 = e254 )) )) and exists ( e255,e256 : ( j = e255 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e251,e252 : ( k = e251 && e252 = e251 and exists ( e253,e254 : ( e253+e254 = e252 && k' = e253 && 1 = e254 )) )) and exists ( e255,e256 : ( j = e255 and exists ( e257,e258 : ( e257+e258 = e256 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e251,e252 : ( k = e251 && e252 = e251 and exists ( e253,e254 : ( e253+e254 = e252 && k' = e253 && 1 = e254 )) )) and exists ( e255,e256 : ( j = e255 and exists ( e257,e258 : ( e257+e258 = e256 && j' = e257 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e251,e252 : ( k = e251 && e252 = e251 and exists ( e253,e254 : ( e253+e254 = e252 && k' = e253 && 1 = e254 )) )) and exists ( e255,e256 : ( j = e255 && e256 = e255 and exists ( e257,e258 : ( e257+e258 = e256 && j' = e257 && 1 = e258 )) )) and exists ( e259,e260 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e251,e252 : ( k = e251 && e252 = e251 and exists ( e253,e254 : ( e253+e254 = e252 && k' = e253 && 1 = e254 )) )) and exists ( e255,e256 : ( j = e255 && e256 = e255 and exists ( e257,e258 : ( e257+e258 = e256 && j' = e257 && 1 = e258 )) )) and exists ( e259,e260 : ( i = e259 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e251,e252 : ( k = e251 && e252 = e251 and exists ( e253,e254 : ( e253+e254 = e252 && k' = e253 && 1 = e254 )) )) and exists ( e255,e256 : ( j = e255 && e256 = e255 and exists ( e257,e258 : ( e257+e258 = e256 && j' = e257 && 1 = e258 )) )) and exists ( e259,e260 : ( i = e259 && i' = e260 && e260 = e259 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e261,e262 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e261,e262 : ( k = e261 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e261,e262 : ( k = e261 and exists ( e263,e264 : ( e263 = e262+e264 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e261,e262 : ( k = e261 and exists ( e263,e264 : ( e263 = e262+e264 && k' = e263 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e261,e262 : ( k = e261 && e262 = e261 and exists ( e263,e264 : ( e263 = e262+e264 && k' = e263 && 1 = e264 )) )) and exists ( e265,e266 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e261,e262 : ( k = e261 && e262 = e261 and exists ( e263,e264 : ( e263 = e262+e264 && k' = e263 && 1 = e264 )) )) and exists ( e265,e266 : ( j = e265 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e261,e262 : ( k = e261 && e262 = e261 and exists ( e263,e264 : ( e263 = e262+e264 && k' = e263 && 1 = e264 )) )) and exists ( e265,e266 : ( j = e265 && j' = e266 && e266 = e265 )) and exists ( e267,e268 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e261,e262 : ( k = e261 && e262 = e261 and exists ( e263,e264 : ( e263 = e262+e264 && k' = e263 && 1 = e264 )) )) and exists ( e265,e266 : ( j = e265 && j' = e266 && e266 = e265 )) and exists ( e267,e268 : ( i = e267 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e261,e262 : ( k = e261 && e262 = e261 and exists ( e263,e264 : ( e263 = e262+e264 && k' = e263 && 1 = e264 )) )) and exists ( e265,e266 : ( j = e265 && j' = e266 && e266 = e265 )) and exists ( e267,e268 : ( i = e267 and exists ( e269,e270 : ( e269+e270 = e268 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e261,e262 : ( k = e261 && e262 = e261 and exists ( e263,e264 : ( e263 = e262+e264 && k' = e263 && 1 = e264 )) )) and exists ( e265,e266 : ( j = e265 && j' = e266 && e266 = e265 )) and exists ( e267,e268 : ( i = e267 and exists ( e269,e270 : ( e269+e270 = e268 && i' = e269 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e261,e262 : ( k = e261 && e262 = e261 and exists ( e263,e264 : ( e263 = e262+e264 && k' = e263 && 1 = e264 )) )) and exists ( e265,e266 : ( j = e265 && j' = e266 && e266 = e265 )) and exists ( e267,e268 : ( i = e267 && e268 = e267 and exists ( e269,e270 : ( e269+e270 = e268 && i' = e269 && 1 = e270 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e271,e272 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e271,e272 : ( k = e271 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e271,e272 : ( k = e271 && k' = e272 && e272 = e271 )) and exists ( e273,e274 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e271,e272 : ( k = e271 && k' = e272 && e272 = e271 )) and exists ( e273,e274 : ( j = e273 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e271,e272 : ( k = e271 && k' = e272 && e272 = e271 )) and exists ( e273,e274 : ( j = e273 and exists ( e275,e276 : ( e275 = e274+e276 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e271,e272 : ( k = e271 && k' = e272 && e272 = e271 )) and exists ( e273,e274 : ( j = e273 and exists ( e275,e276 : ( e275 = e274+e276 && j' = e275 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e271,e272 : ( k = e271 && k' = e272 && e272 = e271 )) and exists ( e273,e274 : ( j = e273 && e274 = e273 and exists ( e275,e276 : ( e275 = e274+e276 && j' = e275 && 1 = e276 )) )) and exists ( e277,e278 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e271,e272 : ( k = e271 && k' = e272 && e272 = e271 )) and exists ( e273,e274 : ( j = e273 && e274 = e273 and exists ( e275,e276 : ( e275 = e274+e276 && j' = e275 && 1 = e276 )) )) and exists ( e277,e278 : ( i = e277 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e271,e272 : ( k = e271 && k' = e272 && e272 = e271 )) and exists ( e273,e274 : ( j = e273 && e274 = e273 and exists ( e275,e276 : ( e275 = e274+e276 && j' = e275 && 1 = e276 )) )) and exists ( e277,e278 : ( i = e277 and exists ( e279,e280 : ( e279+e280 = e278 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e271,e272 : ( k = e271 && k' = e272 && e272 = e271 )) and exists ( e273,e274 : ( j = e273 && e274 = e273 and exists ( e275,e276 : ( e275 = e274+e276 && j' = e275 && 1 = e276 )) )) and exists ( e277,e278 : ( i = e277 and exists ( e279,e280 : ( e279+e280 = e278 && i' = e279 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e271,e272 : ( k = e271 && k' = e272 && e272 = e271 )) and exists ( e273,e274 : ( j = e273 && e274 = e273 and exists ( e275,e276 : ( e275 = e274+e276 && j' = e275 && 1 = e276 )) )) and exists ( e277,e278 : ( i = e277 && e278 = e277 and exists ( e279,e280 : ( e279+e280 = e278 && i' = e279 && 1 = e280 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e281,e282 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e281,e282 : ( k = e281 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e281,e282 : ( k = e281 && k' = e282 && e282 = e281 )) and exists ( e283,e284 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e281,e282 : ( k = e281 && k' = e282 && e282 = e281 )) and exists ( e283,e284 : ( j = e283 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e281,e282 : ( k = e281 && k' = e282 && e282 = e281 )) and exists ( e283,e284 : ( j = e283 and exists ( e285,e286 : ( e285+e286 = e284 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e281,e282 : ( k = e281 && k' = e282 && e282 = e281 )) and exists ( e283,e284 : ( j = e283 and exists ( e285,e286 : ( e285+e286 = e284 && j' = e285 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e281,e282 : ( k = e281 && k' = e282 && e282 = e281 )) and exists ( e283,e284 : ( j = e283 && e284 = e283 and exists ( e285,e286 : ( e285+e286 = e284 && j' = e285 && 1 = e286 )) )) and exists ( e287,e288 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e281,e282 : ( k = e281 && k' = e282 && e282 = e281 )) and exists ( e283,e284 : ( j = e283 && e284 = e283 and exists ( e285,e286 : ( e285+e286 = e284 && j' = e285 && 1 = e286 )) )) and exists ( e287,e288 : ( i = e287 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e281,e282 : ( k = e281 && k' = e282 && e282 = e281 )) and exists ( e283,e284 : ( j = e283 && e284 = e283 and exists ( e285,e286 : ( e285+e286 = e284 && j' = e285 && 1 = e286 )) )) and exists ( e287,e288 : ( i = e287 and exists ( e289,e290 : ( e289+e290 = e288 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e281,e282 : ( k = e281 && k' = e282 && e282 = e281 )) and exists ( e283,e284 : ( j = e283 && e284 = e283 and exists ( e285,e286 : ( e285+e286 = e284 && j' = e285 && 1 = e286 )) )) and exists ( e287,e288 : ( i = e287 and exists ( e289,e290 : ( e289+e290 = e288 && i' = e289 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e281,e282 : ( k = e281 && k' = e282 && e282 = e281 )) and exists ( e283,e284 : ( j = e283 && e284 = e283 and exists ( e285,e286 : ( e285+e286 = e284 && j' = e285 && 1 = e286 )) )) and exists ( e287,e288 : ( i = e287 && e288 = e287 and exists ( e289,e290 : ( e289+e290 = e288 && i' = e289 && 1 = e290 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e291,e292 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e291,e292 : ( k = e291 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e291,e292 : ( k = e291 and exists ( e293,e294 : ( e293+e294 = e292 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e291,e292 : ( k = e291 and exists ( e293,e294 : ( e293+e294 = e292 && k' = e293 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e291,e292 : ( k = e291 && e292 = e291 and exists ( e293,e294 : ( e293+e294 = e292 && k' = e293 && 1 = e294 )) )) and exists ( e295,e296 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e291,e292 : ( k = e291 && e292 = e291 and exists ( e293,e294 : ( e293+e294 = e292 && k' = e293 && 1 = e294 )) )) and exists ( e295,e296 : ( j = e295 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e291,e292 : ( k = e291 && e292 = e291 and exists ( e293,e294 : ( e293+e294 = e292 && k' = e293 && 1 = e294 )) )) and exists ( e295,e296 : ( j = e295 && j' = e296 && e296 = e295 )) and exists ( e297,e298 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e291,e292 : ( k = e291 && e292 = e291 and exists ( e293,e294 : ( e293+e294 = e292 && k' = e293 && 1 = e294 )) )) and exists ( e295,e296 : ( j = e295 && j' = e296 && e296 = e295 )) and exists ( e297,e298 : ( i = e297 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e291,e292 : ( k = e291 && e292 = e291 and exists ( e293,e294 : ( e293+e294 = e292 && k' = e293 && 1 = e294 )) )) and exists ( e295,e296 : ( j = e295 && j' = e296 && e296 = e295 )) and exists ( e297,e298 : ( i = e297 and exists ( e299,e300 : ( e299+e300 = e298 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e291,e292 : ( k = e291 && e292 = e291 and exists ( e293,e294 : ( e293+e294 = e292 && k' = e293 && 1 = e294 )) )) and exists ( e295,e296 : ( j = e295 && j' = e296 && e296 = e295 )) and exists ( e297,e298 : ( i = e297 and exists ( e299,e300 : ( e299+e300 = e298 && i' = e299 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e291,e292 : ( k = e291 && e292 = e291 and exists ( e293,e294 : ( e293+e294 = e292 && k' = e293 && 1 = e294 )) )) and exists ( e295,e296 : ( j = e295 && j' = e296 && e296 = e295 )) and exists ( e297,e298 : ( i = e297 && e298 = e297 and exists ( e299,e300 : ( e299+e300 = e298 && i' = e299 && 1 = e300 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( k = e301 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( k = e301 and exists ( e303,e304 : ( e303 = e302+e304 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( k = e301 and exists ( e303,e304 : ( e303 = e302+e304 && k' = e303 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( k = e301 && e302 = e301 and exists ( e303,e304 : ( e303 = e302+e304 && k' = e303 && 1 = e304 )) )) and exists ( e305,e306 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( k = e301 && e302 = e301 and exists ( e303,e304 : ( e303 = e302+e304 && k' = e303 && 1 = e304 )) )) and exists ( e305,e306 : ( j = e305 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( k = e301 && e302 = e301 and exists ( e303,e304 : ( e303 = e302+e304 && k' = e303 && 1 = e304 )) )) and exists ( e305,e306 : ( j = e305 and exists ( e307,e308 : ( e307 = e306+e308 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( k = e301 && e302 = e301 and exists ( e303,e304 : ( e303 = e302+e304 && k' = e303 && 1 = e304 )) )) and exists ( e305,e306 : ( j = e305 and exists ( e307,e308 : ( e307 = e306+e308 && j' = e307 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( k = e301 && e302 = e301 and exists ( e303,e304 : ( e303 = e302+e304 && k' = e303 && 1 = e304 )) )) and exists ( e305,e306 : ( j = e305 && e306 = e305 and exists ( e307,e308 : ( e307 = e306+e308 && j' = e307 && 1 = e308 )) )) and exists ( e309,e310 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( k = e301 && e302 = e301 and exists ( e303,e304 : ( e303 = e302+e304 && k' = e303 && 1 = e304 )) )) and exists ( e305,e306 : ( j = e305 && e306 = e305 and exists ( e307,e308 : ( e307 = e306+e308 && j' = e307 && 1 = e308 )) )) and exists ( e309,e310 : ( i = e309 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( k = e301 && e302 = e301 and exists ( e303,e304 : ( e303 = e302+e304 && k' = e303 && 1 = e304 )) )) and exists ( e305,e306 : ( j = e305 && e306 = e305 and exists ( e307,e308 : ( e307 = e306+e308 && j' = e307 && 1 = e308 )) )) and exists ( e309,e310 : ( i = e309 and exists ( e311,e312 : ( e311 = e310+e312 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( k = e301 && e302 = e301 and exists ( e303,e304 : ( e303 = e302+e304 && k' = e303 && 1 = e304 )) )) and exists ( e305,e306 : ( j = e305 && e306 = e305 and exists ( e307,e308 : ( e307 = e306+e308 && j' = e307 && 1 = e308 )) )) and exists ( e309,e310 : ( i = e309 and exists ( e311,e312 : ( e311 = e310+e312 && i' = e311 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e301,e302 : ( k = e301 && e302 = e301 and exists ( e303,e304 : ( e303 = e302+e304 && k' = e303 && 1 = e304 )) )) and exists ( e305,e306 : ( j = e305 && e306 = e305 and exists ( e307,e308 : ( e307 = e306+e308 && j' = e307 && 1 = e308 )) )) and exists ( e309,e310 : ( i = e309 && e310 = e309 and exists ( e311,e312 : ( e311 = e310+e312 && i' = e311 && 1 = e312 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( k = e313 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( k = e313 and exists ( e315,e316 : ( e315 = e314+e316 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( k = e313 and exists ( e315,e316 : ( e315 = e314+e316 && k' = e315 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( k = e313 && e314 = e313 and exists ( e315,e316 : ( e315 = e314+e316 && k' = e315 && 1 = e316 )) )) and exists ( e317,e318 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( k = e313 && e314 = e313 and exists ( e315,e316 : ( e315 = e314+e316 && k' = e315 && 1 = e316 )) )) and exists ( e317,e318 : ( j = e317 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( k = e313 && e314 = e313 and exists ( e315,e316 : ( e315 = e314+e316 && k' = e315 && 1 = e316 )) )) and exists ( e317,e318 : ( j = e317 and exists ( e319,e320 : ( e319+e320 = e318 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( k = e313 && e314 = e313 and exists ( e315,e316 : ( e315 = e314+e316 && k' = e315 && 1 = e316 )) )) and exists ( e317,e318 : ( j = e317 and exists ( e319,e320 : ( e319+e320 = e318 && j' = e319 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( k = e313 && e314 = e313 and exists ( e315,e316 : ( e315 = e314+e316 && k' = e315 && 1 = e316 )) )) and exists ( e317,e318 : ( j = e317 && e318 = e317 and exists ( e319,e320 : ( e319+e320 = e318 && j' = e319 && 1 = e320 )) )) and exists ( e321,e322 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( k = e313 && e314 = e313 and exists ( e315,e316 : ( e315 = e314+e316 && k' = e315 && 1 = e316 )) )) and exists ( e317,e318 : ( j = e317 && e318 = e317 and exists ( e319,e320 : ( e319+e320 = e318 && j' = e319 && 1 = e320 )) )) and exists ( e321,e322 : ( i = e321 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( k = e313 && e314 = e313 and exists ( e315,e316 : ( e315 = e314+e316 && k' = e315 && 1 = e316 )) )) and exists ( e317,e318 : ( j = e317 && e318 = e317 and exists ( e319,e320 : ( e319+e320 = e318 && j' = e319 && 1 = e320 )) )) and exists ( e321,e322 : ( i = e321 and exists ( e323,e324 : ( e323 = e322+e324 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( k = e313 && e314 = e313 and exists ( e315,e316 : ( e315 = e314+e316 && k' = e315 && 1 = e316 )) )) and exists ( e317,e318 : ( j = e317 && e318 = e317 and exists ( e319,e320 : ( e319+e320 = e318 && j' = e319 && 1 = e320 )) )) and exists ( e321,e322 : ( i = e321 and exists ( e323,e324 : ( e323 = e322+e324 && i' = e323 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e313,e314 : ( k = e313 && e314 = e313 and exists ( e315,e316 : ( e315 = e314+e316 && k' = e315 && 1 = e316 )) )) and exists ( e317,e318 : ( j = e317 && e318 = e317 and exists ( e319,e320 : ( e319+e320 = e318 && j' = e319 && 1 = e320 )) )) and exists ( e321,e322 : ( i = e321 && e322 = e321 and exists ( e323,e324 : ( e323 = e322+e324 && i' = e323 && 1 = e324 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( k = e325 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( k = e325 and exists ( e327,e328 : ( e327+e328 = e326 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( k = e325 and exists ( e327,e328 : ( e327+e328 = e326 && k' = e327 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( k = e325 && e326 = e325 and exists ( e327,e328 : ( e327+e328 = e326 && k' = e327 && 1 = e328 )) )) and exists ( e329,e330 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( k = e325 && e326 = e325 and exists ( e327,e328 : ( e327+e328 = e326 && k' = e327 && 1 = e328 )) )) and exists ( e329,e330 : ( j = e329 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( k = e325 && e326 = e325 and exists ( e327,e328 : ( e327+e328 = e326 && k' = e327 && 1 = e328 )) )) and exists ( e329,e330 : ( j = e329 and exists ( e331,e332 : ( e331 = e330+e332 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( k = e325 && e326 = e325 and exists ( e327,e328 : ( e327+e328 = e326 && k' = e327 && 1 = e328 )) )) and exists ( e329,e330 : ( j = e329 and exists ( e331,e332 : ( e331 = e330+e332 && j' = e331 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( k = e325 && e326 = e325 and exists ( e327,e328 : ( e327+e328 = e326 && k' = e327 && 1 = e328 )) )) and exists ( e329,e330 : ( j = e329 && e330 = e329 and exists ( e331,e332 : ( e331 = e330+e332 && j' = e331 && 1 = e332 )) )) and exists ( e333,e334 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( k = e325 && e326 = e325 and exists ( e327,e328 : ( e327+e328 = e326 && k' = e327 && 1 = e328 )) )) and exists ( e329,e330 : ( j = e329 && e330 = e329 and exists ( e331,e332 : ( e331 = e330+e332 && j' = e331 && 1 = e332 )) )) and exists ( e333,e334 : ( i = e333 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( k = e325 && e326 = e325 and exists ( e327,e328 : ( e327+e328 = e326 && k' = e327 && 1 = e328 )) )) and exists ( e329,e330 : ( j = e329 && e330 = e329 and exists ( e331,e332 : ( e331 = e330+e332 && j' = e331 && 1 = e332 )) )) and exists ( e333,e334 : ( i = e333 and exists ( e335,e336 : ( e335 = e334+e336 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( k = e325 && e326 = e325 and exists ( e327,e328 : ( e327+e328 = e326 && k' = e327 && 1 = e328 )) )) and exists ( e329,e330 : ( j = e329 && e330 = e329 and exists ( e331,e332 : ( e331 = e330+e332 && j' = e331 && 1 = e332 )) )) and exists ( e333,e334 : ( i = e333 and exists ( e335,e336 : ( e335 = e334+e336 && i' = e335 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e325,e326 : ( k = e325 && e326 = e325 and exists ( e327,e328 : ( e327+e328 = e326 && k' = e327 && 1 = e328 )) )) and exists ( e329,e330 : ( j = e329 && e330 = e329 and exists ( e331,e332 : ( e331 = e330+e332 && j' = e331 && 1 = e332 )) )) and exists ( e333,e334 : ( i = e333 && e334 = e333 and exists ( e335,e336 : ( e335 = e334+e336 && i' = e335 && 1 = e336 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( k = e337 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( k = e337 and exists ( e339,e340 : ( e339+e340 = e338 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( k = e337 and exists ( e339,e340 : ( e339+e340 = e338 && k' = e339 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( k = e337 && e338 = e337 and exists ( e339,e340 : ( e339+e340 = e338 && k' = e339 && 1 = e340 )) )) and exists ( e341,e342 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( k = e337 && e338 = e337 and exists ( e339,e340 : ( e339+e340 = e338 && k' = e339 && 1 = e340 )) )) and exists ( e341,e342 : ( j = e341 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( k = e337 && e338 = e337 and exists ( e339,e340 : ( e339+e340 = e338 && k' = e339 && 1 = e340 )) )) and exists ( e341,e342 : ( j = e341 and exists ( e343,e344 : ( e343+e344 = e342 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( k = e337 && e338 = e337 and exists ( e339,e340 : ( e339+e340 = e338 && k' = e339 && 1 = e340 )) )) and exists ( e341,e342 : ( j = e341 and exists ( e343,e344 : ( e343+e344 = e342 && j' = e343 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( k = e337 && e338 = e337 and exists ( e339,e340 : ( e339+e340 = e338 && k' = e339 && 1 = e340 )) )) and exists ( e341,e342 : ( j = e341 && e342 = e341 and exists ( e343,e344 : ( e343+e344 = e342 && j' = e343 && 1 = e344 )) )) and exists ( e345,e346 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( k = e337 && e338 = e337 and exists ( e339,e340 : ( e339+e340 = e338 && k' = e339 && 1 = e340 )) )) and exists ( e341,e342 : ( j = e341 && e342 = e341 and exists ( e343,e344 : ( e343+e344 = e342 && j' = e343 && 1 = e344 )) )) and exists ( e345,e346 : ( i = e345 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( k = e337 && e338 = e337 and exists ( e339,e340 : ( e339+e340 = e338 && k' = e339 && 1 = e340 )) )) and exists ( e341,e342 : ( j = e341 && e342 = e341 and exists ( e343,e344 : ( e343+e344 = e342 && j' = e343 && 1 = e344 )) )) and exists ( e345,e346 : ( i = e345 and exists ( e347,e348 : ( e347 = e346+e348 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( k = e337 && e338 = e337 and exists ( e339,e340 : ( e339+e340 = e338 && k' = e339 && 1 = e340 )) )) and exists ( e341,e342 : ( j = e341 && e342 = e341 and exists ( e343,e344 : ( e343+e344 = e342 && j' = e343 && 1 = e344 )) )) and exists ( e345,e346 : ( i = e345 and exists ( e347,e348 : ( e347 = e346+e348 && i' = e347 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e337,e338 : ( k = e337 && e338 = e337 and exists ( e339,e340 : ( e339+e340 = e338 && k' = e339 && 1 = e340 )) )) and exists ( e341,e342 : ( j = e341 && e342 = e341 and exists ( e343,e344 : ( e343+e344 = e342 && j' = e343 && 1 = e344 )) )) and exists ( e345,e346 : ( i = e345 && e346 = e345 and exists ( e347,e348 : ( e347 = e346+e348 && i' = e347 && 1 = e348 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( k = e349 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( k = e349 and exists ( e351,e352 : ( e351 = e350+e352 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( k = e349 and exists ( e351,e352 : ( e351 = e350+e352 && k' = e351 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( k = e349 && e350 = e349 and exists ( e351,e352 : ( e351 = e350+e352 && k' = e351 && 1 = e352 )) )) and exists ( e353,e354 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( k = e349 && e350 = e349 and exists ( e351,e352 : ( e351 = e350+e352 && k' = e351 && 1 = e352 )) )) and exists ( e353,e354 : ( j = e353 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( k = e349 && e350 = e349 and exists ( e351,e352 : ( e351 = e350+e352 && k' = e351 && 1 = e352 )) )) and exists ( e353,e354 : ( j = e353 and exists ( e355,e356 : ( e355 = e354+e356 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( k = e349 && e350 = e349 and exists ( e351,e352 : ( e351 = e350+e352 && k' = e351 && 1 = e352 )) )) and exists ( e353,e354 : ( j = e353 and exists ( e355,e356 : ( e355 = e354+e356 && j' = e355 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( k = e349 && e350 = e349 and exists ( e351,e352 : ( e351 = e350+e352 && k' = e351 && 1 = e352 )) )) and exists ( e353,e354 : ( j = e353 && e354 = e353 and exists ( e355,e356 : ( e355 = e354+e356 && j' = e355 && 1 = e356 )) )) and exists ( e357,e358 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( k = e349 && e350 = e349 and exists ( e351,e352 : ( e351 = e350+e352 && k' = e351 && 1 = e352 )) )) and exists ( e353,e354 : ( j = e353 && e354 = e353 and exists ( e355,e356 : ( e355 = e354+e356 && j' = e355 && 1 = e356 )) )) and exists ( e357,e358 : ( i = e357 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( k = e349 && e350 = e349 and exists ( e351,e352 : ( e351 = e350+e352 && k' = e351 && 1 = e352 )) )) and exists ( e353,e354 : ( j = e353 && e354 = e353 and exists ( e355,e356 : ( e355 = e354+e356 && j' = e355 && 1 = e356 )) )) and exists ( e357,e358 : ( i = e357 and exists ( e359,e360 : ( e359+e360 = e358 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( k = e349 && e350 = e349 and exists ( e351,e352 : ( e351 = e350+e352 && k' = e351 && 1 = e352 )) )) and exists ( e353,e354 : ( j = e353 && e354 = e353 and exists ( e355,e356 : ( e355 = e354+e356 && j' = e355 && 1 = e356 )) )) and exists ( e357,e358 : ( i = e357 and exists ( e359,e360 : ( e359+e360 = e358 && i' = e359 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e349,e350 : ( k = e349 && e350 = e349 and exists ( e351,e352 : ( e351 = e350+e352 && k' = e351 && 1 = e352 )) )) and exists ( e353,e354 : ( j = e353 && e354 = e353 and exists ( e355,e356 : ( e355 = e354+e356 && j' = e355 && 1 = e356 )) )) and exists ( e357,e358 : ( i = e357 && e358 = e357 and exists ( e359,e360 : ( e359+e360 = e358 && i' = e359 && 1 = e360 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( k = e361 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( k = e361 and exists ( e363,e364 : ( e363 = e362+e364 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( k = e361 and exists ( e363,e364 : ( e363 = e362+e364 && k' = e363 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( k = e361 && e362 = e361 and exists ( e363,e364 : ( e363 = e362+e364 && k' = e363 && 1 = e364 )) )) and exists ( e365,e366 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( k = e361 && e362 = e361 and exists ( e363,e364 : ( e363 = e362+e364 && k' = e363 && 1 = e364 )) )) and exists ( e365,e366 : ( j = e365 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( k = e361 && e362 = e361 and exists ( e363,e364 : ( e363 = e362+e364 && k' = e363 && 1 = e364 )) )) and exists ( e365,e366 : ( j = e365 and exists ( e367,e368 : ( e367+e368 = e366 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( k = e361 && e362 = e361 and exists ( e363,e364 : ( e363 = e362+e364 && k' = e363 && 1 = e364 )) )) and exists ( e365,e366 : ( j = e365 and exists ( e367,e368 : ( e367+e368 = e366 && j' = e367 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( k = e361 && e362 = e361 and exists ( e363,e364 : ( e363 = e362+e364 && k' = e363 && 1 = e364 )) )) and exists ( e365,e366 : ( j = e365 && e366 = e365 and exists ( e367,e368 : ( e367+e368 = e366 && j' = e367 && 1 = e368 )) )) and exists ( e369,e370 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( k = e361 && e362 = e361 and exists ( e363,e364 : ( e363 = e362+e364 && k' = e363 && 1 = e364 )) )) and exists ( e365,e366 : ( j = e365 && e366 = e365 and exists ( e367,e368 : ( e367+e368 = e366 && j' = e367 && 1 = e368 )) )) and exists ( e369,e370 : ( i = e369 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( k = e361 && e362 = e361 and exists ( e363,e364 : ( e363 = e362+e364 && k' = e363 && 1 = e364 )) )) and exists ( e365,e366 : ( j = e365 && e366 = e365 and exists ( e367,e368 : ( e367+e368 = e366 && j' = e367 && 1 = e368 )) )) and exists ( e369,e370 : ( i = e369 and exists ( e371,e372 : ( e371+e372 = e370 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( k = e361 && e362 = e361 and exists ( e363,e364 : ( e363 = e362+e364 && k' = e363 && 1 = e364 )) )) and exists ( e365,e366 : ( j = e365 && e366 = e365 and exists ( e367,e368 : ( e367+e368 = e366 && j' = e367 && 1 = e368 )) )) and exists ( e369,e370 : ( i = e369 and exists ( e371,e372 : ( e371+e372 = e370 && i' = e371 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e361,e362 : ( k = e361 && e362 = e361 and exists ( e363,e364 : ( e363 = e362+e364 && k' = e363 && 1 = e364 )) )) and exists ( e365,e366 : ( j = e365 && e366 = e365 and exists ( e367,e368 : ( e367+e368 = e366 && j' = e367 && 1 = e368 )) )) and exists ( e369,e370 : ( i = e369 && e370 = e369 and exists ( e371,e372 : ( e371+e372 = e370 && i' = e371 && 1 = e372 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( k = e373 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( k = e373 and exists ( e375,e376 : ( e375+e376 = e374 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( k = e373 and exists ( e375,e376 : ( e375+e376 = e374 && k' = e375 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( k = e373 && e374 = e373 and exists ( e375,e376 : ( e375+e376 = e374 && k' = e375 && 1 = e376 )) )) and exists ( e377,e378 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( k = e373 && e374 = e373 and exists ( e375,e376 : ( e375+e376 = e374 && k' = e375 && 1 = e376 )) )) and exists ( e377,e378 : ( j = e377 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( k = e373 && e374 = e373 and exists ( e375,e376 : ( e375+e376 = e374 && k' = e375 && 1 = e376 )) )) and exists ( e377,e378 : ( j = e377 and exists ( e379,e380 : ( e379 = e378+e380 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( k = e373 && e374 = e373 and exists ( e375,e376 : ( e375+e376 = e374 && k' = e375 && 1 = e376 )) )) and exists ( e377,e378 : ( j = e377 and exists ( e379,e380 : ( e379 = e378+e380 && j' = e379 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( k = e373 && e374 = e373 and exists ( e375,e376 : ( e375+e376 = e374 && k' = e375 && 1 = e376 )) )) and exists ( e377,e378 : ( j = e377 && e378 = e377 and exists ( e379,e380 : ( e379 = e378+e380 && j' = e379 && 1 = e380 )) )) and exists ( e381,e382 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( k = e373 && e374 = e373 and exists ( e375,e376 : ( e375+e376 = e374 && k' = e375 && 1 = e376 )) )) and exists ( e377,e378 : ( j = e377 && e378 = e377 and exists ( e379,e380 : ( e379 = e378+e380 && j' = e379 && 1 = e380 )) )) and exists ( e381,e382 : ( i = e381 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( k = e373 && e374 = e373 and exists ( e375,e376 : ( e375+e376 = e374 && k' = e375 && 1 = e376 )) )) and exists ( e377,e378 : ( j = e377 && e378 = e377 and exists ( e379,e380 : ( e379 = e378+e380 && j' = e379 && 1 = e380 )) )) and exists ( e381,e382 : ( i = e381 and exists ( e383,e384 : ( e383+e384 = e382 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( k = e373 && e374 = e373 and exists ( e375,e376 : ( e375+e376 = e374 && k' = e375 && 1 = e376 )) )) and exists ( e377,e378 : ( j = e377 && e378 = e377 and exists ( e379,e380 : ( e379 = e378+e380 && j' = e379 && 1 = e380 )) )) and exists ( e381,e382 : ( i = e381 and exists ( e383,e384 : ( e383+e384 = e382 && i' = e383 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e373,e374 : ( k = e373 && e374 = e373 and exists ( e375,e376 : ( e375+e376 = e374 && k' = e375 && 1 = e376 )) )) and exists ( e377,e378 : ( j = e377 && e378 = e377 and exists ( e379,e380 : ( e379 = e378+e380 && j' = e379 && 1 = e380 )) )) and exists ( e381,e382 : ( i = e381 && e382 = e381 and exists ( e383,e384 : ( e383+e384 = e382 && i' = e383 && 1 = e384 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( k = e385 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( k = e385 and exists ( e387,e388 : ( e387+e388 = e386 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( k = e385 and exists ( e387,e388 : ( e387+e388 = e386 && k' = e387 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( k = e385 && e386 = e385 and exists ( e387,e388 : ( e387+e388 = e386 && k' = e387 && 1 = e388 )) )) and exists ( e389,e390 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( k = e385 && e386 = e385 and exists ( e387,e388 : ( e387+e388 = e386 && k' = e387 && 1 = e388 )) )) and exists ( e389,e390 : ( j = e389 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( k = e385 && e386 = e385 and exists ( e387,e388 : ( e387+e388 = e386 && k' = e387 && 1 = e388 )) )) and exists ( e389,e390 : ( j = e389 and exists ( e391,e392 : ( e391+e392 = e390 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( k = e385 && e386 = e385 and exists ( e387,e388 : ( e387+e388 = e386 && k' = e387 && 1 = e388 )) )) and exists ( e389,e390 : ( j = e389 and exists ( e391,e392 : ( e391+e392 = e390 && j' = e391 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( k = e385 && e386 = e385 and exists ( e387,e388 : ( e387+e388 = e386 && k' = e387 && 1 = e388 )) )) and exists ( e389,e390 : ( j = e389 && e390 = e389 and exists ( e391,e392 : ( e391+e392 = e390 && j' = e391 && 1 = e392 )) )) and exists ( e393,e394 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( k = e385 && e386 = e385 and exists ( e387,e388 : ( e387+e388 = e386 && k' = e387 && 1 = e388 )) )) and exists ( e389,e390 : ( j = e389 && e390 = e389 and exists ( e391,e392 : ( e391+e392 = e390 && j' = e391 && 1 = e392 )) )) and exists ( e393,e394 : ( i = e393 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( k = e385 && e386 = e385 and exists ( e387,e388 : ( e387+e388 = e386 && k' = e387 && 1 = e388 )) )) and exists ( e389,e390 : ( j = e389 && e390 = e389 and exists ( e391,e392 : ( e391+e392 = e390 && j' = e391 && 1 = e392 )) )) and exists ( e393,e394 : ( i = e393 and exists ( e395,e396 : ( e395+e396 = e394 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( k = e385 && e386 = e385 and exists ( e387,e388 : ( e387+e388 = e386 && k' = e387 && 1 = e388 )) )) and exists ( e389,e390 : ( j = e389 && e390 = e389 and exists ( e391,e392 : ( e391+e392 = e390 && j' = e391 && 1 = e392 )) )) and exists ( e393,e394 : ( i = e393 and exists ( e395,e396 : ( e395+e396 = e394 && i' = e395 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e385,e386 : ( k = e385 && e386 = e385 and exists ( e387,e388 : ( e387+e388 = e386 && k' = e387 && 1 = e388 )) )) and exists ( e389,e390 : ( j = e389 && e390 = e389 and exists ( e391,e392 : ( e391+e392 = e390 && j' = e391 && 1 = e392 )) )) and exists ( e393,e394 : ( i = e393 && e394 = e393 and exists ( e395,e396 : ( e395+e396 = e394 && i' = e395 && 1 = e396 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 1
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e397,e398 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e397,e398 : ( k = e397 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e397,e398 : ( k = e397 && k' = e398 && e398 = e397 )) and exists ( e399,e400 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e397,e398 : ( k = e397 && k' = e398 && e398 = e397 )) and exists ( e399,e400 : ( j = e399 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e397,e398 : ( k = e397 && k' = e398 && e398 = e397 )) and exists ( e399,e400 : ( j = e399 && j' = e400 && e400 = e399 )) and exists ( e401,e402 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e397,e398 : ( k = e397 && k' = e398 && e398 = e397 )) and exists ( e399,e400 : ( j = e399 && j' = e400 && e400 = e399 )) and exists ( e401,e402 : ( i = e401 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e397,e398 : ( k = e397 && k' = e398 && e398 = e397 )) and exists ( e399,e400 : ( j = e399 && j' = e400 && e400 = e399 )) and exists ( e401,e402 : ( i = e401 && i' = e402 && e402 = e401 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 2
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e403,e404 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e403,e404 : ( exists ( e405,e406 : ( e405 = e403+e406 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e403,e404 : ( exists ( e405,e406 : ( e405 = e403+e406 && k = e405 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e403,e404 : ( exists ( e405,e406 : ( e405 = e403+e406 && k = e405 && 1 = e406 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e403,e404 : ( exists ( e405,e406 : ( e405 = e403+e406 && k = e405 && 1 = e406 )) and k' = e404 && e404 = e403 )) and exists ( e407,e408 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e403,e404 : ( exists ( e405,e406 : ( e405 = e403+e406 && k = e405 && 1 = e406 )) and k' = e404 && e404 = e403 )) and exists ( e407,e408 : ( j = e407 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e403,e404 : ( exists ( e405,e406 : ( e405 = e403+e406 && k = e405 && 1 = e406 )) and k' = e404 && e404 = e403 )) and exists ( e407,e408 : ( j = e407 && j' = e408 && e408 = e407 )) and exists ( e409,e410 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e403,e404 : ( exists ( e405,e406 : ( e405 = e403+e406 && k = e405 && 1 = e406 )) and k' = e404 && e404 = e403 )) and exists ( e407,e408 : ( j = e407 && j' = e408 && e408 = e407 )) and exists ( e409,e410 : ( i = e409 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e403,e404 : ( exists ( e405,e406 : ( e405 = e403+e406 && k = e405 && 1 = e406 )) and k' = e404 && e404 = e403 )) and exists ( e407,e408 : ( j = e407 && j' = e408 && e408 = e407 )) and exists ( e409,e410 : ( i = e409 && i' = e410 && e410 = e409 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 3
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e411,e412 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e411,e412 : ( k = e411 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e411,e412 : ( k = e411 && k' = e412 && e412 = e411 )) and exists ( e413,e414 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e411,e412 : ( k = e411 && k' = e412 && e412 = e411 )) and exists ( e413,e414 : ( exists ( e415,e416 : ( e415 = e413+e416 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e411,e412 : ( k = e411 && k' = e412 && e412 = e411 )) and exists ( e413,e414 : ( exists ( e415,e416 : ( e415 = e413+e416 && j = e415 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e411,e412 : ( k = e411 && k' = e412 && e412 = e411 )) and exists ( e413,e414 : ( exists ( e415,e416 : ( e415 = e413+e416 && j = e415 && 1 = e416 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e411,e412 : ( k = e411 && k' = e412 && e412 = e411 )) and exists ( e413,e414 : ( exists ( e415,e416 : ( e415 = e413+e416 && j = e415 && 1 = e416 )) and j' = e414 && e414 = e413 )) and exists ( e417,e418 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e411,e412 : ( k = e411 && k' = e412 && e412 = e411 )) and exists ( e413,e414 : ( exists ( e415,e416 : ( e415 = e413+e416 && j = e415 && 1 = e416 )) and j' = e414 && e414 = e413 )) and exists ( e417,e418 : ( i = e417 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e411,e412 : ( k = e411 && k' = e412 && e412 = e411 )) and exists ( e413,e414 : ( exists ( e415,e416 : ( e415 = e413+e416 && j = e415 && 1 = e416 )) and j' = e414 && e414 = e413 )) and exists ( e417,e418 : ( i = e417 && i' = e418 && e418 = e417 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 4
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e419,e420 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e419,e420 : ( k = e419 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e419,e420 : ( k = e419 && k' = e420 && e420 = e419 )) and exists ( e421,e422 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e419,e420 : ( k = e419 && k' = e420 && e420 = e419 )) and exists ( e421,e422 : ( exists ( e423,e424 : ( e423+e424 = e421 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e419,e420 : ( k = e419 && k' = e420 && e420 = e419 )) and exists ( e421,e422 : ( exists ( e423,e424 : ( e423+e424 = e421 && j = e423 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e419,e420 : ( k = e419 && k' = e420 && e420 = e419 )) and exists ( e421,e422 : ( exists ( e423,e424 : ( e423+e424 = e421 && j = e423 && 1 = e424 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e419,e420 : ( k = e419 && k' = e420 && e420 = e419 )) and exists ( e421,e422 : ( exists ( e423,e424 : ( e423+e424 = e421 && j = e423 && 1 = e424 )) and j' = e422 && e422 = e421 )) and exists ( e425,e426 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e419,e420 : ( k = e419 && k' = e420 && e420 = e419 )) and exists ( e421,e422 : ( exists ( e423,e424 : ( e423+e424 = e421 && j = e423 && 1 = e424 )) and j' = e422 && e422 = e421 )) and exists ( e425,e426 : ( i = e425 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e419,e420 : ( k = e419 && k' = e420 && e420 = e419 )) and exists ( e421,e422 : ( exists ( e423,e424 : ( e423+e424 = e421 && j = e423 && 1 = e424 )) and j' = e422 && e422 = e421 )) and exists ( e425,e426 : ( i = e425 && i' = e426 && e426 = e425 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 5
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e427,e428 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e427,e428 : ( exists ( e429,e430 : ( e429+e430 = e427 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e427,e428 : ( exists ( e429,e430 : ( e429+e430 = e427 && k = e429 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e427,e428 : ( exists ( e429,e430 : ( e429+e430 = e427 && k = e429 && 1 = e430 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e427,e428 : ( exists ( e429,e430 : ( e429+e430 = e427 && k = e429 && 1 = e430 )) and k' = e428 && e428 = e427 )) and exists ( e431,e432 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e427,e428 : ( exists ( e429,e430 : ( e429+e430 = e427 && k = e429 && 1 = e430 )) and k' = e428 && e428 = e427 )) and exists ( e431,e432 : ( j = e431 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e427,e428 : ( exists ( e429,e430 : ( e429+e430 = e427 && k = e429 && 1 = e430 )) and k' = e428 && e428 = e427 )) and exists ( e431,e432 : ( j = e431 && j' = e432 && e432 = e431 )) and exists ( e433,e434 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e427,e428 : ( exists ( e429,e430 : ( e429+e430 = e427 && k = e429 && 1 = e430 )) and k' = e428 && e428 = e427 )) and exists ( e431,e432 : ( j = e431 && j' = e432 && e432 = e431 )) and exists ( e433,e434 : ( i = e433 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e427,e428 : ( exists ( e429,e430 : ( e429+e430 = e427 && k = e429 && 1 = e430 )) and k' = e428 && e428 = e427 )) and exists ( e431,e432 : ( j = e431 && j' = e432 && e432 = e431 )) and exists ( e433,e434 : ( i = e433 && i' = e434 && e434 = e433 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 6
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e435,e436 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e435,e436 : ( k = e435 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e435,e436 : ( k = e435 && k' = e436 && e436 = e435 )) and exists ( e437,e438 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e435,e436 : ( k = e435 && k' = e436 && e436 = e435 )) and exists ( e437,e438 : ( j = e437 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e435,e436 : ( k = e435 && k' = e436 && e436 = e435 )) and exists ( e437,e438 : ( j = e437 && j' = e438 && e438 = e437 )) and exists ( e439,e440 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e435,e436 : ( k = e435 && k' = e436 && e436 = e435 )) and exists ( e437,e438 : ( j = e437 && j' = e438 && e438 = e437 )) and exists ( e439,e440 : ( exists ( e441,e442 : ( e441 = e439+e442 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e435,e436 : ( k = e435 && k' = e436 && e436 = e435 )) and exists ( e437,e438 : ( j = e437 && j' = e438 && e438 = e437 )) and exists ( e439,e440 : ( exists ( e441,e442 : ( e441 = e439+e442 && i = e441 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e435,e436 : ( k = e435 && k' = e436 && e436 = e435 )) and exists ( e437,e438 : ( j = e437 && j' = e438 && e438 = e437 )) and exists ( e439,e440 : ( exists ( e441,e442 : ( e441 = e439+e442 && i = e441 && 1 = e442 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e435,e436 : ( k = e435 && k' = e436 && e436 = e435 )) and exists ( e437,e438 : ( j = e437 && j' = e438 && e438 = e437 )) and exists ( e439,e440 : ( exists ( e441,e442 : ( e441 = e439+e442 && i = e441 && 1 = e442 )) and i' = e440 && e440 = e439 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 7
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e443,e444 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e443,e444 : ( k = e443 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e443,e444 : ( k = e443 && k' = e444 && e444 = e443 )) and exists ( e445,e446 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e443,e444 : ( k = e443 && k' = e444 && e444 = e443 )) and exists ( e445,e446 : ( j = e445 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e443,e444 : ( k = e443 && k' = e444 && e444 = e443 )) and exists ( e445,e446 : ( j = e445 && j' = e446 && e446 = e445 )) and exists ( e447,e448 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e443,e444 : ( k = e443 && k' = e444 && e444 = e443 )) and exists ( e445,e446 : ( j = e445 && j' = e446 && e446 = e445 )) and exists ( e447,e448 : ( exists ( e449,e450 : ( e449+e450 = e447 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e443,e444 : ( k = e443 && k' = e444 && e444 = e443 )) and exists ( e445,e446 : ( j = e445 && j' = e446 && e446 = e445 )) and exists ( e447,e448 : ( exists ( e449,e450 : ( e449+e450 = e447 && i = e449 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e443,e444 : ( k = e443 && k' = e444 && e444 = e443 )) and exists ( e445,e446 : ( j = e445 && j' = e446 && e446 = e445 )) and exists ( e447,e448 : ( exists ( e449,e450 : ( e449+e450 = e447 && i = e449 && 1 = e450 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e443,e444 : ( k = e443 && k' = e444 && e444 = e443 )) and exists ( e445,e446 : ( j = e445 && j' = e446 && e446 = e445 )) and exists ( e447,e448 : ( exists ( e449,e450 : ( e449+e450 = e447 && i = e449 && 1 = e450 )) and i' = e448 && e448 = e447 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 8
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e451,e452 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e451,e452 : ( exists ( e453,e454 : ( e453 = e451+e454 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e451,e452 : ( exists ( e453,e454 : ( e453 = e451+e454 && k = e453 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e451,e452 : ( exists ( e453,e454 : ( e453 = e451+e454 && k = e453 && 1 = e454 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e451,e452 : ( exists ( e453,e454 : ( e453 = e451+e454 && k = e453 && 1 = e454 )) and k' = e452 && e452 = e451 )) and exists ( e455,e456 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e451,e452 : ( exists ( e453,e454 : ( e453 = e451+e454 && k = e453 && 1 = e454 )) and k' = e452 && e452 = e451 )) and exists ( e455,e456 : ( j = e455 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e451,e452 : ( exists ( e453,e454 : ( e453 = e451+e454 && k = e453 && 1 = e454 )) and k' = e452 && e452 = e451 )) and exists ( e455,e456 : ( j = e455 && j' = e456 && e456 = e455 )) and exists ( e457,e458 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e451,e452 : ( exists ( e453,e454 : ( e453 = e451+e454 && k = e453 && 1 = e454 )) and k' = e452 && e452 = e451 )) and exists ( e455,e456 : ( j = e455 && j' = e456 && e456 = e455 )) and exists ( e457,e458 : ( exists ( e459,e460 : ( e459 = e457+e460 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e451,e452 : ( exists ( e453,e454 : ( e453 = e451+e454 && k = e453 && 1 = e454 )) and k' = e452 && e452 = e451 )) and exists ( e455,e456 : ( j = e455 && j' = e456 && e456 = e455 )) and exists ( e457,e458 : ( exists ( e459,e460 : ( e459 = e457+e460 && i = e459 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e451,e452 : ( exists ( e453,e454 : ( e453 = e451+e454 && k = e453 && 1 = e454 )) and k' = e452 && e452 = e451 )) and exists ( e455,e456 : ( j = e455 && j' = e456 && e456 = e455 )) and exists ( e457,e458 : ( exists ( e459,e460 : ( e459 = e457+e460 && i = e459 && 1 = e460 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e451,e452 : ( exists ( e453,e454 : ( e453 = e451+e454 && k = e453 && 1 = e454 )) and k' = e452 && e452 = e451 )) and exists ( e455,e456 : ( j = e455 && j' = e456 && e456 = e455 )) and exists ( e457,e458 : ( exists ( e459,e460 : ( e459 = e457+e460 && i = e459 && 1 = e460 )) and i' = e458 && e458 = e457 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 9
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e461,e462 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e461,e462 : ( k = e461 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e461,e462 : ( k = e461 && k' = e462 && e462 = e461 )) and exists ( e463,e464 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e461,e462 : ( k = e461 && k' = e462 && e462 = e461 )) and exists ( e463,e464 : ( exists ( e465,e466 : ( e465 = e463+e466 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e461,e462 : ( k = e461 && k' = e462 && e462 = e461 )) and exists ( e463,e464 : ( exists ( e465,e466 : ( e465 = e463+e466 && j = e465 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e461,e462 : ( k = e461 && k' = e462 && e462 = e461 )) and exists ( e463,e464 : ( exists ( e465,e466 : ( e465 = e463+e466 && j = e465 && 1 = e466 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e461,e462 : ( k = e461 && k' = e462 && e462 = e461 )) and exists ( e463,e464 : ( exists ( e465,e466 : ( e465 = e463+e466 && j = e465 && 1 = e466 )) and j' = e464 && e464 = e463 )) and exists ( e467,e468 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e461,e462 : ( k = e461 && k' = e462 && e462 = e461 )) and exists ( e463,e464 : ( exists ( e465,e466 : ( e465 = e463+e466 && j = e465 && 1 = e466 )) and j' = e464 && e464 = e463 )) and exists ( e467,e468 : ( exists ( e469,e470 : ( e469 = e467+e470 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e461,e462 : ( k = e461 && k' = e462 && e462 = e461 )) and exists ( e463,e464 : ( exists ( e465,e466 : ( e465 = e463+e466 && j = e465 && 1 = e466 )) and j' = e464 && e464 = e463 )) and exists ( e467,e468 : ( exists ( e469,e470 : ( e469 = e467+e470 && i = e469 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e461,e462 : ( k = e461 && k' = e462 && e462 = e461 )) and exists ( e463,e464 : ( exists ( e465,e466 : ( e465 = e463+e466 && j = e465 && 1 = e466 )) and j' = e464 && e464 = e463 )) and exists ( e467,e468 : ( exists ( e469,e470 : ( e469 = e467+e470 && i = e469 && 1 = e470 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e461,e462 : ( k = e461 && k' = e462 && e462 = e461 )) and exists ( e463,e464 : ( exists ( e465,e466 : ( e465 = e463+e466 && j = e465 && 1 = e466 )) and j' = e464 && e464 = e463 )) and exists ( e467,e468 : ( exists ( e469,e470 : ( e469 = e467+e470 && i = e469 && 1 = e470 )) and i' = e468 && e468 = e467 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 10
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e471,e472 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e471,e472 : ( k = e471 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e471,e472 : ( k = e471 && k' = e472 && e472 = e471 )) and exists ( e473,e474 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e471,e472 : ( k = e471 && k' = e472 && e472 = e471 )) and exists ( e473,e474 : ( exists ( e475,e476 : ( e475+e476 = e473 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e471,e472 : ( k = e471 && k' = e472 && e472 = e471 )) and exists ( e473,e474 : ( exists ( e475,e476 : ( e475+e476 = e473 && j = e475 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e471,e472 : ( k = e471 && k' = e472 && e472 = e471 )) and exists ( e473,e474 : ( exists ( e475,e476 : ( e475+e476 = e473 && j = e475 && 1 = e476 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e471,e472 : ( k = e471 && k' = e472 && e472 = e471 )) and exists ( e473,e474 : ( exists ( e475,e476 : ( e475+e476 = e473 && j = e475 && 1 = e476 )) and j' = e474 && e474 = e473 )) and exists ( e477,e478 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e471,e472 : ( k = e471 && k' = e472 && e472 = e471 )) and exists ( e473,e474 : ( exists ( e475,e476 : ( e475+e476 = e473 && j = e475 && 1 = e476 )) and j' = e474 && e474 = e473 )) and exists ( e477,e478 : ( exists ( e479,e480 : ( e479 = e477+e480 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e471,e472 : ( k = e471 && k' = e472 && e472 = e471 )) and exists ( e473,e474 : ( exists ( e475,e476 : ( e475+e476 = e473 && j = e475 && 1 = e476 )) and j' = e474 && e474 = e473 )) and exists ( e477,e478 : ( exists ( e479,e480 : ( e479 = e477+e480 && i = e479 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e471,e472 : ( k = e471 && k' = e472 && e472 = e471 )) and exists ( e473,e474 : ( exists ( e475,e476 : ( e475+e476 = e473 && j = e475 && 1 = e476 )) and j' = e474 && e474 = e473 )) and exists ( e477,e478 : ( exists ( e479,e480 : ( e479 = e477+e480 && i = e479 && 1 = e480 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e471,e472 : ( k = e471 && k' = e472 && e472 = e471 )) and exists ( e473,e474 : ( exists ( e475,e476 : ( e475+e476 = e473 && j = e475 && 1 = e476 )) and j' = e474 && e474 = e473 )) and exists ( e477,e478 : ( exists ( e479,e480 : ( e479 = e477+e480 && i = e479 && 1 = e480 )) and i' = e478 && e478 = e477 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 11
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e481,e482 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e481,e482 : ( exists ( e483,e484 : ( e483+e484 = e481 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e481,e482 : ( exists ( e483,e484 : ( e483+e484 = e481 && k = e483 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e481,e482 : ( exists ( e483,e484 : ( e483+e484 = e481 && k = e483 && 1 = e484 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e481,e482 : ( exists ( e483,e484 : ( e483+e484 = e481 && k = e483 && 1 = e484 )) and k' = e482 && e482 = e481 )) and exists ( e485,e486 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e481,e482 : ( exists ( e483,e484 : ( e483+e484 = e481 && k = e483 && 1 = e484 )) and k' = e482 && e482 = e481 )) and exists ( e485,e486 : ( j = e485 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e481,e482 : ( exists ( e483,e484 : ( e483+e484 = e481 && k = e483 && 1 = e484 )) and k' = e482 && e482 = e481 )) and exists ( e485,e486 : ( j = e485 && j' = e486 && e486 = e485 )) and exists ( e487,e488 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e481,e482 : ( exists ( e483,e484 : ( e483+e484 = e481 && k = e483 && 1 = e484 )) and k' = e482 && e482 = e481 )) and exists ( e485,e486 : ( j = e485 && j' = e486 && e486 = e485 )) and exists ( e487,e488 : ( exists ( e489,e490 : ( e489 = e487+e490 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e481,e482 : ( exists ( e483,e484 : ( e483+e484 = e481 && k = e483 && 1 = e484 )) and k' = e482 && e482 = e481 )) and exists ( e485,e486 : ( j = e485 && j' = e486 && e486 = e485 )) and exists ( e487,e488 : ( exists ( e489,e490 : ( e489 = e487+e490 && i = e489 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e481,e482 : ( exists ( e483,e484 : ( e483+e484 = e481 && k = e483 && 1 = e484 )) and k' = e482 && e482 = e481 )) and exists ( e485,e486 : ( j = e485 && j' = e486 && e486 = e485 )) and exists ( e487,e488 : ( exists ( e489,e490 : ( e489 = e487+e490 && i = e489 && 1 = e490 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e481,e482 : ( exists ( e483,e484 : ( e483+e484 = e481 && k = e483 && 1 = e484 )) and k' = e482 && e482 = e481 )) and exists ( e485,e486 : ( j = e485 && j' = e486 && e486 = e485 )) and exists ( e487,e488 : ( exists ( e489,e490 : ( e489 = e487+e490 && i = e489 && 1 = e490 )) and i' = e488 && e488 = e487 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 12
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e491,e492 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e491,e492 : ( exists ( e493,e494 : ( e493 = e491+e494 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e491,e492 : ( exists ( e493,e494 : ( e493 = e491+e494 && k = e493 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e491,e492 : ( exists ( e493,e494 : ( e493 = e491+e494 && k = e493 && 1 = e494 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e491,e492 : ( exists ( e493,e494 : ( e493 = e491+e494 && k = e493 && 1 = e494 )) and k' = e492 && e492 = e491 )) and exists ( e495,e496 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e491,e492 : ( exists ( e493,e494 : ( e493 = e491+e494 && k = e493 && 1 = e494 )) and k' = e492 && e492 = e491 )) and exists ( e495,e496 : ( exists ( e497,e498 : ( e497 = e495+e498 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e491,e492 : ( exists ( e493,e494 : ( e493 = e491+e494 && k = e493 && 1 = e494 )) and k' = e492 && e492 = e491 )) and exists ( e495,e496 : ( exists ( e497,e498 : ( e497 = e495+e498 && j = e497 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e491,e492 : ( exists ( e493,e494 : ( e493 = e491+e494 && k = e493 && 1 = e494 )) and k' = e492 && e492 = e491 )) and exists ( e495,e496 : ( exists ( e497,e498 : ( e497 = e495+e498 && j = e497 && 1 = e498 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e491,e492 : ( exists ( e493,e494 : ( e493 = e491+e494 && k = e493 && 1 = e494 )) and k' = e492 && e492 = e491 )) and exists ( e495,e496 : ( exists ( e497,e498 : ( e497 = e495+e498 && j = e497 && 1 = e498 )) and j' = e496 && e496 = e495 )) and exists ( e499,e500 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e491,e492 : ( exists ( e493,e494 : ( e493 = e491+e494 && k = e493 && 1 = e494 )) and k' = e492 && e492 = e491 )) and exists ( e495,e496 : ( exists ( e497,e498 : ( e497 = e495+e498 && j = e497 && 1 = e498 )) and j' = e496 && e496 = e495 )) and exists ( e499,e500 : ( i = e499 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e491,e492 : ( exists ( e493,e494 : ( e493 = e491+e494 && k = e493 && 1 = e494 )) and k' = e492 && e492 = e491 )) and exists ( e495,e496 : ( exists ( e497,e498 : ( e497 = e495+e498 && j = e497 && 1 = e498 )) and j' = e496 && e496 = e495 )) and exists ( e499,e500 : ( i = e499 && i' = e500 && e500 = e499 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 13
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e501,e502 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e501,e502 : ( exists ( e503,e504 : ( e503 = e501+e504 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e501,e502 : ( exists ( e503,e504 : ( e503 = e501+e504 && k = e503 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e501,e502 : ( exists ( e503,e504 : ( e503 = e501+e504 && k = e503 && 1 = e504 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e501,e502 : ( exists ( e503,e504 : ( e503 = e501+e504 && k = e503 && 1 = e504 )) and k' = e502 && e502 = e501 )) and exists ( e505,e506 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e501,e502 : ( exists ( e503,e504 : ( e503 = e501+e504 && k = e503 && 1 = e504 )) and k' = e502 && e502 = e501 )) and exists ( e505,e506 : ( exists ( e507,e508 : ( e507+e508 = e505 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e501,e502 : ( exists ( e503,e504 : ( e503 = e501+e504 && k = e503 && 1 = e504 )) and k' = e502 && e502 = e501 )) and exists ( e505,e506 : ( exists ( e507,e508 : ( e507+e508 = e505 && j = e507 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e501,e502 : ( exists ( e503,e504 : ( e503 = e501+e504 && k = e503 && 1 = e504 )) and k' = e502 && e502 = e501 )) and exists ( e505,e506 : ( exists ( e507,e508 : ( e507+e508 = e505 && j = e507 && 1 = e508 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e501,e502 : ( exists ( e503,e504 : ( e503 = e501+e504 && k = e503 && 1 = e504 )) and k' = e502 && e502 = e501 )) and exists ( e505,e506 : ( exists ( e507,e508 : ( e507+e508 = e505 && j = e507 && 1 = e508 )) and j' = e506 && e506 = e505 )) and exists ( e509,e510 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e501,e502 : ( exists ( e503,e504 : ( e503 = e501+e504 && k = e503 && 1 = e504 )) and k' = e502 && e502 = e501 )) and exists ( e505,e506 : ( exists ( e507,e508 : ( e507+e508 = e505 && j = e507 && 1 = e508 )) and j' = e506 && e506 = e505 )) and exists ( e509,e510 : ( i = e509 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e501,e502 : ( exists ( e503,e504 : ( e503 = e501+e504 && k = e503 && 1 = e504 )) and k' = e502 && e502 = e501 )) and exists ( e505,e506 : ( exists ( e507,e508 : ( e507+e508 = e505 && j = e507 && 1 = e508 )) and j' = e506 && e506 = e505 )) and exists ( e509,e510 : ( i = e509 && i' = e510 && e510 = e509 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 14
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e511,e512 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e511,e512 : ( exists ( e513,e514 : ( e513+e514 = e511 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e511,e512 : ( exists ( e513,e514 : ( e513+e514 = e511 && k = e513 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e511,e512 : ( exists ( e513,e514 : ( e513+e514 = e511 && k = e513 && 1 = e514 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e511,e512 : ( exists ( e513,e514 : ( e513+e514 = e511 && k = e513 && 1 = e514 )) and k' = e512 && e512 = e511 )) and exists ( e515,e516 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e511,e512 : ( exists ( e513,e514 : ( e513+e514 = e511 && k = e513 && 1 = e514 )) and k' = e512 && e512 = e511 )) and exists ( e515,e516 : ( exists ( e517,e518 : ( e517 = e515+e518 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e511,e512 : ( exists ( e513,e514 : ( e513+e514 = e511 && k = e513 && 1 = e514 )) and k' = e512 && e512 = e511 )) and exists ( e515,e516 : ( exists ( e517,e518 : ( e517 = e515+e518 && j = e517 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e511,e512 : ( exists ( e513,e514 : ( e513+e514 = e511 && k = e513 && 1 = e514 )) and k' = e512 && e512 = e511 )) and exists ( e515,e516 : ( exists ( e517,e518 : ( e517 = e515+e518 && j = e517 && 1 = e518 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e511,e512 : ( exists ( e513,e514 : ( e513+e514 = e511 && k = e513 && 1 = e514 )) and k' = e512 && e512 = e511 )) and exists ( e515,e516 : ( exists ( e517,e518 : ( e517 = e515+e518 && j = e517 && 1 = e518 )) and j' = e516 && e516 = e515 )) and exists ( e519,e520 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e511,e512 : ( exists ( e513,e514 : ( e513+e514 = e511 && k = e513 && 1 = e514 )) and k' = e512 && e512 = e511 )) and exists ( e515,e516 : ( exists ( e517,e518 : ( e517 = e515+e518 && j = e517 && 1 = e518 )) and j' = e516 && e516 = e515 )) and exists ( e519,e520 : ( i = e519 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e511,e512 : ( exists ( e513,e514 : ( e513+e514 = e511 && k = e513 && 1 = e514 )) and k' = e512 && e512 = e511 )) and exists ( e515,e516 : ( exists ( e517,e518 : ( e517 = e515+e518 && j = e517 && 1 = e518 )) and j' = e516 && e516 = e515 )) and exists ( e519,e520 : ( i = e519 && i' = e520 && e520 = e519 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 15
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e521,e522 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e521,e522 : ( exists ( e523,e524 : ( e523+e524 = e521 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e521,e522 : ( exists ( e523,e524 : ( e523+e524 = e521 && k = e523 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e521,e522 : ( exists ( e523,e524 : ( e523+e524 = e521 && k = e523 && 1 = e524 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e521,e522 : ( exists ( e523,e524 : ( e523+e524 = e521 && k = e523 && 1 = e524 )) and k' = e522 && e522 = e521 )) and exists ( e525,e526 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e521,e522 : ( exists ( e523,e524 : ( e523+e524 = e521 && k = e523 && 1 = e524 )) and k' = e522 && e522 = e521 )) and exists ( e525,e526 : ( exists ( e527,e528 : ( e527+e528 = e525 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e521,e522 : ( exists ( e523,e524 : ( e523+e524 = e521 && k = e523 && 1 = e524 )) and k' = e522 && e522 = e521 )) and exists ( e525,e526 : ( exists ( e527,e528 : ( e527+e528 = e525 && j = e527 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e521,e522 : ( exists ( e523,e524 : ( e523+e524 = e521 && k = e523 && 1 = e524 )) and k' = e522 && e522 = e521 )) and exists ( e525,e526 : ( exists ( e527,e528 : ( e527+e528 = e525 && j = e527 && 1 = e528 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e521,e522 : ( exists ( e523,e524 : ( e523+e524 = e521 && k = e523 && 1 = e524 )) and k' = e522 && e522 = e521 )) and exists ( e525,e526 : ( exists ( e527,e528 : ( e527+e528 = e525 && j = e527 && 1 = e528 )) and j' = e526 && e526 = e525 )) and exists ( e529,e530 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e521,e522 : ( exists ( e523,e524 : ( e523+e524 = e521 && k = e523 && 1 = e524 )) and k' = e522 && e522 = e521 )) and exists ( e525,e526 : ( exists ( e527,e528 : ( e527+e528 = e525 && j = e527 && 1 = e528 )) and j' = e526 && e526 = e525 )) and exists ( e529,e530 : ( i = e529 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e521,e522 : ( exists ( e523,e524 : ( e523+e524 = e521 && k = e523 && 1 = e524 )) and k' = e522 && e522 = e521 )) and exists ( e525,e526 : ( exists ( e527,e528 : ( e527+e528 = e525 && j = e527 && 1 = e528 )) and j' = e526 && e526 = e525 )) and exists ( e529,e530 : ( i = e529 && i' = e530 && e530 = e529 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 16
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e531,e532 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e531,e532 : ( exists ( e533,e534 : ( e533 = e531+e534 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e531,e532 : ( exists ( e533,e534 : ( e533 = e531+e534 && k = e533 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e531,e532 : ( exists ( e533,e534 : ( e533 = e531+e534 && k = e533 && 1 = e534 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e531,e532 : ( exists ( e533,e534 : ( e533 = e531+e534 && k = e533 && 1 = e534 )) and k' = e532 && e532 = e531 )) and exists ( e535,e536 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e531,e532 : ( exists ( e533,e534 : ( e533 = e531+e534 && k = e533 && 1 = e534 )) and k' = e532 && e532 = e531 )) and exists ( e535,e536 : ( j = e535 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e531,e532 : ( exists ( e533,e534 : ( e533 = e531+e534 && k = e533 && 1 = e534 )) and k' = e532 && e532 = e531 )) and exists ( e535,e536 : ( j = e535 && j' = e536 && e536 = e535 )) and exists ( e537,e538 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e531,e532 : ( exists ( e533,e534 : ( e533 = e531+e534 && k = e533 && 1 = e534 )) and k' = e532 && e532 = e531 )) and exists ( e535,e536 : ( j = e535 && j' = e536 && e536 = e535 )) and exists ( e537,e538 : ( exists ( e539,e540 : ( e539+e540 = e537 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e531,e532 : ( exists ( e533,e534 : ( e533 = e531+e534 && k = e533 && 1 = e534 )) and k' = e532 && e532 = e531 )) and exists ( e535,e536 : ( j = e535 && j' = e536 && e536 = e535 )) and exists ( e537,e538 : ( exists ( e539,e540 : ( e539+e540 = e537 && i = e539 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e531,e532 : ( exists ( e533,e534 : ( e533 = e531+e534 && k = e533 && 1 = e534 )) and k' = e532 && e532 = e531 )) and exists ( e535,e536 : ( j = e535 && j' = e536 && e536 = e535 )) and exists ( e537,e538 : ( exists ( e539,e540 : ( e539+e540 = e537 && i = e539 && 1 = e540 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e531,e532 : ( exists ( e533,e534 : ( e533 = e531+e534 && k = e533 && 1 = e534 )) and k' = e532 && e532 = e531 )) and exists ( e535,e536 : ( j = e535 && j' = e536 && e536 = e535 )) and exists ( e537,e538 : ( exists ( e539,e540 : ( e539+e540 = e537 && i = e539 && 1 = e540 )) and i' = e538 && e538 = e537 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 17
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e541,e542 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e541,e542 : ( k = e541 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e541,e542 : ( k = e541 && k' = e542 && e542 = e541 )) and exists ( e543,e544 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e541,e542 : ( k = e541 && k' = e542 && e542 = e541 )) and exists ( e543,e544 : ( exists ( e545,e546 : ( e545 = e543+e546 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e541,e542 : ( k = e541 && k' = e542 && e542 = e541 )) and exists ( e543,e544 : ( exists ( e545,e546 : ( e545 = e543+e546 && j = e545 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e541,e542 : ( k = e541 && k' = e542 && e542 = e541 )) and exists ( e543,e544 : ( exists ( e545,e546 : ( e545 = e543+e546 && j = e545 && 1 = e546 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e541,e542 : ( k = e541 && k' = e542 && e542 = e541 )) and exists ( e543,e544 : ( exists ( e545,e546 : ( e545 = e543+e546 && j = e545 && 1 = e546 )) and j' = e544 && e544 = e543 )) and exists ( e547,e548 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e541,e542 : ( k = e541 && k' = e542 && e542 = e541 )) and exists ( e543,e544 : ( exists ( e545,e546 : ( e545 = e543+e546 && j = e545 && 1 = e546 )) and j' = e544 && e544 = e543 )) and exists ( e547,e548 : ( exists ( e549,e550 : ( e549+e550 = e547 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e541,e542 : ( k = e541 && k' = e542 && e542 = e541 )) and exists ( e543,e544 : ( exists ( e545,e546 : ( e545 = e543+e546 && j = e545 && 1 = e546 )) and j' = e544 && e544 = e543 )) and exists ( e547,e548 : ( exists ( e549,e550 : ( e549+e550 = e547 && i = e549 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e541,e542 : ( k = e541 && k' = e542 && e542 = e541 )) and exists ( e543,e544 : ( exists ( e545,e546 : ( e545 = e543+e546 && j = e545 && 1 = e546 )) and j' = e544 && e544 = e543 )) and exists ( e547,e548 : ( exists ( e549,e550 : ( e549+e550 = e547 && i = e549 && 1 = e550 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e541,e542 : ( k = e541 && k' = e542 && e542 = e541 )) and exists ( e543,e544 : ( exists ( e545,e546 : ( e545 = e543+e546 && j = e545 && 1 = e546 )) and j' = e544 && e544 = e543 )) and exists ( e547,e548 : ( exists ( e549,e550 : ( e549+e550 = e547 && i = e549 && 1 = e550 )) and i' = e548 && e548 = e547 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 18
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e551,e552 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e551,e552 : ( k = e551 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e551,e552 : ( k = e551 && k' = e552 && e552 = e551 )) and exists ( e553,e554 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e551,e552 : ( k = e551 && k' = e552 && e552 = e551 )) and exists ( e553,e554 : ( exists ( e555,e556 : ( e555+e556 = e553 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e551,e552 : ( k = e551 && k' = e552 && e552 = e551 )) and exists ( e553,e554 : ( exists ( e555,e556 : ( e555+e556 = e553 && j = e555 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e551,e552 : ( k = e551 && k' = e552 && e552 = e551 )) and exists ( e553,e554 : ( exists ( e555,e556 : ( e555+e556 = e553 && j = e555 && 1 = e556 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e551,e552 : ( k = e551 && k' = e552 && e552 = e551 )) and exists ( e553,e554 : ( exists ( e555,e556 : ( e555+e556 = e553 && j = e555 && 1 = e556 )) and j' = e554 && e554 = e553 )) and exists ( e557,e558 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e551,e552 : ( k = e551 && k' = e552 && e552 = e551 )) and exists ( e553,e554 : ( exists ( e555,e556 : ( e555+e556 = e553 && j = e555 && 1 = e556 )) and j' = e554 && e554 = e553 )) and exists ( e557,e558 : ( exists ( e559,e560 : ( e559+e560 = e557 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e551,e552 : ( k = e551 && k' = e552 && e552 = e551 )) and exists ( e553,e554 : ( exists ( e555,e556 : ( e555+e556 = e553 && j = e555 && 1 = e556 )) and j' = e554 && e554 = e553 )) and exists ( e557,e558 : ( exists ( e559,e560 : ( e559+e560 = e557 && i = e559 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e551,e552 : ( k = e551 && k' = e552 && e552 = e551 )) and exists ( e553,e554 : ( exists ( e555,e556 : ( e555+e556 = e553 && j = e555 && 1 = e556 )) and j' = e554 && e554 = e553 )) and exists ( e557,e558 : ( exists ( e559,e560 : ( e559+e560 = e557 && i = e559 && 1 = e560 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e551,e552 : ( k = e551 && k' = e552 && e552 = e551 )) and exists ( e553,e554 : ( exists ( e555,e556 : ( e555+e556 = e553 && j = e555 && 1 = e556 )) and j' = e554 && e554 = e553 )) and exists ( e557,e558 : ( exists ( e559,e560 : ( e559+e560 = e557 && i = e559 && 1 = e560 )) and i' = e558 && e558 = e557 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 19
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e561,e562 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e561,e562 : ( exists ( e563,e564 : ( e563+e564 = e561 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e561,e562 : ( exists ( e563,e564 : ( e563+e564 = e561 && k = e563 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e561,e562 : ( exists ( e563,e564 : ( e563+e564 = e561 && k = e563 && 1 = e564 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e561,e562 : ( exists ( e563,e564 : ( e563+e564 = e561 && k = e563 && 1 = e564 )) and k' = e562 && e562 = e561 )) and exists ( e565,e566 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e561,e562 : ( exists ( e563,e564 : ( e563+e564 = e561 && k = e563 && 1 = e564 )) and k' = e562 && e562 = e561 )) and exists ( e565,e566 : ( j = e565 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e561,e562 : ( exists ( e563,e564 : ( e563+e564 = e561 && k = e563 && 1 = e564 )) and k' = e562 && e562 = e561 )) and exists ( e565,e566 : ( j = e565 && j' = e566 && e566 = e565 )) and exists ( e567,e568 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e561,e562 : ( exists ( e563,e564 : ( e563+e564 = e561 && k = e563 && 1 = e564 )) and k' = e562 && e562 = e561 )) and exists ( e565,e566 : ( j = e565 && j' = e566 && e566 = e565 )) and exists ( e567,e568 : ( exists ( e569,e570 : ( e569+e570 = e567 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e561,e562 : ( exists ( e563,e564 : ( e563+e564 = e561 && k = e563 && 1 = e564 )) and k' = e562 && e562 = e561 )) and exists ( e565,e566 : ( j = e565 && j' = e566 && e566 = e565 )) and exists ( e567,e568 : ( exists ( e569,e570 : ( e569+e570 = e567 && i = e569 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e561,e562 : ( exists ( e563,e564 : ( e563+e564 = e561 && k = e563 && 1 = e564 )) and k' = e562 && e562 = e561 )) and exists ( e565,e566 : ( j = e565 && j' = e566 && e566 = e565 )) and exists ( e567,e568 : ( exists ( e569,e570 : ( e569+e570 = e567 && i = e569 && 1 = e570 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e561,e562 : ( exists ( e563,e564 : ( e563+e564 = e561 && k = e563 && 1 = e564 )) and k' = e562 && e562 = e561 )) and exists ( e565,e566 : ( j = e565 && j' = e566 && e566 = e565 )) and exists ( e567,e568 : ( exists ( e569,e570 : ( e569+e570 = e567 && i = e569 && 1 = e570 )) and i' = e568 && e568 = e567 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 20
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( exists ( e573,e574 : ( e573 = e571+e574 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( exists ( e573,e574 : ( e573 = e571+e574 && k = e573 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( exists ( e573,e574 : ( e573 = e571+e574 && k = e573 && 1 = e574 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( exists ( e573,e574 : ( e573 = e571+e574 && k = e573 && 1 = e574 )) and k' = e572 && e572 = e571 )) and exists ( e575,e576 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( exists ( e573,e574 : ( e573 = e571+e574 && k = e573 && 1 = e574 )) and k' = e572 && e572 = e571 )) and exists ( e575,e576 : ( exists ( e577,e578 : ( e577 = e575+e578 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( exists ( e573,e574 : ( e573 = e571+e574 && k = e573 && 1 = e574 )) and k' = e572 && e572 = e571 )) and exists ( e575,e576 : ( exists ( e577,e578 : ( e577 = e575+e578 && j = e577 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( exists ( e573,e574 : ( e573 = e571+e574 && k = e573 && 1 = e574 )) and k' = e572 && e572 = e571 )) and exists ( e575,e576 : ( exists ( e577,e578 : ( e577 = e575+e578 && j = e577 && 1 = e578 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( exists ( e573,e574 : ( e573 = e571+e574 && k = e573 && 1 = e574 )) and k' = e572 && e572 = e571 )) and exists ( e575,e576 : ( exists ( e577,e578 : ( e577 = e575+e578 && j = e577 && 1 = e578 )) and j' = e576 && e576 = e575 )) and exists ( e579,e580 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( exists ( e573,e574 : ( e573 = e571+e574 && k = e573 && 1 = e574 )) and k' = e572 && e572 = e571 )) and exists ( e575,e576 : ( exists ( e577,e578 : ( e577 = e575+e578 && j = e577 && 1 = e578 )) and j' = e576 && e576 = e575 )) and exists ( e579,e580 : ( exists ( e581,e582 : ( e581 = e579+e582 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( exists ( e573,e574 : ( e573 = e571+e574 && k = e573 && 1 = e574 )) and k' = e572 && e572 = e571 )) and exists ( e575,e576 : ( exists ( e577,e578 : ( e577 = e575+e578 && j = e577 && 1 = e578 )) and j' = e576 && e576 = e575 )) and exists ( e579,e580 : ( exists ( e581,e582 : ( e581 = e579+e582 && i = e581 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( exists ( e573,e574 : ( e573 = e571+e574 && k = e573 && 1 = e574 )) and k' = e572 && e572 = e571 )) and exists ( e575,e576 : ( exists ( e577,e578 : ( e577 = e575+e578 && j = e577 && 1 = e578 )) and j' = e576 && e576 = e575 )) and exists ( e579,e580 : ( exists ( e581,e582 : ( e581 = e579+e582 && i = e581 && 1 = e582 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e571,e572 : ( exists ( e573,e574 : ( e573 = e571+e574 && k = e573 && 1 = e574 )) and k' = e572 && e572 = e571 )) and exists ( e575,e576 : ( exists ( e577,e578 : ( e577 = e575+e578 && j = e577 && 1 = e578 )) and j' = e576 && e576 = e575 )) and exists ( e579,e580 : ( exists ( e581,e582 : ( e581 = e579+e582 && i = e581 && 1 = e582 )) and i' = e580 && e580 = e579 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 21
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( exists ( e585,e586 : ( e585 = e583+e586 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( exists ( e585,e586 : ( e585 = e583+e586 && k = e585 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( exists ( e585,e586 : ( e585 = e583+e586 && k = e585 && 1 = e586 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( exists ( e585,e586 : ( e585 = e583+e586 && k = e585 && 1 = e586 )) and k' = e584 && e584 = e583 )) and exists ( e587,e588 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( exists ( e585,e586 : ( e585 = e583+e586 && k = e585 && 1 = e586 )) and k' = e584 && e584 = e583 )) and exists ( e587,e588 : ( exists ( e589,e590 : ( e589+e590 = e587 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( exists ( e585,e586 : ( e585 = e583+e586 && k = e585 && 1 = e586 )) and k' = e584 && e584 = e583 )) and exists ( e587,e588 : ( exists ( e589,e590 : ( e589+e590 = e587 && j = e589 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( exists ( e585,e586 : ( e585 = e583+e586 && k = e585 && 1 = e586 )) and k' = e584 && e584 = e583 )) and exists ( e587,e588 : ( exists ( e589,e590 : ( e589+e590 = e587 && j = e589 && 1 = e590 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( exists ( e585,e586 : ( e585 = e583+e586 && k = e585 && 1 = e586 )) and k' = e584 && e584 = e583 )) and exists ( e587,e588 : ( exists ( e589,e590 : ( e589+e590 = e587 && j = e589 && 1 = e590 )) and j' = e588 && e588 = e587 )) and exists ( e591,e592 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( exists ( e585,e586 : ( e585 = e583+e586 && k = e585 && 1 = e586 )) and k' = e584 && e584 = e583 )) and exists ( e587,e588 : ( exists ( e589,e590 : ( e589+e590 = e587 && j = e589 && 1 = e590 )) and j' = e588 && e588 = e587 )) and exists ( e591,e592 : ( exists ( e593,e594 : ( e593 = e591+e594 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( exists ( e585,e586 : ( e585 = e583+e586 && k = e585 && 1 = e586 )) and k' = e584 && e584 = e583 )) and exists ( e587,e588 : ( exists ( e589,e590 : ( e589+e590 = e587 && j = e589 && 1 = e590 )) and j' = e588 && e588 = e587 )) and exists ( e591,e592 : ( exists ( e593,e594 : ( e593 = e591+e594 && i = e593 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( exists ( e585,e586 : ( e585 = e583+e586 && k = e585 && 1 = e586 )) and k' = e584 && e584 = e583 )) and exists ( e587,e588 : ( exists ( e589,e590 : ( e589+e590 = e587 && j = e589 && 1 = e590 )) and j' = e588 && e588 = e587 )) and exists ( e591,e592 : ( exists ( e593,e594 : ( e593 = e591+e594 && i = e593 && 1 = e594 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e583,e584 : ( exists ( e585,e586 : ( e585 = e583+e586 && k = e585 && 1 = e586 )) and k' = e584 && e584 = e583 )) and exists ( e587,e588 : ( exists ( e589,e590 : ( e589+e590 = e587 && j = e589 && 1 = e590 )) and j' = e588 && e588 = e587 )) and exists ( e591,e592 : ( exists ( e593,e594 : ( e593 = e591+e594 && i = e593 && 1 = e594 )) and i' = e592 && e592 = e591 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 22
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( exists ( e597,e598 : ( e597+e598 = e595 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( exists ( e597,e598 : ( e597+e598 = e595 && k = e597 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( exists ( e597,e598 : ( e597+e598 = e595 && k = e597 && 1 = e598 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( exists ( e597,e598 : ( e597+e598 = e595 && k = e597 && 1 = e598 )) and k' = e596 && e596 = e595 )) and exists ( e599,e600 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( exists ( e597,e598 : ( e597+e598 = e595 && k = e597 && 1 = e598 )) and k' = e596 && e596 = e595 )) and exists ( e599,e600 : ( exists ( e601,e602 : ( e601 = e599+e602 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( exists ( e597,e598 : ( e597+e598 = e595 && k = e597 && 1 = e598 )) and k' = e596 && e596 = e595 )) and exists ( e599,e600 : ( exists ( e601,e602 : ( e601 = e599+e602 && j = e601 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( exists ( e597,e598 : ( e597+e598 = e595 && k = e597 && 1 = e598 )) and k' = e596 && e596 = e595 )) and exists ( e599,e600 : ( exists ( e601,e602 : ( e601 = e599+e602 && j = e601 && 1 = e602 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( exists ( e597,e598 : ( e597+e598 = e595 && k = e597 && 1 = e598 )) and k' = e596 && e596 = e595 )) and exists ( e599,e600 : ( exists ( e601,e602 : ( e601 = e599+e602 && j = e601 && 1 = e602 )) and j' = e600 && e600 = e599 )) and exists ( e603,e604 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( exists ( e597,e598 : ( e597+e598 = e595 && k = e597 && 1 = e598 )) and k' = e596 && e596 = e595 )) and exists ( e599,e600 : ( exists ( e601,e602 : ( e601 = e599+e602 && j = e601 && 1 = e602 )) and j' = e600 && e600 = e599 )) and exists ( e603,e604 : ( exists ( e605,e606 : ( e605 = e603+e606 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( exists ( e597,e598 : ( e597+e598 = e595 && k = e597 && 1 = e598 )) and k' = e596 && e596 = e595 )) and exists ( e599,e600 : ( exists ( e601,e602 : ( e601 = e599+e602 && j = e601 && 1 = e602 )) and j' = e600 && e600 = e599 )) and exists ( e603,e604 : ( exists ( e605,e606 : ( e605 = e603+e606 && i = e605 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( exists ( e597,e598 : ( e597+e598 = e595 && k = e597 && 1 = e598 )) and k' = e596 && e596 = e595 )) and exists ( e599,e600 : ( exists ( e601,e602 : ( e601 = e599+e602 && j = e601 && 1 = e602 )) and j' = e600 && e600 = e599 )) and exists ( e603,e604 : ( exists ( e605,e606 : ( e605 = e603+e606 && i = e605 && 1 = e606 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e595,e596 : ( exists ( e597,e598 : ( e597+e598 = e595 && k = e597 && 1 = e598 )) and k' = e596 && e596 = e595 )) and exists ( e599,e600 : ( exists ( e601,e602 : ( e601 = e599+e602 && j = e601 && 1 = e602 )) and j' = e600 && e600 = e599 )) and exists ( e603,e604 : ( exists ( e605,e606 : ( e605 = e603+e606 && i = e605 && 1 = e606 )) and i' = e604 && e604 = e603 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 23
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( exists ( e609,e610 : ( e609+e610 = e607 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( exists ( e609,e610 : ( e609+e610 = e607 && k = e609 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( exists ( e609,e610 : ( e609+e610 = e607 && k = e609 && 1 = e610 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( exists ( e609,e610 : ( e609+e610 = e607 && k = e609 && 1 = e610 )) and k' = e608 && e608 = e607 )) and exists ( e611,e612 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( exists ( e609,e610 : ( e609+e610 = e607 && k = e609 && 1 = e610 )) and k' = e608 && e608 = e607 )) and exists ( e611,e612 : ( exists ( e613,e614 : ( e613+e614 = e611 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( exists ( e609,e610 : ( e609+e610 = e607 && k = e609 && 1 = e610 )) and k' = e608 && e608 = e607 )) and exists ( e611,e612 : ( exists ( e613,e614 : ( e613+e614 = e611 && j = e613 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( exists ( e609,e610 : ( e609+e610 = e607 && k = e609 && 1 = e610 )) and k' = e608 && e608 = e607 )) and exists ( e611,e612 : ( exists ( e613,e614 : ( e613+e614 = e611 && j = e613 && 1 = e614 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( exists ( e609,e610 : ( e609+e610 = e607 && k = e609 && 1 = e610 )) and k' = e608 && e608 = e607 )) and exists ( e611,e612 : ( exists ( e613,e614 : ( e613+e614 = e611 && j = e613 && 1 = e614 )) and j' = e612 && e612 = e611 )) and exists ( e615,e616 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( exists ( e609,e610 : ( e609+e610 = e607 && k = e609 && 1 = e610 )) and k' = e608 && e608 = e607 )) and exists ( e611,e612 : ( exists ( e613,e614 : ( e613+e614 = e611 && j = e613 && 1 = e614 )) and j' = e612 && e612 = e611 )) and exists ( e615,e616 : ( exists ( e617,e618 : ( e617 = e615+e618 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( exists ( e609,e610 : ( e609+e610 = e607 && k = e609 && 1 = e610 )) and k' = e608 && e608 = e607 )) and exists ( e611,e612 : ( exists ( e613,e614 : ( e613+e614 = e611 && j = e613 && 1 = e614 )) and j' = e612 && e612 = e611 )) and exists ( e615,e616 : ( exists ( e617,e618 : ( e617 = e615+e618 && i = e617 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( exists ( e609,e610 : ( e609+e610 = e607 && k = e609 && 1 = e610 )) and k' = e608 && e608 = e607 )) and exists ( e611,e612 : ( exists ( e613,e614 : ( e613+e614 = e611 && j = e613 && 1 = e614 )) and j' = e612 && e612 = e611 )) and exists ( e615,e616 : ( exists ( e617,e618 : ( e617 = e615+e618 && i = e617 && 1 = e618 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e607,e608 : ( exists ( e609,e610 : ( e609+e610 = e607 && k = e609 && 1 = e610 )) and k' = e608 && e608 = e607 )) and exists ( e611,e612 : ( exists ( e613,e614 : ( e613+e614 = e611 && j = e613 && 1 = e614 )) and j' = e612 && e612 = e611 )) and exists ( e615,e616 : ( exists ( e617,e618 : ( e617 = e615+e618 && i = e617 && 1 = e618 )) and i' = e616 && e616 = e615 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 24
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( exists ( e621,e622 : ( e621 = e619+e622 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( exists ( e621,e622 : ( e621 = e619+e622 && k = e621 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( exists ( e621,e622 : ( e621 = e619+e622 && k = e621 && 1 = e622 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( exists ( e621,e622 : ( e621 = e619+e622 && k = e621 && 1 = e622 )) and k' = e620 && e620 = e619 )) and exists ( e623,e624 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( exists ( e621,e622 : ( e621 = e619+e622 && k = e621 && 1 = e622 )) and k' = e620 && e620 = e619 )) and exists ( e623,e624 : ( exists ( e625,e626 : ( e625 = e623+e626 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( exists ( e621,e622 : ( e621 = e619+e622 && k = e621 && 1 = e622 )) and k' = e620 && e620 = e619 )) and exists ( e623,e624 : ( exists ( e625,e626 : ( e625 = e623+e626 && j = e625 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( exists ( e621,e622 : ( e621 = e619+e622 && k = e621 && 1 = e622 )) and k' = e620 && e620 = e619 )) and exists ( e623,e624 : ( exists ( e625,e626 : ( e625 = e623+e626 && j = e625 && 1 = e626 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( exists ( e621,e622 : ( e621 = e619+e622 && k = e621 && 1 = e622 )) and k' = e620 && e620 = e619 )) and exists ( e623,e624 : ( exists ( e625,e626 : ( e625 = e623+e626 && j = e625 && 1 = e626 )) and j' = e624 && e624 = e623 )) and exists ( e627,e628 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( exists ( e621,e622 : ( e621 = e619+e622 && k = e621 && 1 = e622 )) and k' = e620 && e620 = e619 )) and exists ( e623,e624 : ( exists ( e625,e626 : ( e625 = e623+e626 && j = e625 && 1 = e626 )) and j' = e624 && e624 = e623 )) and exists ( e627,e628 : ( exists ( e629,e630 : ( e629+e630 = e627 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( exists ( e621,e622 : ( e621 = e619+e622 && k = e621 && 1 = e622 )) and k' = e620 && e620 = e619 )) and exists ( e623,e624 : ( exists ( e625,e626 : ( e625 = e623+e626 && j = e625 && 1 = e626 )) and j' = e624 && e624 = e623 )) and exists ( e627,e628 : ( exists ( e629,e630 : ( e629+e630 = e627 && i = e629 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( exists ( e621,e622 : ( e621 = e619+e622 && k = e621 && 1 = e622 )) and k' = e620 && e620 = e619 )) and exists ( e623,e624 : ( exists ( e625,e626 : ( e625 = e623+e626 && j = e625 && 1 = e626 )) and j' = e624 && e624 = e623 )) and exists ( e627,e628 : ( exists ( e629,e630 : ( e629+e630 = e627 && i = e629 && 1 = e630 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e619,e620 : ( exists ( e621,e622 : ( e621 = e619+e622 && k = e621 && 1 = e622 )) and k' = e620 && e620 = e619 )) and exists ( e623,e624 : ( exists ( e625,e626 : ( e625 = e623+e626 && j = e625 && 1 = e626 )) and j' = e624 && e624 = e623 )) and exists ( e627,e628 : ( exists ( e629,e630 : ( e629+e630 = e627 && i = e629 && 1 = e630 )) and i' = e628 && e628 = e627 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 25
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( exists ( e633,e634 : ( e633 = e631+e634 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( exists ( e633,e634 : ( e633 = e631+e634 && k = e633 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( exists ( e633,e634 : ( e633 = e631+e634 && k = e633 && 1 = e634 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( exists ( e633,e634 : ( e633 = e631+e634 && k = e633 && 1 = e634 )) and k' = e632 && e632 = e631 )) and exists ( e635,e636 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( exists ( e633,e634 : ( e633 = e631+e634 && k = e633 && 1 = e634 )) and k' = e632 && e632 = e631 )) and exists ( e635,e636 : ( exists ( e637,e638 : ( e637+e638 = e635 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( exists ( e633,e634 : ( e633 = e631+e634 && k = e633 && 1 = e634 )) and k' = e632 && e632 = e631 )) and exists ( e635,e636 : ( exists ( e637,e638 : ( e637+e638 = e635 && j = e637 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( exists ( e633,e634 : ( e633 = e631+e634 && k = e633 && 1 = e634 )) and k' = e632 && e632 = e631 )) and exists ( e635,e636 : ( exists ( e637,e638 : ( e637+e638 = e635 && j = e637 && 1 = e638 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( exists ( e633,e634 : ( e633 = e631+e634 && k = e633 && 1 = e634 )) and k' = e632 && e632 = e631 )) and exists ( e635,e636 : ( exists ( e637,e638 : ( e637+e638 = e635 && j = e637 && 1 = e638 )) and j' = e636 && e636 = e635 )) and exists ( e639,e640 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( exists ( e633,e634 : ( e633 = e631+e634 && k = e633 && 1 = e634 )) and k' = e632 && e632 = e631 )) and exists ( e635,e636 : ( exists ( e637,e638 : ( e637+e638 = e635 && j = e637 && 1 = e638 )) and j' = e636 && e636 = e635 )) and exists ( e639,e640 : ( exists ( e641,e642 : ( e641+e642 = e639 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( exists ( e633,e634 : ( e633 = e631+e634 && k = e633 && 1 = e634 )) and k' = e632 && e632 = e631 )) and exists ( e635,e636 : ( exists ( e637,e638 : ( e637+e638 = e635 && j = e637 && 1 = e638 )) and j' = e636 && e636 = e635 )) and exists ( e639,e640 : ( exists ( e641,e642 : ( e641+e642 = e639 && i = e641 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( exists ( e633,e634 : ( e633 = e631+e634 && k = e633 && 1 = e634 )) and k' = e632 && e632 = e631 )) and exists ( e635,e636 : ( exists ( e637,e638 : ( e637+e638 = e635 && j = e637 && 1 = e638 )) and j' = e636 && e636 = e635 )) and exists ( e639,e640 : ( exists ( e641,e642 : ( e641+e642 = e639 && i = e641 && 1 = e642 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e631,e632 : ( exists ( e633,e634 : ( e633 = e631+e634 && k = e633 && 1 = e634 )) and k' = e632 && e632 = e631 )) and exists ( e635,e636 : ( exists ( e637,e638 : ( e637+e638 = e635 && j = e637 && 1 = e638 )) and j' = e636 && e636 = e635 )) and exists ( e639,e640 : ( exists ( e641,e642 : ( e641+e642 = e639 && i = e641 && 1 = e642 )) and i' = e640 && e640 = e639 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 26
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( exists ( e645,e646 : ( e645+e646 = e643 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( exists ( e645,e646 : ( e645+e646 = e643 && k = e645 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( exists ( e645,e646 : ( e645+e646 = e643 && k = e645 && 1 = e646 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( exists ( e645,e646 : ( e645+e646 = e643 && k = e645 && 1 = e646 )) and k' = e644 && e644 = e643 )) and exists ( e647,e648 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( exists ( e645,e646 : ( e645+e646 = e643 && k = e645 && 1 = e646 )) and k' = e644 && e644 = e643 )) and exists ( e647,e648 : ( exists ( e649,e650 : ( e649 = e647+e650 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( exists ( e645,e646 : ( e645+e646 = e643 && k = e645 && 1 = e646 )) and k' = e644 && e644 = e643 )) and exists ( e647,e648 : ( exists ( e649,e650 : ( e649 = e647+e650 && j = e649 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( exists ( e645,e646 : ( e645+e646 = e643 && k = e645 && 1 = e646 )) and k' = e644 && e644 = e643 )) and exists ( e647,e648 : ( exists ( e649,e650 : ( e649 = e647+e650 && j = e649 && 1 = e650 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( exists ( e645,e646 : ( e645+e646 = e643 && k = e645 && 1 = e646 )) and k' = e644 && e644 = e643 )) and exists ( e647,e648 : ( exists ( e649,e650 : ( e649 = e647+e650 && j = e649 && 1 = e650 )) and j' = e648 && e648 = e647 )) and exists ( e651,e652 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( exists ( e645,e646 : ( e645+e646 = e643 && k = e645 && 1 = e646 )) and k' = e644 && e644 = e643 )) and exists ( e647,e648 : ( exists ( e649,e650 : ( e649 = e647+e650 && j = e649 && 1 = e650 )) and j' = e648 && e648 = e647 )) and exists ( e651,e652 : ( exists ( e653,e654 : ( e653+e654 = e651 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( exists ( e645,e646 : ( e645+e646 = e643 && k = e645 && 1 = e646 )) and k' = e644 && e644 = e643 )) and exists ( e647,e648 : ( exists ( e649,e650 : ( e649 = e647+e650 && j = e649 && 1 = e650 )) and j' = e648 && e648 = e647 )) and exists ( e651,e652 : ( exists ( e653,e654 : ( e653+e654 = e651 && i = e653 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( exists ( e645,e646 : ( e645+e646 = e643 && k = e645 && 1 = e646 )) and k' = e644 && e644 = e643 )) and exists ( e647,e648 : ( exists ( e649,e650 : ( e649 = e647+e650 && j = e649 && 1 = e650 )) and j' = e648 && e648 = e647 )) and exists ( e651,e652 : ( exists ( e653,e654 : ( e653+e654 = e651 && i = e653 && 1 = e654 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e643,e644 : ( exists ( e645,e646 : ( e645+e646 = e643 && k = e645 && 1 = e646 )) and k' = e644 && e644 = e643 )) and exists ( e647,e648 : ( exists ( e649,e650 : ( e649 = e647+e650 && j = e649 && 1 = e650 )) and j' = e648 && e648 = e647 )) and exists ( e651,e652 : ( exists ( e653,e654 : ( e653+e654 = e651 && i = e653 && 1 = e654 )) and i' = e652 && e652 = e651 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 27
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( exists ( e657,e658 : ( e657+e658 = e655 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( exists ( e657,e658 : ( e657+e658 = e655 && k = e657 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( exists ( e657,e658 : ( e657+e658 = e655 && k = e657 && 1 = e658 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( exists ( e657,e658 : ( e657+e658 = e655 && k = e657 && 1 = e658 )) and k' = e656 && e656 = e655 )) and exists ( e659,e660 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( exists ( e657,e658 : ( e657+e658 = e655 && k = e657 && 1 = e658 )) and k' = e656 && e656 = e655 )) and exists ( e659,e660 : ( exists ( e661,e662 : ( e661+e662 = e659 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( exists ( e657,e658 : ( e657+e658 = e655 && k = e657 && 1 = e658 )) and k' = e656 && e656 = e655 )) and exists ( e659,e660 : ( exists ( e661,e662 : ( e661+e662 = e659 && j = e661 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( exists ( e657,e658 : ( e657+e658 = e655 && k = e657 && 1 = e658 )) and k' = e656 && e656 = e655 )) and exists ( e659,e660 : ( exists ( e661,e662 : ( e661+e662 = e659 && j = e661 && 1 = e662 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( exists ( e657,e658 : ( e657+e658 = e655 && k = e657 && 1 = e658 )) and k' = e656 && e656 = e655 )) and exists ( e659,e660 : ( exists ( e661,e662 : ( e661+e662 = e659 && j = e661 && 1 = e662 )) and j' = e660 && e660 = e659 )) and exists ( e663,e664 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( exists ( e657,e658 : ( e657+e658 = e655 && k = e657 && 1 = e658 )) and k' = e656 && e656 = e655 )) and exists ( e659,e660 : ( exists ( e661,e662 : ( e661+e662 = e659 && j = e661 && 1 = e662 )) and j' = e660 && e660 = e659 )) and exists ( e663,e664 : ( exists ( e665,e666 : ( e665+e666 = e663 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( exists ( e657,e658 : ( e657+e658 = e655 && k = e657 && 1 = e658 )) and k' = e656 && e656 = e655 )) and exists ( e659,e660 : ( exists ( e661,e662 : ( e661+e662 = e659 && j = e661 && 1 = e662 )) and j' = e660 && e660 = e659 )) and exists ( e663,e664 : ( exists ( e665,e666 : ( e665+e666 = e663 && i = e665 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( exists ( e657,e658 : ( e657+e658 = e655 && k = e657 && 1 = e658 )) and k' = e656 && e656 = e655 )) and exists ( e659,e660 : ( exists ( e661,e662 : ( e661+e662 = e659 && j = e661 && 1 = e662 )) and j' = e660 && e660 = e659 )) and exists ( e663,e664 : ( exists ( e665,e666 : ( e665+e666 = e663 && i = e665 && 1 = e666 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e655,e656 : ( exists ( e657,e658 : ( e657+e658 = e655 && k = e657 && 1 = e658 )) and k' = e656 && e656 = e655 )) and exists ( e659,e660 : ( exists ( e661,e662 : ( e661+e662 = e659 && j = e661 && 1 = e662 )) and j' = e660 && e660 = e659 )) and exists ( e663,e664 : ( exists ( e665,e666 : ( e665+e666 = e663 && i = e665 && 1 = e666 )) and i' = e664 && e664 = e663 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0
j 4

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))
repr2   _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))

28 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[3] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[4] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[5] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[6] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[7] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[8] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[9] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[10] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[11] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[12] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[13] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[14] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[15] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[16] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[17] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[18] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[19] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[20] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[21] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[22] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[23] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[24] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[25] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[26] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[27] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))

3 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e667,e668 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e667,e668 : ( k = e667 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e667,e668 : ( k = e667 && k' = e668 && e668 = e667 )) and exists ( e669,e670 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e667,e668 : ( k = e667 && k' = e668 && e668 = e667 )) and exists ( e669,e670 : ( j = e669 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e667,e668 : ( k = e667 && k' = e668 && e668 = e667 )) and exists ( e669,e670 : ( j = e669 && j' = e670 && e670 = e669 )) and exists ( e671,e672 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e667,e668 : ( k = e667 && k' = e668 && e668 = e667 )) and exists ( e669,e670 : ( j = e669 && j' = e670 && e670 = e669 )) and exists ( e671,e672 : ( i = e671 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e667,e668 : ( k = e667 && k' = e668 && e668 = e667 )) and exists ( e669,e670 : ( j = e669 && j' = e670 && e670 = e669 )) and exists ( e671,e672 : ( i = e671 && i' = e672 && e672 = e671 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 1
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e673,e674 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e673,e674 : ( k = e673 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e673,e674 : ( k = e673 && k' = e674 && e674 = e673 )) and exists ( e675,e676 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e673,e674 : ( k = e673 && k' = e674 && e674 = e673 )) and exists ( e675,e676 : ( j = e675 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e673,e674 : ( k = e673 && k' = e674 && e674 = e673 )) and exists ( e675,e676 : ( j = e675 && j' = e676 && e676 = e675 )) and exists ( e677,e678 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e673,e674 : ( k = e673 && k' = e674 && e674 = e673 )) and exists ( e675,e676 : ( j = e675 && j' = e676 && e676 = e675 )) and exists ( e677,e678 : ( i = e677 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e673,e674 : ( k = e673 && k' = e674 && e674 = e673 )) and exists ( e675,e676 : ( j = e675 && j' = e676 && e676 = e675 )) and exists ( e677,e678 : ( i = e677 && i' = e678 && e678 = e677 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 2
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e679,e680 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e679,e680 : ( exists ( e681,e682 : ( e681 = e679+e682 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e679,e680 : ( exists ( e681,e682 : ( e681 = e679+e682 && k = e681 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e679,e680 : ( exists ( e681,e682 : ( e681 = e679+e682 && k = e681 && 1 = e682 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e679,e680 : ( exists ( e681,e682 : ( e681 = e679+e682 && k = e681 && 1 = e682 )) and k' = e680 && e680 = e679 )) and exists ( e683,e684 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e679,e680 : ( exists ( e681,e682 : ( e681 = e679+e682 && k = e681 && 1 = e682 )) and k' = e680 && e680 = e679 )) and exists ( e683,e684 : ( j = e683 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e679,e680 : ( exists ( e681,e682 : ( e681 = e679+e682 && k = e681 && 1 = e682 )) and k' = e680 && e680 = e679 )) and exists ( e683,e684 : ( j = e683 && j' = e684 && e684 = e683 )) and exists ( e685,e686 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e679,e680 : ( exists ( e681,e682 : ( e681 = e679+e682 && k = e681 && 1 = e682 )) and k' = e680 && e680 = e679 )) and exists ( e683,e684 : ( j = e683 && j' = e684 && e684 = e683 )) and exists ( e685,e686 : ( i = e685 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e679,e680 : ( exists ( e681,e682 : ( e681 = e679+e682 && k = e681 && 1 = e682 )) and k' = e680 && e680 = e679 )) and exists ( e683,e684 : ( j = e683 && j' = e684 && e684 = e683 )) and exists ( e685,e686 : ( i = e685 && i' = e686 && e686 = e685 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 3
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e687,e688 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e687,e688 : ( k = e687 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e687,e688 : ( k = e687 && k' = e688 && e688 = e687 )) and exists ( e689,e690 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e687,e688 : ( k = e687 && k' = e688 && e688 = e687 )) and exists ( e689,e690 : ( exists ( e691,e692 : ( e691 = e689+e692 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e687,e688 : ( k = e687 && k' = e688 && e688 = e687 )) and exists ( e689,e690 : ( exists ( e691,e692 : ( e691 = e689+e692 && j = e691 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e687,e688 : ( k = e687 && k' = e688 && e688 = e687 )) and exists ( e689,e690 : ( exists ( e691,e692 : ( e691 = e689+e692 && j = e691 && 1 = e692 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e687,e688 : ( k = e687 && k' = e688 && e688 = e687 )) and exists ( e689,e690 : ( exists ( e691,e692 : ( e691 = e689+e692 && j = e691 && 1 = e692 )) and j' = e690 && e690 = e689 )) and exists ( e693,e694 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e687,e688 : ( k = e687 && k' = e688 && e688 = e687 )) and exists ( e689,e690 : ( exists ( e691,e692 : ( e691 = e689+e692 && j = e691 && 1 = e692 )) and j' = e690 && e690 = e689 )) and exists ( e693,e694 : ( i = e693 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e687,e688 : ( k = e687 && k' = e688 && e688 = e687 )) and exists ( e689,e690 : ( exists ( e691,e692 : ( e691 = e689+e692 && j = e691 && 1 = e692 )) and j' = e690 && e690 = e689 )) and exists ( e693,e694 : ( i = e693 && i' = e694 && e694 = e693 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 4
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e695,e696 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e695,e696 : ( k = e695 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e695,e696 : ( k = e695 && k' = e696 && e696 = e695 )) and exists ( e697,e698 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e695,e696 : ( k = e695 && k' = e696 && e696 = e695 )) and exists ( e697,e698 : ( exists ( e699,e700 : ( e699+e700 = e697 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e695,e696 : ( k = e695 && k' = e696 && e696 = e695 )) and exists ( e697,e698 : ( exists ( e699,e700 : ( e699+e700 = e697 && j = e699 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e695,e696 : ( k = e695 && k' = e696 && e696 = e695 )) and exists ( e697,e698 : ( exists ( e699,e700 : ( e699+e700 = e697 && j = e699 && 1 = e700 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e695,e696 : ( k = e695 && k' = e696 && e696 = e695 )) and exists ( e697,e698 : ( exists ( e699,e700 : ( e699+e700 = e697 && j = e699 && 1 = e700 )) and j' = e698 && e698 = e697 )) and exists ( e701,e702 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e695,e696 : ( k = e695 && k' = e696 && e696 = e695 )) and exists ( e697,e698 : ( exists ( e699,e700 : ( e699+e700 = e697 && j = e699 && 1 = e700 )) and j' = e698 && e698 = e697 )) and exists ( e701,e702 : ( i = e701 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e695,e696 : ( k = e695 && k' = e696 && e696 = e695 )) and exists ( e697,e698 : ( exists ( e699,e700 : ( e699+e700 = e697 && j = e699 && 1 = e700 )) and j' = e698 && e698 = e697 )) and exists ( e701,e702 : ( i = e701 && i' = e702 && e702 = e701 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 5
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e703,e704 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e703,e704 : ( exists ( e705,e706 : ( e705+e706 = e703 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e703,e704 : ( exists ( e705,e706 : ( e705+e706 = e703 && k = e705 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e703,e704 : ( exists ( e705,e706 : ( e705+e706 = e703 && k = e705 && 1 = e706 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e703,e704 : ( exists ( e705,e706 : ( e705+e706 = e703 && k = e705 && 1 = e706 )) and k' = e704 && e704 = e703 )) and exists ( e707,e708 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e703,e704 : ( exists ( e705,e706 : ( e705+e706 = e703 && k = e705 && 1 = e706 )) and k' = e704 && e704 = e703 )) and exists ( e707,e708 : ( j = e707 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e703,e704 : ( exists ( e705,e706 : ( e705+e706 = e703 && k = e705 && 1 = e706 )) and k' = e704 && e704 = e703 )) and exists ( e707,e708 : ( j = e707 && j' = e708 && e708 = e707 )) and exists ( e709,e710 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e703,e704 : ( exists ( e705,e706 : ( e705+e706 = e703 && k = e705 && 1 = e706 )) and k' = e704 && e704 = e703 )) and exists ( e707,e708 : ( j = e707 && j' = e708 && e708 = e707 )) and exists ( e709,e710 : ( i = e709 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e703,e704 : ( exists ( e705,e706 : ( e705+e706 = e703 && k = e705 && 1 = e706 )) and k' = e704 && e704 = e703 )) and exists ( e707,e708 : ( j = e707 && j' = e708 && e708 = e707 )) and exists ( e709,e710 : ( i = e709 && i' = e710 && e710 = e709 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 6
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e711,e712 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e711,e712 : ( k = e711 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e711,e712 : ( k = e711 && k' = e712 && e712 = e711 )) and exists ( e713,e714 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e711,e712 : ( k = e711 && k' = e712 && e712 = e711 )) and exists ( e713,e714 : ( j = e713 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e711,e712 : ( k = e711 && k' = e712 && e712 = e711 )) and exists ( e713,e714 : ( j = e713 && j' = e714 && e714 = e713 )) and exists ( e715,e716 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e711,e712 : ( k = e711 && k' = e712 && e712 = e711 )) and exists ( e713,e714 : ( j = e713 && j' = e714 && e714 = e713 )) and exists ( e715,e716 : ( exists ( e717,e718 : ( e717 = e715+e718 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e711,e712 : ( k = e711 && k' = e712 && e712 = e711 )) and exists ( e713,e714 : ( j = e713 && j' = e714 && e714 = e713 )) and exists ( e715,e716 : ( exists ( e717,e718 : ( e717 = e715+e718 && i = e717 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e711,e712 : ( k = e711 && k' = e712 && e712 = e711 )) and exists ( e713,e714 : ( j = e713 && j' = e714 && e714 = e713 )) and exists ( e715,e716 : ( exists ( e717,e718 : ( e717 = e715+e718 && i = e717 && 1 = e718 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e711,e712 : ( k = e711 && k' = e712 && e712 = e711 )) and exists ( e713,e714 : ( j = e713 && j' = e714 && e714 = e713 )) and exists ( e715,e716 : ( exists ( e717,e718 : ( e717 = e715+e718 && i = e717 && 1 = e718 )) and i' = e716 && e716 = e715 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 7
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e719,e720 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e719,e720 : ( k = e719 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e719,e720 : ( k = e719 && k' = e720 && e720 = e719 )) and exists ( e721,e722 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e719,e720 : ( k = e719 && k' = e720 && e720 = e719 )) and exists ( e721,e722 : ( j = e721 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e719,e720 : ( k = e719 && k' = e720 && e720 = e719 )) and exists ( e721,e722 : ( j = e721 && j' = e722 && e722 = e721 )) and exists ( e723,e724 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e719,e720 : ( k = e719 && k' = e720 && e720 = e719 )) and exists ( e721,e722 : ( j = e721 && j' = e722 && e722 = e721 )) and exists ( e723,e724 : ( exists ( e725,e726 : ( e725+e726 = e723 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e719,e720 : ( k = e719 && k' = e720 && e720 = e719 )) and exists ( e721,e722 : ( j = e721 && j' = e722 && e722 = e721 )) and exists ( e723,e724 : ( exists ( e725,e726 : ( e725+e726 = e723 && i = e725 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e719,e720 : ( k = e719 && k' = e720 && e720 = e719 )) and exists ( e721,e722 : ( j = e721 && j' = e722 && e722 = e721 )) and exists ( e723,e724 : ( exists ( e725,e726 : ( e725+e726 = e723 && i = e725 && 1 = e726 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e719,e720 : ( k = e719 && k' = e720 && e720 = e719 )) and exists ( e721,e722 : ( j = e721 && j' = e722 && e722 = e721 )) and exists ( e723,e724 : ( exists ( e725,e726 : ( e725+e726 = e723 && i = e725 && 1 = e726 )) and i' = e724 && e724 = e723 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 8
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e727,e728 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e727,e728 : ( exists ( e729,e730 : ( e729 = e727+e730 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e727,e728 : ( exists ( e729,e730 : ( e729 = e727+e730 && k = e729 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e727,e728 : ( exists ( e729,e730 : ( e729 = e727+e730 && k = e729 && 1 = e730 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e727,e728 : ( exists ( e729,e730 : ( e729 = e727+e730 && k = e729 && 1 = e730 )) and k' = e728 && e728 = e727 )) and exists ( e731,e732 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e727,e728 : ( exists ( e729,e730 : ( e729 = e727+e730 && k = e729 && 1 = e730 )) and k' = e728 && e728 = e727 )) and exists ( e731,e732 : ( j = e731 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e727,e728 : ( exists ( e729,e730 : ( e729 = e727+e730 && k = e729 && 1 = e730 )) and k' = e728 && e728 = e727 )) and exists ( e731,e732 : ( j = e731 && j' = e732 && e732 = e731 )) and exists ( e733,e734 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e727,e728 : ( exists ( e729,e730 : ( e729 = e727+e730 && k = e729 && 1 = e730 )) and k' = e728 && e728 = e727 )) and exists ( e731,e732 : ( j = e731 && j' = e732 && e732 = e731 )) and exists ( e733,e734 : ( exists ( e735,e736 : ( e735 = e733+e736 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e727,e728 : ( exists ( e729,e730 : ( e729 = e727+e730 && k = e729 && 1 = e730 )) and k' = e728 && e728 = e727 )) and exists ( e731,e732 : ( j = e731 && j' = e732 && e732 = e731 )) and exists ( e733,e734 : ( exists ( e735,e736 : ( e735 = e733+e736 && i = e735 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e727,e728 : ( exists ( e729,e730 : ( e729 = e727+e730 && k = e729 && 1 = e730 )) and k' = e728 && e728 = e727 )) and exists ( e731,e732 : ( j = e731 && j' = e732 && e732 = e731 )) and exists ( e733,e734 : ( exists ( e735,e736 : ( e735 = e733+e736 && i = e735 && 1 = e736 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e727,e728 : ( exists ( e729,e730 : ( e729 = e727+e730 && k = e729 && 1 = e730 )) and k' = e728 && e728 = e727 )) and exists ( e731,e732 : ( j = e731 && j' = e732 && e732 = e731 )) and exists ( e733,e734 : ( exists ( e735,e736 : ( e735 = e733+e736 && i = e735 && 1 = e736 )) and i' = e734 && e734 = e733 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 9
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e737,e738 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e737,e738 : ( k = e737 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e737,e738 : ( k = e737 && k' = e738 && e738 = e737 )) and exists ( e739,e740 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e737,e738 : ( k = e737 && k' = e738 && e738 = e737 )) and exists ( e739,e740 : ( exists ( e741,e742 : ( e741 = e739+e742 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e737,e738 : ( k = e737 && k' = e738 && e738 = e737 )) and exists ( e739,e740 : ( exists ( e741,e742 : ( e741 = e739+e742 && j = e741 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e737,e738 : ( k = e737 && k' = e738 && e738 = e737 )) and exists ( e739,e740 : ( exists ( e741,e742 : ( e741 = e739+e742 && j = e741 && 1 = e742 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e737,e738 : ( k = e737 && k' = e738 && e738 = e737 )) and exists ( e739,e740 : ( exists ( e741,e742 : ( e741 = e739+e742 && j = e741 && 1 = e742 )) and j' = e740 && e740 = e739 )) and exists ( e743,e744 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e737,e738 : ( k = e737 && k' = e738 && e738 = e737 )) and exists ( e739,e740 : ( exists ( e741,e742 : ( e741 = e739+e742 && j = e741 && 1 = e742 )) and j' = e740 && e740 = e739 )) and exists ( e743,e744 : ( exists ( e745,e746 : ( e745 = e743+e746 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e737,e738 : ( k = e737 && k' = e738 && e738 = e737 )) and exists ( e739,e740 : ( exists ( e741,e742 : ( e741 = e739+e742 && j = e741 && 1 = e742 )) and j' = e740 && e740 = e739 )) and exists ( e743,e744 : ( exists ( e745,e746 : ( e745 = e743+e746 && i = e745 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e737,e738 : ( k = e737 && k' = e738 && e738 = e737 )) and exists ( e739,e740 : ( exists ( e741,e742 : ( e741 = e739+e742 && j = e741 && 1 = e742 )) and j' = e740 && e740 = e739 )) and exists ( e743,e744 : ( exists ( e745,e746 : ( e745 = e743+e746 && i = e745 && 1 = e746 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e737,e738 : ( k = e737 && k' = e738 && e738 = e737 )) and exists ( e739,e740 : ( exists ( e741,e742 : ( e741 = e739+e742 && j = e741 && 1 = e742 )) and j' = e740 && e740 = e739 )) and exists ( e743,e744 : ( exists ( e745,e746 : ( e745 = e743+e746 && i = e745 && 1 = e746 )) and i' = e744 && e744 = e743 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 10
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e747,e748 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e747,e748 : ( k = e747 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e747,e748 : ( k = e747 && k' = e748 && e748 = e747 )) and exists ( e749,e750 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e747,e748 : ( k = e747 && k' = e748 && e748 = e747 )) and exists ( e749,e750 : ( exists ( e751,e752 : ( e751+e752 = e749 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e747,e748 : ( k = e747 && k' = e748 && e748 = e747 )) and exists ( e749,e750 : ( exists ( e751,e752 : ( e751+e752 = e749 && j = e751 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e747,e748 : ( k = e747 && k' = e748 && e748 = e747 )) and exists ( e749,e750 : ( exists ( e751,e752 : ( e751+e752 = e749 && j = e751 && 1 = e752 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e747,e748 : ( k = e747 && k' = e748 && e748 = e747 )) and exists ( e749,e750 : ( exists ( e751,e752 : ( e751+e752 = e749 && j = e751 && 1 = e752 )) and j' = e750 && e750 = e749 )) and exists ( e753,e754 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e747,e748 : ( k = e747 && k' = e748 && e748 = e747 )) and exists ( e749,e750 : ( exists ( e751,e752 : ( e751+e752 = e749 && j = e751 && 1 = e752 )) and j' = e750 && e750 = e749 )) and exists ( e753,e754 : ( exists ( e755,e756 : ( e755 = e753+e756 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e747,e748 : ( k = e747 && k' = e748 && e748 = e747 )) and exists ( e749,e750 : ( exists ( e751,e752 : ( e751+e752 = e749 && j = e751 && 1 = e752 )) and j' = e750 && e750 = e749 )) and exists ( e753,e754 : ( exists ( e755,e756 : ( e755 = e753+e756 && i = e755 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e747,e748 : ( k = e747 && k' = e748 && e748 = e747 )) and exists ( e749,e750 : ( exists ( e751,e752 : ( e751+e752 = e749 && j = e751 && 1 = e752 )) and j' = e750 && e750 = e749 )) and exists ( e753,e754 : ( exists ( e755,e756 : ( e755 = e753+e756 && i = e755 && 1 = e756 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e747,e748 : ( k = e747 && k' = e748 && e748 = e747 )) and exists ( e749,e750 : ( exists ( e751,e752 : ( e751+e752 = e749 && j = e751 && 1 = e752 )) and j' = e750 && e750 = e749 )) and exists ( e753,e754 : ( exists ( e755,e756 : ( e755 = e753+e756 && i = e755 && 1 = e756 )) and i' = e754 && e754 = e753 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 11
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e757,e758 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e757,e758 : ( exists ( e759,e760 : ( e759+e760 = e757 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e757,e758 : ( exists ( e759,e760 : ( e759+e760 = e757 && k = e759 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e757,e758 : ( exists ( e759,e760 : ( e759+e760 = e757 && k = e759 && 1 = e760 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e757,e758 : ( exists ( e759,e760 : ( e759+e760 = e757 && k = e759 && 1 = e760 )) and k' = e758 && e758 = e757 )) and exists ( e761,e762 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e757,e758 : ( exists ( e759,e760 : ( e759+e760 = e757 && k = e759 && 1 = e760 )) and k' = e758 && e758 = e757 )) and exists ( e761,e762 : ( j = e761 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e757,e758 : ( exists ( e759,e760 : ( e759+e760 = e757 && k = e759 && 1 = e760 )) and k' = e758 && e758 = e757 )) and exists ( e761,e762 : ( j = e761 && j' = e762 && e762 = e761 )) and exists ( e763,e764 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e757,e758 : ( exists ( e759,e760 : ( e759+e760 = e757 && k = e759 && 1 = e760 )) and k' = e758 && e758 = e757 )) and exists ( e761,e762 : ( j = e761 && j' = e762 && e762 = e761 )) and exists ( e763,e764 : ( exists ( e765,e766 : ( e765 = e763+e766 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e757,e758 : ( exists ( e759,e760 : ( e759+e760 = e757 && k = e759 && 1 = e760 )) and k' = e758 && e758 = e757 )) and exists ( e761,e762 : ( j = e761 && j' = e762 && e762 = e761 )) and exists ( e763,e764 : ( exists ( e765,e766 : ( e765 = e763+e766 && i = e765 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e757,e758 : ( exists ( e759,e760 : ( e759+e760 = e757 && k = e759 && 1 = e760 )) and k' = e758 && e758 = e757 )) and exists ( e761,e762 : ( j = e761 && j' = e762 && e762 = e761 )) and exists ( e763,e764 : ( exists ( e765,e766 : ( e765 = e763+e766 && i = e765 && 1 = e766 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e757,e758 : ( exists ( e759,e760 : ( e759+e760 = e757 && k = e759 && 1 = e760 )) and k' = e758 && e758 = e757 )) and exists ( e761,e762 : ( j = e761 && j' = e762 && e762 = e761 )) and exists ( e763,e764 : ( exists ( e765,e766 : ( e765 = e763+e766 && i = e765 && 1 = e766 )) and i' = e764 && e764 = e763 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 12
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e767,e768 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e767,e768 : ( exists ( e769,e770 : ( e769 = e767+e770 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e767,e768 : ( exists ( e769,e770 : ( e769 = e767+e770 && k = e769 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e767,e768 : ( exists ( e769,e770 : ( e769 = e767+e770 && k = e769 && 1 = e770 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e767,e768 : ( exists ( e769,e770 : ( e769 = e767+e770 && k = e769 && 1 = e770 )) and k' = e768 && e768 = e767 )) and exists ( e771,e772 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e767,e768 : ( exists ( e769,e770 : ( e769 = e767+e770 && k = e769 && 1 = e770 )) and k' = e768 && e768 = e767 )) and exists ( e771,e772 : ( exists ( e773,e774 : ( e773 = e771+e774 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e767,e768 : ( exists ( e769,e770 : ( e769 = e767+e770 && k = e769 && 1 = e770 )) and k' = e768 && e768 = e767 )) and exists ( e771,e772 : ( exists ( e773,e774 : ( e773 = e771+e774 && j = e773 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e767,e768 : ( exists ( e769,e770 : ( e769 = e767+e770 && k = e769 && 1 = e770 )) and k' = e768 && e768 = e767 )) and exists ( e771,e772 : ( exists ( e773,e774 : ( e773 = e771+e774 && j = e773 && 1 = e774 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e767,e768 : ( exists ( e769,e770 : ( e769 = e767+e770 && k = e769 && 1 = e770 )) and k' = e768 && e768 = e767 )) and exists ( e771,e772 : ( exists ( e773,e774 : ( e773 = e771+e774 && j = e773 && 1 = e774 )) and j' = e772 && e772 = e771 )) and exists ( e775,e776 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e767,e768 : ( exists ( e769,e770 : ( e769 = e767+e770 && k = e769 && 1 = e770 )) and k' = e768 && e768 = e767 )) and exists ( e771,e772 : ( exists ( e773,e774 : ( e773 = e771+e774 && j = e773 && 1 = e774 )) and j' = e772 && e772 = e771 )) and exists ( e775,e776 : ( i = e775 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e767,e768 : ( exists ( e769,e770 : ( e769 = e767+e770 && k = e769 && 1 = e770 )) and k' = e768 && e768 = e767 )) and exists ( e771,e772 : ( exists ( e773,e774 : ( e773 = e771+e774 && j = e773 && 1 = e774 )) and j' = e772 && e772 = e771 )) and exists ( e775,e776 : ( i = e775 && i' = e776 && e776 = e775 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 13
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e777,e778 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e777,e778 : ( exists ( e779,e780 : ( e779 = e777+e780 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e777,e778 : ( exists ( e779,e780 : ( e779 = e777+e780 && k = e779 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e777,e778 : ( exists ( e779,e780 : ( e779 = e777+e780 && k = e779 && 1 = e780 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e777,e778 : ( exists ( e779,e780 : ( e779 = e777+e780 && k = e779 && 1 = e780 )) and k' = e778 && e778 = e777 )) and exists ( e781,e782 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e777,e778 : ( exists ( e779,e780 : ( e779 = e777+e780 && k = e779 && 1 = e780 )) and k' = e778 && e778 = e777 )) and exists ( e781,e782 : ( exists ( e783,e784 : ( e783+e784 = e781 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e777,e778 : ( exists ( e779,e780 : ( e779 = e777+e780 && k = e779 && 1 = e780 )) and k' = e778 && e778 = e777 )) and exists ( e781,e782 : ( exists ( e783,e784 : ( e783+e784 = e781 && j = e783 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e777,e778 : ( exists ( e779,e780 : ( e779 = e777+e780 && k = e779 && 1 = e780 )) and k' = e778 && e778 = e777 )) and exists ( e781,e782 : ( exists ( e783,e784 : ( e783+e784 = e781 && j = e783 && 1 = e784 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e777,e778 : ( exists ( e779,e780 : ( e779 = e777+e780 && k = e779 && 1 = e780 )) and k' = e778 && e778 = e777 )) and exists ( e781,e782 : ( exists ( e783,e784 : ( e783+e784 = e781 && j = e783 && 1 = e784 )) and j' = e782 && e782 = e781 )) and exists ( e785,e786 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e777,e778 : ( exists ( e779,e780 : ( e779 = e777+e780 && k = e779 && 1 = e780 )) and k' = e778 && e778 = e777 )) and exists ( e781,e782 : ( exists ( e783,e784 : ( e783+e784 = e781 && j = e783 && 1 = e784 )) and j' = e782 && e782 = e781 )) and exists ( e785,e786 : ( i = e785 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e777,e778 : ( exists ( e779,e780 : ( e779 = e777+e780 && k = e779 && 1 = e780 )) and k' = e778 && e778 = e777 )) and exists ( e781,e782 : ( exists ( e783,e784 : ( e783+e784 = e781 && j = e783 && 1 = e784 )) and j' = e782 && e782 = e781 )) and exists ( e785,e786 : ( i = e785 && i' = e786 && e786 = e785 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 14
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e787,e788 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e787,e788 : ( exists ( e789,e790 : ( e789+e790 = e787 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e787,e788 : ( exists ( e789,e790 : ( e789+e790 = e787 && k = e789 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e787,e788 : ( exists ( e789,e790 : ( e789+e790 = e787 && k = e789 && 1 = e790 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e787,e788 : ( exists ( e789,e790 : ( e789+e790 = e787 && k = e789 && 1 = e790 )) and k' = e788 && e788 = e787 )) and exists ( e791,e792 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e787,e788 : ( exists ( e789,e790 : ( e789+e790 = e787 && k = e789 && 1 = e790 )) and k' = e788 && e788 = e787 )) and exists ( e791,e792 : ( exists ( e793,e794 : ( e793 = e791+e794 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e787,e788 : ( exists ( e789,e790 : ( e789+e790 = e787 && k = e789 && 1 = e790 )) and k' = e788 && e788 = e787 )) and exists ( e791,e792 : ( exists ( e793,e794 : ( e793 = e791+e794 && j = e793 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e787,e788 : ( exists ( e789,e790 : ( e789+e790 = e787 && k = e789 && 1 = e790 )) and k' = e788 && e788 = e787 )) and exists ( e791,e792 : ( exists ( e793,e794 : ( e793 = e791+e794 && j = e793 && 1 = e794 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e787,e788 : ( exists ( e789,e790 : ( e789+e790 = e787 && k = e789 && 1 = e790 )) and k' = e788 && e788 = e787 )) and exists ( e791,e792 : ( exists ( e793,e794 : ( e793 = e791+e794 && j = e793 && 1 = e794 )) and j' = e792 && e792 = e791 )) and exists ( e795,e796 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e787,e788 : ( exists ( e789,e790 : ( e789+e790 = e787 && k = e789 && 1 = e790 )) and k' = e788 && e788 = e787 )) and exists ( e791,e792 : ( exists ( e793,e794 : ( e793 = e791+e794 && j = e793 && 1 = e794 )) and j' = e792 && e792 = e791 )) and exists ( e795,e796 : ( i = e795 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e787,e788 : ( exists ( e789,e790 : ( e789+e790 = e787 && k = e789 && 1 = e790 )) and k' = e788 && e788 = e787 )) and exists ( e791,e792 : ( exists ( e793,e794 : ( e793 = e791+e794 && j = e793 && 1 = e794 )) and j' = e792 && e792 = e791 )) and exists ( e795,e796 : ( i = e795 && i' = e796 && e796 = e795 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 15
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e797,e798 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e797,e798 : ( exists ( e799,e800 : ( e799+e800 = e797 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e797,e798 : ( exists ( e799,e800 : ( e799+e800 = e797 && k = e799 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e797,e798 : ( exists ( e799,e800 : ( e799+e800 = e797 && k = e799 && 1 = e800 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e797,e798 : ( exists ( e799,e800 : ( e799+e800 = e797 && k = e799 && 1 = e800 )) and k' = e798 && e798 = e797 )) and exists ( e801,e802 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e797,e798 : ( exists ( e799,e800 : ( e799+e800 = e797 && k = e799 && 1 = e800 )) and k' = e798 && e798 = e797 )) and exists ( e801,e802 : ( exists ( e803,e804 : ( e803+e804 = e801 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e797,e798 : ( exists ( e799,e800 : ( e799+e800 = e797 && k = e799 && 1 = e800 )) and k' = e798 && e798 = e797 )) and exists ( e801,e802 : ( exists ( e803,e804 : ( e803+e804 = e801 && j = e803 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e797,e798 : ( exists ( e799,e800 : ( e799+e800 = e797 && k = e799 && 1 = e800 )) and k' = e798 && e798 = e797 )) and exists ( e801,e802 : ( exists ( e803,e804 : ( e803+e804 = e801 && j = e803 && 1 = e804 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e797,e798 : ( exists ( e799,e800 : ( e799+e800 = e797 && k = e799 && 1 = e800 )) and k' = e798 && e798 = e797 )) and exists ( e801,e802 : ( exists ( e803,e804 : ( e803+e804 = e801 && j = e803 && 1 = e804 )) and j' = e802 && e802 = e801 )) and exists ( e805,e806 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e797,e798 : ( exists ( e799,e800 : ( e799+e800 = e797 && k = e799 && 1 = e800 )) and k' = e798 && e798 = e797 )) and exists ( e801,e802 : ( exists ( e803,e804 : ( e803+e804 = e801 && j = e803 && 1 = e804 )) and j' = e802 && e802 = e801 )) and exists ( e805,e806 : ( i = e805 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e797,e798 : ( exists ( e799,e800 : ( e799+e800 = e797 && k = e799 && 1 = e800 )) and k' = e798 && e798 = e797 )) and exists ( e801,e802 : ( exists ( e803,e804 : ( e803+e804 = e801 && j = e803 && 1 = e804 )) and j' = e802 && e802 = e801 )) and exists ( e805,e806 : ( i = e805 && i' = e806 && e806 = e805 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 16
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e807,e808 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e807,e808 : ( exists ( e809,e810 : ( e809 = e807+e810 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e807,e808 : ( exists ( e809,e810 : ( e809 = e807+e810 && k = e809 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e807,e808 : ( exists ( e809,e810 : ( e809 = e807+e810 && k = e809 && 1 = e810 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e807,e808 : ( exists ( e809,e810 : ( e809 = e807+e810 && k = e809 && 1 = e810 )) and k' = e808 && e808 = e807 )) and exists ( e811,e812 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e807,e808 : ( exists ( e809,e810 : ( e809 = e807+e810 && k = e809 && 1 = e810 )) and k' = e808 && e808 = e807 )) and exists ( e811,e812 : ( j = e811 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e807,e808 : ( exists ( e809,e810 : ( e809 = e807+e810 && k = e809 && 1 = e810 )) and k' = e808 && e808 = e807 )) and exists ( e811,e812 : ( j = e811 && j' = e812 && e812 = e811 )) and exists ( e813,e814 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e807,e808 : ( exists ( e809,e810 : ( e809 = e807+e810 && k = e809 && 1 = e810 )) and k' = e808 && e808 = e807 )) and exists ( e811,e812 : ( j = e811 && j' = e812 && e812 = e811 )) and exists ( e813,e814 : ( exists ( e815,e816 : ( e815+e816 = e813 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e807,e808 : ( exists ( e809,e810 : ( e809 = e807+e810 && k = e809 && 1 = e810 )) and k' = e808 && e808 = e807 )) and exists ( e811,e812 : ( j = e811 && j' = e812 && e812 = e811 )) and exists ( e813,e814 : ( exists ( e815,e816 : ( e815+e816 = e813 && i = e815 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e807,e808 : ( exists ( e809,e810 : ( e809 = e807+e810 && k = e809 && 1 = e810 )) and k' = e808 && e808 = e807 )) and exists ( e811,e812 : ( j = e811 && j' = e812 && e812 = e811 )) and exists ( e813,e814 : ( exists ( e815,e816 : ( e815+e816 = e813 && i = e815 && 1 = e816 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e807,e808 : ( exists ( e809,e810 : ( e809 = e807+e810 && k = e809 && 1 = e810 )) and k' = e808 && e808 = e807 )) and exists ( e811,e812 : ( j = e811 && j' = e812 && e812 = e811 )) and exists ( e813,e814 : ( exists ( e815,e816 : ( e815+e816 = e813 && i = e815 && 1 = e816 )) and i' = e814 && e814 = e813 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 17
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e817,e818 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e817,e818 : ( k = e817 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e817,e818 : ( k = e817 && k' = e818 && e818 = e817 )) and exists ( e819,e820 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e817,e818 : ( k = e817 && k' = e818 && e818 = e817 )) and exists ( e819,e820 : ( exists ( e821,e822 : ( e821 = e819+e822 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e817,e818 : ( k = e817 && k' = e818 && e818 = e817 )) and exists ( e819,e820 : ( exists ( e821,e822 : ( e821 = e819+e822 && j = e821 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e817,e818 : ( k = e817 && k' = e818 && e818 = e817 )) and exists ( e819,e820 : ( exists ( e821,e822 : ( e821 = e819+e822 && j = e821 && 1 = e822 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e817,e818 : ( k = e817 && k' = e818 && e818 = e817 )) and exists ( e819,e820 : ( exists ( e821,e822 : ( e821 = e819+e822 && j = e821 && 1 = e822 )) and j' = e820 && e820 = e819 )) and exists ( e823,e824 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e817,e818 : ( k = e817 && k' = e818 && e818 = e817 )) and exists ( e819,e820 : ( exists ( e821,e822 : ( e821 = e819+e822 && j = e821 && 1 = e822 )) and j' = e820 && e820 = e819 )) and exists ( e823,e824 : ( exists ( e825,e826 : ( e825+e826 = e823 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e817,e818 : ( k = e817 && k' = e818 && e818 = e817 )) and exists ( e819,e820 : ( exists ( e821,e822 : ( e821 = e819+e822 && j = e821 && 1 = e822 )) and j' = e820 && e820 = e819 )) and exists ( e823,e824 : ( exists ( e825,e826 : ( e825+e826 = e823 && i = e825 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e817,e818 : ( k = e817 && k' = e818 && e818 = e817 )) and exists ( e819,e820 : ( exists ( e821,e822 : ( e821 = e819+e822 && j = e821 && 1 = e822 )) and j' = e820 && e820 = e819 )) and exists ( e823,e824 : ( exists ( e825,e826 : ( e825+e826 = e823 && i = e825 && 1 = e826 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e817,e818 : ( k = e817 && k' = e818 && e818 = e817 )) and exists ( e819,e820 : ( exists ( e821,e822 : ( e821 = e819+e822 && j = e821 && 1 = e822 )) and j' = e820 && e820 = e819 )) and exists ( e823,e824 : ( exists ( e825,e826 : ( e825+e826 = e823 && i = e825 && 1 = e826 )) and i' = e824 && e824 = e823 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 18
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e827,e828 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e827,e828 : ( k = e827 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e827,e828 : ( k = e827 && k' = e828 && e828 = e827 )) and exists ( e829,e830 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e827,e828 : ( k = e827 && k' = e828 && e828 = e827 )) and exists ( e829,e830 : ( exists ( e831,e832 : ( e831+e832 = e829 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e827,e828 : ( k = e827 && k' = e828 && e828 = e827 )) and exists ( e829,e830 : ( exists ( e831,e832 : ( e831+e832 = e829 && j = e831 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e827,e828 : ( k = e827 && k' = e828 && e828 = e827 )) and exists ( e829,e830 : ( exists ( e831,e832 : ( e831+e832 = e829 && j = e831 && 1 = e832 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e827,e828 : ( k = e827 && k' = e828 && e828 = e827 )) and exists ( e829,e830 : ( exists ( e831,e832 : ( e831+e832 = e829 && j = e831 && 1 = e832 )) and j' = e830 && e830 = e829 )) and exists ( e833,e834 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e827,e828 : ( k = e827 && k' = e828 && e828 = e827 )) and exists ( e829,e830 : ( exists ( e831,e832 : ( e831+e832 = e829 && j = e831 && 1 = e832 )) and j' = e830 && e830 = e829 )) and exists ( e833,e834 : ( exists ( e835,e836 : ( e835+e836 = e833 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e827,e828 : ( k = e827 && k' = e828 && e828 = e827 )) and exists ( e829,e830 : ( exists ( e831,e832 : ( e831+e832 = e829 && j = e831 && 1 = e832 )) and j' = e830 && e830 = e829 )) and exists ( e833,e834 : ( exists ( e835,e836 : ( e835+e836 = e833 && i = e835 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e827,e828 : ( k = e827 && k' = e828 && e828 = e827 )) and exists ( e829,e830 : ( exists ( e831,e832 : ( e831+e832 = e829 && j = e831 && 1 = e832 )) and j' = e830 && e830 = e829 )) and exists ( e833,e834 : ( exists ( e835,e836 : ( e835+e836 = e833 && i = e835 && 1 = e836 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e827,e828 : ( k = e827 && k' = e828 && e828 = e827 )) and exists ( e829,e830 : ( exists ( e831,e832 : ( e831+e832 = e829 && j = e831 && 1 = e832 )) and j' = e830 && e830 = e829 )) and exists ( e833,e834 : ( exists ( e835,e836 : ( e835+e836 = e833 && i = e835 && 1 = e836 )) and i' = e834 && e834 = e833 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 19
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e837,e838 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e837,e838 : ( exists ( e839,e840 : ( e839+e840 = e837 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e837,e838 : ( exists ( e839,e840 : ( e839+e840 = e837 && k = e839 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e837,e838 : ( exists ( e839,e840 : ( e839+e840 = e837 && k = e839 && 1 = e840 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e837,e838 : ( exists ( e839,e840 : ( e839+e840 = e837 && k = e839 && 1 = e840 )) and k' = e838 && e838 = e837 )) and exists ( e841,e842 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e837,e838 : ( exists ( e839,e840 : ( e839+e840 = e837 && k = e839 && 1 = e840 )) and k' = e838 && e838 = e837 )) and exists ( e841,e842 : ( j = e841 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e837,e838 : ( exists ( e839,e840 : ( e839+e840 = e837 && k = e839 && 1 = e840 )) and k' = e838 && e838 = e837 )) and exists ( e841,e842 : ( j = e841 && j' = e842 && e842 = e841 )) and exists ( e843,e844 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e837,e838 : ( exists ( e839,e840 : ( e839+e840 = e837 && k = e839 && 1 = e840 )) and k' = e838 && e838 = e837 )) and exists ( e841,e842 : ( j = e841 && j' = e842 && e842 = e841 )) and exists ( e843,e844 : ( exists ( e845,e846 : ( e845+e846 = e843 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e837,e838 : ( exists ( e839,e840 : ( e839+e840 = e837 && k = e839 && 1 = e840 )) and k' = e838 && e838 = e837 )) and exists ( e841,e842 : ( j = e841 && j' = e842 && e842 = e841 )) and exists ( e843,e844 : ( exists ( e845,e846 : ( e845+e846 = e843 && i = e845 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e837,e838 : ( exists ( e839,e840 : ( e839+e840 = e837 && k = e839 && 1 = e840 )) and k' = e838 && e838 = e837 )) and exists ( e841,e842 : ( j = e841 && j' = e842 && e842 = e841 )) and exists ( e843,e844 : ( exists ( e845,e846 : ( e845+e846 = e843 && i = e845 && 1 = e846 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e837,e838 : ( exists ( e839,e840 : ( e839+e840 = e837 && k = e839 && 1 = e840 )) and k' = e838 && e838 = e837 )) and exists ( e841,e842 : ( j = e841 && j' = e842 && e842 = e841 )) and exists ( e843,e844 : ( exists ( e845,e846 : ( e845+e846 = e843 && i = e845 && 1 = e846 )) and i' = e844 && e844 = e843 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 20
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( exists ( e849,e850 : ( e849 = e847+e850 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( exists ( e849,e850 : ( e849 = e847+e850 && k = e849 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( exists ( e849,e850 : ( e849 = e847+e850 && k = e849 && 1 = e850 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( exists ( e849,e850 : ( e849 = e847+e850 && k = e849 && 1 = e850 )) and k' = e848 && e848 = e847 )) and exists ( e851,e852 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( exists ( e849,e850 : ( e849 = e847+e850 && k = e849 && 1 = e850 )) and k' = e848 && e848 = e847 )) and exists ( e851,e852 : ( exists ( e853,e854 : ( e853 = e851+e854 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( exists ( e849,e850 : ( e849 = e847+e850 && k = e849 && 1 = e850 )) and k' = e848 && e848 = e847 )) and exists ( e851,e852 : ( exists ( e853,e854 : ( e853 = e851+e854 && j = e853 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( exists ( e849,e850 : ( e849 = e847+e850 && k = e849 && 1 = e850 )) and k' = e848 && e848 = e847 )) and exists ( e851,e852 : ( exists ( e853,e854 : ( e853 = e851+e854 && j = e853 && 1 = e854 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( exists ( e849,e850 : ( e849 = e847+e850 && k = e849 && 1 = e850 )) and k' = e848 && e848 = e847 )) and exists ( e851,e852 : ( exists ( e853,e854 : ( e853 = e851+e854 && j = e853 && 1 = e854 )) and j' = e852 && e852 = e851 )) and exists ( e855,e856 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( exists ( e849,e850 : ( e849 = e847+e850 && k = e849 && 1 = e850 )) and k' = e848 && e848 = e847 )) and exists ( e851,e852 : ( exists ( e853,e854 : ( e853 = e851+e854 && j = e853 && 1 = e854 )) and j' = e852 && e852 = e851 )) and exists ( e855,e856 : ( exists ( e857,e858 : ( e857 = e855+e858 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( exists ( e849,e850 : ( e849 = e847+e850 && k = e849 && 1 = e850 )) and k' = e848 && e848 = e847 )) and exists ( e851,e852 : ( exists ( e853,e854 : ( e853 = e851+e854 && j = e853 && 1 = e854 )) and j' = e852 && e852 = e851 )) and exists ( e855,e856 : ( exists ( e857,e858 : ( e857 = e855+e858 && i = e857 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( exists ( e849,e850 : ( e849 = e847+e850 && k = e849 && 1 = e850 )) and k' = e848 && e848 = e847 )) and exists ( e851,e852 : ( exists ( e853,e854 : ( e853 = e851+e854 && j = e853 && 1 = e854 )) and j' = e852 && e852 = e851 )) and exists ( e855,e856 : ( exists ( e857,e858 : ( e857 = e855+e858 && i = e857 && 1 = e858 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e847,e848 : ( exists ( e849,e850 : ( e849 = e847+e850 && k = e849 && 1 = e850 )) and k' = e848 && e848 = e847 )) and exists ( e851,e852 : ( exists ( e853,e854 : ( e853 = e851+e854 && j = e853 && 1 = e854 )) and j' = e852 && e852 = e851 )) and exists ( e855,e856 : ( exists ( e857,e858 : ( e857 = e855+e858 && i = e857 && 1 = e858 )) and i' = e856 && e856 = e855 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 21
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( exists ( e861,e862 : ( e861 = e859+e862 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( exists ( e861,e862 : ( e861 = e859+e862 && k = e861 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( exists ( e861,e862 : ( e861 = e859+e862 && k = e861 && 1 = e862 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( exists ( e861,e862 : ( e861 = e859+e862 && k = e861 && 1 = e862 )) and k' = e860 && e860 = e859 )) and exists ( e863,e864 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( exists ( e861,e862 : ( e861 = e859+e862 && k = e861 && 1 = e862 )) and k' = e860 && e860 = e859 )) and exists ( e863,e864 : ( exists ( e865,e866 : ( e865+e866 = e863 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( exists ( e861,e862 : ( e861 = e859+e862 && k = e861 && 1 = e862 )) and k' = e860 && e860 = e859 )) and exists ( e863,e864 : ( exists ( e865,e866 : ( e865+e866 = e863 && j = e865 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( exists ( e861,e862 : ( e861 = e859+e862 && k = e861 && 1 = e862 )) and k' = e860 && e860 = e859 )) and exists ( e863,e864 : ( exists ( e865,e866 : ( e865+e866 = e863 && j = e865 && 1 = e866 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( exists ( e861,e862 : ( e861 = e859+e862 && k = e861 && 1 = e862 )) and k' = e860 && e860 = e859 )) and exists ( e863,e864 : ( exists ( e865,e866 : ( e865+e866 = e863 && j = e865 && 1 = e866 )) and j' = e864 && e864 = e863 )) and exists ( e867,e868 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( exists ( e861,e862 : ( e861 = e859+e862 && k = e861 && 1 = e862 )) and k' = e860 && e860 = e859 )) and exists ( e863,e864 : ( exists ( e865,e866 : ( e865+e866 = e863 && j = e865 && 1 = e866 )) and j' = e864 && e864 = e863 )) and exists ( e867,e868 : ( exists ( e869,e870 : ( e869 = e867+e870 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( exists ( e861,e862 : ( e861 = e859+e862 && k = e861 && 1 = e862 )) and k' = e860 && e860 = e859 )) and exists ( e863,e864 : ( exists ( e865,e866 : ( e865+e866 = e863 && j = e865 && 1 = e866 )) and j' = e864 && e864 = e863 )) and exists ( e867,e868 : ( exists ( e869,e870 : ( e869 = e867+e870 && i = e869 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( exists ( e861,e862 : ( e861 = e859+e862 && k = e861 && 1 = e862 )) and k' = e860 && e860 = e859 )) and exists ( e863,e864 : ( exists ( e865,e866 : ( e865+e866 = e863 && j = e865 && 1 = e866 )) and j' = e864 && e864 = e863 )) and exists ( e867,e868 : ( exists ( e869,e870 : ( e869 = e867+e870 && i = e869 && 1 = e870 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e859,e860 : ( exists ( e861,e862 : ( e861 = e859+e862 && k = e861 && 1 = e862 )) and k' = e860 && e860 = e859 )) and exists ( e863,e864 : ( exists ( e865,e866 : ( e865+e866 = e863 && j = e865 && 1 = e866 )) and j' = e864 && e864 = e863 )) and exists ( e867,e868 : ( exists ( e869,e870 : ( e869 = e867+e870 && i = e869 && 1 = e870 )) and i' = e868 && e868 = e867 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 22
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( exists ( e873,e874 : ( e873+e874 = e871 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( exists ( e873,e874 : ( e873+e874 = e871 && k = e873 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( exists ( e873,e874 : ( e873+e874 = e871 && k = e873 && 1 = e874 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( exists ( e873,e874 : ( e873+e874 = e871 && k = e873 && 1 = e874 )) and k' = e872 && e872 = e871 )) and exists ( e875,e876 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( exists ( e873,e874 : ( e873+e874 = e871 && k = e873 && 1 = e874 )) and k' = e872 && e872 = e871 )) and exists ( e875,e876 : ( exists ( e877,e878 : ( e877 = e875+e878 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( exists ( e873,e874 : ( e873+e874 = e871 && k = e873 && 1 = e874 )) and k' = e872 && e872 = e871 )) and exists ( e875,e876 : ( exists ( e877,e878 : ( e877 = e875+e878 && j = e877 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( exists ( e873,e874 : ( e873+e874 = e871 && k = e873 && 1 = e874 )) and k' = e872 && e872 = e871 )) and exists ( e875,e876 : ( exists ( e877,e878 : ( e877 = e875+e878 && j = e877 && 1 = e878 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( exists ( e873,e874 : ( e873+e874 = e871 && k = e873 && 1 = e874 )) and k' = e872 && e872 = e871 )) and exists ( e875,e876 : ( exists ( e877,e878 : ( e877 = e875+e878 && j = e877 && 1 = e878 )) and j' = e876 && e876 = e875 )) and exists ( e879,e880 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( exists ( e873,e874 : ( e873+e874 = e871 && k = e873 && 1 = e874 )) and k' = e872 && e872 = e871 )) and exists ( e875,e876 : ( exists ( e877,e878 : ( e877 = e875+e878 && j = e877 && 1 = e878 )) and j' = e876 && e876 = e875 )) and exists ( e879,e880 : ( exists ( e881,e882 : ( e881 = e879+e882 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( exists ( e873,e874 : ( e873+e874 = e871 && k = e873 && 1 = e874 )) and k' = e872 && e872 = e871 )) and exists ( e875,e876 : ( exists ( e877,e878 : ( e877 = e875+e878 && j = e877 && 1 = e878 )) and j' = e876 && e876 = e875 )) and exists ( e879,e880 : ( exists ( e881,e882 : ( e881 = e879+e882 && i = e881 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( exists ( e873,e874 : ( e873+e874 = e871 && k = e873 && 1 = e874 )) and k' = e872 && e872 = e871 )) and exists ( e875,e876 : ( exists ( e877,e878 : ( e877 = e875+e878 && j = e877 && 1 = e878 )) and j' = e876 && e876 = e875 )) and exists ( e879,e880 : ( exists ( e881,e882 : ( e881 = e879+e882 && i = e881 && 1 = e882 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e871,e872 : ( exists ( e873,e874 : ( e873+e874 = e871 && k = e873 && 1 = e874 )) and k' = e872 && e872 = e871 )) and exists ( e875,e876 : ( exists ( e877,e878 : ( e877 = e875+e878 && j = e877 && 1 = e878 )) and j' = e876 && e876 = e875 )) and exists ( e879,e880 : ( exists ( e881,e882 : ( e881 = e879+e882 && i = e881 && 1 = e882 )) and i' = e880 && e880 = e879 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 23
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( exists ( e885,e886 : ( e885+e886 = e883 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( exists ( e885,e886 : ( e885+e886 = e883 && k = e885 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( exists ( e885,e886 : ( e885+e886 = e883 && k = e885 && 1 = e886 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( exists ( e885,e886 : ( e885+e886 = e883 && k = e885 && 1 = e886 )) and k' = e884 && e884 = e883 )) and exists ( e887,e888 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( exists ( e885,e886 : ( e885+e886 = e883 && k = e885 && 1 = e886 )) and k' = e884 && e884 = e883 )) and exists ( e887,e888 : ( exists ( e889,e890 : ( e889+e890 = e887 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( exists ( e885,e886 : ( e885+e886 = e883 && k = e885 && 1 = e886 )) and k' = e884 && e884 = e883 )) and exists ( e887,e888 : ( exists ( e889,e890 : ( e889+e890 = e887 && j = e889 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( exists ( e885,e886 : ( e885+e886 = e883 && k = e885 && 1 = e886 )) and k' = e884 && e884 = e883 )) and exists ( e887,e888 : ( exists ( e889,e890 : ( e889+e890 = e887 && j = e889 && 1 = e890 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( exists ( e885,e886 : ( e885+e886 = e883 && k = e885 && 1 = e886 )) and k' = e884 && e884 = e883 )) and exists ( e887,e888 : ( exists ( e889,e890 : ( e889+e890 = e887 && j = e889 && 1 = e890 )) and j' = e888 && e888 = e887 )) and exists ( e891,e892 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( exists ( e885,e886 : ( e885+e886 = e883 && k = e885 && 1 = e886 )) and k' = e884 && e884 = e883 )) and exists ( e887,e888 : ( exists ( e889,e890 : ( e889+e890 = e887 && j = e889 && 1 = e890 )) and j' = e888 && e888 = e887 )) and exists ( e891,e892 : ( exists ( e893,e894 : ( e893 = e891+e894 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( exists ( e885,e886 : ( e885+e886 = e883 && k = e885 && 1 = e886 )) and k' = e884 && e884 = e883 )) and exists ( e887,e888 : ( exists ( e889,e890 : ( e889+e890 = e887 && j = e889 && 1 = e890 )) and j' = e888 && e888 = e887 )) and exists ( e891,e892 : ( exists ( e893,e894 : ( e893 = e891+e894 && i = e893 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( exists ( e885,e886 : ( e885+e886 = e883 && k = e885 && 1 = e886 )) and k' = e884 && e884 = e883 )) and exists ( e887,e888 : ( exists ( e889,e890 : ( e889+e890 = e887 && j = e889 && 1 = e890 )) and j' = e888 && e888 = e887 )) and exists ( e891,e892 : ( exists ( e893,e894 : ( e893 = e891+e894 && i = e893 && 1 = e894 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e883,e884 : ( exists ( e885,e886 : ( e885+e886 = e883 && k = e885 && 1 = e886 )) and k' = e884 && e884 = e883 )) and exists ( e887,e888 : ( exists ( e889,e890 : ( e889+e890 = e887 && j = e889 && 1 = e890 )) and j' = e888 && e888 = e887 )) and exists ( e891,e892 : ( exists ( e893,e894 : ( e893 = e891+e894 && i = e893 && 1 = e894 )) and i' = e892 && e892 = e891 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 24
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( exists ( e897,e898 : ( e897 = e895+e898 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( exists ( e897,e898 : ( e897 = e895+e898 && k = e897 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( exists ( e897,e898 : ( e897 = e895+e898 && k = e897 && 1 = e898 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( exists ( e897,e898 : ( e897 = e895+e898 && k = e897 && 1 = e898 )) and k' = e896 && e896 = e895 )) and exists ( e899,e900 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( exists ( e897,e898 : ( e897 = e895+e898 && k = e897 && 1 = e898 )) and k' = e896 && e896 = e895 )) and exists ( e899,e900 : ( exists ( e901,e902 : ( e901 = e899+e902 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( exists ( e897,e898 : ( e897 = e895+e898 && k = e897 && 1 = e898 )) and k' = e896 && e896 = e895 )) and exists ( e899,e900 : ( exists ( e901,e902 : ( e901 = e899+e902 && j = e901 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( exists ( e897,e898 : ( e897 = e895+e898 && k = e897 && 1 = e898 )) and k' = e896 && e896 = e895 )) and exists ( e899,e900 : ( exists ( e901,e902 : ( e901 = e899+e902 && j = e901 && 1 = e902 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( exists ( e897,e898 : ( e897 = e895+e898 && k = e897 && 1 = e898 )) and k' = e896 && e896 = e895 )) and exists ( e899,e900 : ( exists ( e901,e902 : ( e901 = e899+e902 && j = e901 && 1 = e902 )) and j' = e900 && e900 = e899 )) and exists ( e903,e904 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( exists ( e897,e898 : ( e897 = e895+e898 && k = e897 && 1 = e898 )) and k' = e896 && e896 = e895 )) and exists ( e899,e900 : ( exists ( e901,e902 : ( e901 = e899+e902 && j = e901 && 1 = e902 )) and j' = e900 && e900 = e899 )) and exists ( e903,e904 : ( exists ( e905,e906 : ( e905+e906 = e903 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( exists ( e897,e898 : ( e897 = e895+e898 && k = e897 && 1 = e898 )) and k' = e896 && e896 = e895 )) and exists ( e899,e900 : ( exists ( e901,e902 : ( e901 = e899+e902 && j = e901 && 1 = e902 )) and j' = e900 && e900 = e899 )) and exists ( e903,e904 : ( exists ( e905,e906 : ( e905+e906 = e903 && i = e905 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( exists ( e897,e898 : ( e897 = e895+e898 && k = e897 && 1 = e898 )) and k' = e896 && e896 = e895 )) and exists ( e899,e900 : ( exists ( e901,e902 : ( e901 = e899+e902 && j = e901 && 1 = e902 )) and j' = e900 && e900 = e899 )) and exists ( e903,e904 : ( exists ( e905,e906 : ( e905+e906 = e903 && i = e905 && 1 = e906 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e895,e896 : ( exists ( e897,e898 : ( e897 = e895+e898 && k = e897 && 1 = e898 )) and k' = e896 && e896 = e895 )) and exists ( e899,e900 : ( exists ( e901,e902 : ( e901 = e899+e902 && j = e901 && 1 = e902 )) and j' = e900 && e900 = e899 )) and exists ( e903,e904 : ( exists ( e905,e906 : ( e905+e906 = e903 && i = e905 && 1 = e906 )) and i' = e904 && e904 = e903 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 25
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( exists ( e909,e910 : ( e909 = e907+e910 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( exists ( e909,e910 : ( e909 = e907+e910 && k = e909 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( exists ( e909,e910 : ( e909 = e907+e910 && k = e909 && 1 = e910 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( exists ( e909,e910 : ( e909 = e907+e910 && k = e909 && 1 = e910 )) and k' = e908 && e908 = e907 )) and exists ( e911,e912 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( exists ( e909,e910 : ( e909 = e907+e910 && k = e909 && 1 = e910 )) and k' = e908 && e908 = e907 )) and exists ( e911,e912 : ( exists ( e913,e914 : ( e913+e914 = e911 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( exists ( e909,e910 : ( e909 = e907+e910 && k = e909 && 1 = e910 )) and k' = e908 && e908 = e907 )) and exists ( e911,e912 : ( exists ( e913,e914 : ( e913+e914 = e911 && j = e913 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( exists ( e909,e910 : ( e909 = e907+e910 && k = e909 && 1 = e910 )) and k' = e908 && e908 = e907 )) and exists ( e911,e912 : ( exists ( e913,e914 : ( e913+e914 = e911 && j = e913 && 1 = e914 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( exists ( e909,e910 : ( e909 = e907+e910 && k = e909 && 1 = e910 )) and k' = e908 && e908 = e907 )) and exists ( e911,e912 : ( exists ( e913,e914 : ( e913+e914 = e911 && j = e913 && 1 = e914 )) and j' = e912 && e912 = e911 )) and exists ( e915,e916 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( exists ( e909,e910 : ( e909 = e907+e910 && k = e909 && 1 = e910 )) and k' = e908 && e908 = e907 )) and exists ( e911,e912 : ( exists ( e913,e914 : ( e913+e914 = e911 && j = e913 && 1 = e914 )) and j' = e912 && e912 = e911 )) and exists ( e915,e916 : ( exists ( e917,e918 : ( e917+e918 = e915 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( exists ( e909,e910 : ( e909 = e907+e910 && k = e909 && 1 = e910 )) and k' = e908 && e908 = e907 )) and exists ( e911,e912 : ( exists ( e913,e914 : ( e913+e914 = e911 && j = e913 && 1 = e914 )) and j' = e912 && e912 = e911 )) and exists ( e915,e916 : ( exists ( e917,e918 : ( e917+e918 = e915 && i = e917 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( exists ( e909,e910 : ( e909 = e907+e910 && k = e909 && 1 = e910 )) and k' = e908 && e908 = e907 )) and exists ( e911,e912 : ( exists ( e913,e914 : ( e913+e914 = e911 && j = e913 && 1 = e914 )) and j' = e912 && e912 = e911 )) and exists ( e915,e916 : ( exists ( e917,e918 : ( e917+e918 = e915 && i = e917 && 1 = e918 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e907,e908 : ( exists ( e909,e910 : ( e909 = e907+e910 && k = e909 && 1 = e910 )) and k' = e908 && e908 = e907 )) and exists ( e911,e912 : ( exists ( e913,e914 : ( e913+e914 = e911 && j = e913 && 1 = e914 )) and j' = e912 && e912 = e911 )) and exists ( e915,e916 : ( exists ( e917,e918 : ( e917+e918 = e915 && i = e917 && 1 = e918 )) and i' = e916 && e916 = e915 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 26
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( exists ( e921,e922 : ( e921+e922 = e919 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( exists ( e921,e922 : ( e921+e922 = e919 && k = e921 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( exists ( e921,e922 : ( e921+e922 = e919 && k = e921 && 1 = e922 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( exists ( e921,e922 : ( e921+e922 = e919 && k = e921 && 1 = e922 )) and k' = e920 && e920 = e919 )) and exists ( e923,e924 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( exists ( e921,e922 : ( e921+e922 = e919 && k = e921 && 1 = e922 )) and k' = e920 && e920 = e919 )) and exists ( e923,e924 : ( exists ( e925,e926 : ( e925 = e923+e926 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( exists ( e921,e922 : ( e921+e922 = e919 && k = e921 && 1 = e922 )) and k' = e920 && e920 = e919 )) and exists ( e923,e924 : ( exists ( e925,e926 : ( e925 = e923+e926 && j = e925 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( exists ( e921,e922 : ( e921+e922 = e919 && k = e921 && 1 = e922 )) and k' = e920 && e920 = e919 )) and exists ( e923,e924 : ( exists ( e925,e926 : ( e925 = e923+e926 && j = e925 && 1 = e926 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( exists ( e921,e922 : ( e921+e922 = e919 && k = e921 && 1 = e922 )) and k' = e920 && e920 = e919 )) and exists ( e923,e924 : ( exists ( e925,e926 : ( e925 = e923+e926 && j = e925 && 1 = e926 )) and j' = e924 && e924 = e923 )) and exists ( e927,e928 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( exists ( e921,e922 : ( e921+e922 = e919 && k = e921 && 1 = e922 )) and k' = e920 && e920 = e919 )) and exists ( e923,e924 : ( exists ( e925,e926 : ( e925 = e923+e926 && j = e925 && 1 = e926 )) and j' = e924 && e924 = e923 )) and exists ( e927,e928 : ( exists ( e929,e930 : ( e929+e930 = e927 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( exists ( e921,e922 : ( e921+e922 = e919 && k = e921 && 1 = e922 )) and k' = e920 && e920 = e919 )) and exists ( e923,e924 : ( exists ( e925,e926 : ( e925 = e923+e926 && j = e925 && 1 = e926 )) and j' = e924 && e924 = e923 )) and exists ( e927,e928 : ( exists ( e929,e930 : ( e929+e930 = e927 && i = e929 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( exists ( e921,e922 : ( e921+e922 = e919 && k = e921 && 1 = e922 )) and k' = e920 && e920 = e919 )) and exists ( e923,e924 : ( exists ( e925,e926 : ( e925 = e923+e926 && j = e925 && 1 = e926 )) and j' = e924 && e924 = e923 )) and exists ( e927,e928 : ( exists ( e929,e930 : ( e929+e930 = e927 && i = e929 && 1 = e930 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e919,e920 : ( exists ( e921,e922 : ( e921+e922 = e919 && k = e921 && 1 = e922 )) and k' = e920 && e920 = e919 )) and exists ( e923,e924 : ( exists ( e925,e926 : ( e925 = e923+e926 && j = e925 && 1 = e926 )) and j' = e924 && e924 = e923 )) and exists ( e927,e928 : ( exists ( e929,e930 : ( e929+e930 = e927 && i = e929 && 1 = e930 )) and i' = e928 && e928 = e927 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 27
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( exists ( e933,e934 : ( e933+e934 = e931 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( exists ( e933,e934 : ( e933+e934 = e931 && k = e933 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( exists ( e933,e934 : ( e933+e934 = e931 && k = e933 && 1 = e934 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( exists ( e933,e934 : ( e933+e934 = e931 && k = e933 && 1 = e934 )) and k' = e932 && e932 = e931 )) and exists ( e935,e936 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( exists ( e933,e934 : ( e933+e934 = e931 && k = e933 && 1 = e934 )) and k' = e932 && e932 = e931 )) and exists ( e935,e936 : ( exists ( e937,e938 : ( e937+e938 = e935 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( exists ( e933,e934 : ( e933+e934 = e931 && k = e933 && 1 = e934 )) and k' = e932 && e932 = e931 )) and exists ( e935,e936 : ( exists ( e937,e938 : ( e937+e938 = e935 && j = e937 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( exists ( e933,e934 : ( e933+e934 = e931 && k = e933 && 1 = e934 )) and k' = e932 && e932 = e931 )) and exists ( e935,e936 : ( exists ( e937,e938 : ( e937+e938 = e935 && j = e937 && 1 = e938 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( exists ( e933,e934 : ( e933+e934 = e931 && k = e933 && 1 = e934 )) and k' = e932 && e932 = e931 )) and exists ( e935,e936 : ( exists ( e937,e938 : ( e937+e938 = e935 && j = e937 && 1 = e938 )) and j' = e936 && e936 = e935 )) and exists ( e939,e940 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( exists ( e933,e934 : ( e933+e934 = e931 && k = e933 && 1 = e934 )) and k' = e932 && e932 = e931 )) and exists ( e935,e936 : ( exists ( e937,e938 : ( e937+e938 = e935 && j = e937 && 1 = e938 )) and j' = e936 && e936 = e935 )) and exists ( e939,e940 : ( exists ( e941,e942 : ( e941+e942 = e939 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( exists ( e933,e934 : ( e933+e934 = e931 && k = e933 && 1 = e934 )) and k' = e932 && e932 = e931 )) and exists ( e935,e936 : ( exists ( e937,e938 : ( e937+e938 = e935 && j = e937 && 1 = e938 )) and j' = e936 && e936 = e935 )) and exists ( e939,e940 : ( exists ( e941,e942 : ( e941+e942 = e939 && i = e941 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( exists ( e933,e934 : ( e933+e934 = e931 && k = e933 && 1 = e934 )) and k' = e932 && e932 = e931 )) and exists ( e935,e936 : ( exists ( e937,e938 : ( e937+e938 = e935 && j = e937 && 1 = e938 )) and j' = e936 && e936 = e935 )) and exists ( e939,e940 : ( exists ( e941,e942 : ( e941+e942 = e939 && i = e941 && 1 = e942 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e931,e932 : ( exists ( e933,e934 : ( e933+e934 = e931 && k = e933 && 1 = e934 )) and k' = e932 && e932 = e931 )) and exists ( e935,e936 : ( exists ( e937,e938 : ( e937+e938 = e935 && j = e937 && 1 = e938 )) and j' = e936 && e936 = e935 )) and exists ( e939,e940 : ( exists ( e941,e942 : ( e941+e942 = e939 && i = e941 && 1 = e942 )) and i' = e940 && e940 = e939 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0
j 5

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))
repr2   _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (((ALPHA * _in[k][j][i] + BETA * (((((_in[k - 1][j][i] + _in[k][j - 1][i]) + _in[k][j + 1][i]) + _in[k + 1][j][i]) + _in[k][j][i - 1]) + ALPHA * _in[k][j][i + 1])) + GAMMA * (((((((((((_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]) + _in[k][j + 1][i - 1]) + _in[k + 1][j][i - 1]) + _in[k - 1][j - 1][i]) + _in[k - 1][j + 1][i]) + _in[k + 1][j - 1][i]) + _in[k + 1][j + 1][i]) + _in[k - 1][j][i + 1]) + _in[k][j - 1][i + 1]) + _in[k][j + 1][i + 1]) + _in[k + 1][j][i + 1])) + DELTA * (((((((_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]) + _in[k + 1][j - 1][i - 1]) + _in[k + 1][j + 1][i - 1]) + _in[k - 1][j - 1][i + 1]) + _in[k - 1][j + 1][i + 1]) + _in[k + 1][j - 1][i + 1]) + _in[k + 1][j + 1][i + 1]))

28 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[3] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[4] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[5] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[6] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[7] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[8] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[9] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[10] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[11] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[12] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[13] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[14] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[15] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[16] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[17] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[18] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[19] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[20] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[21] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[22] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[23] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[24] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[25] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[26] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[27] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))

5 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _lambda is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_lambda' write 0

ref[3] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[4] _rhs is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_rhs' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e943,e944 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e943,e944 : ( k = e943 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e943,e944 : ( k = e943 && k' = e944 && e944 = e943 )) and exists ( e945,e946 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e943,e944 : ( k = e943 && k' = e944 && e944 = e943 )) and exists ( e945,e946 : ( j = e945 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e943,e944 : ( k = e943 && k' = e944 && e944 = e943 )) and exists ( e945,e946 : ( j = e945 && j' = e946 && e946 = e945 )) and exists ( e947,e948 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e943,e944 : ( k = e943 && k' = e944 && e944 = e943 )) and exists ( e945,e946 : ( j = e945 && j' = e946 && e946 = e945 )) and exists ( e947,e948 : ( i = e947 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e943,e944 : ( k = e943 && k' = e944 && e944 = e943 )) and exists ( e945,e946 : ( j = e945 && j' = e946 && e946 = e945 )) and exists ( e947,e948 : ( i = e947 && i' = e948 && e948 = e947 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 1
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e949,e950 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e949,e950 : ( k = e949 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e949,e950 : ( k = e949 && k' = e950 && e950 = e949 )) and exists ( e951,e952 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e949,e950 : ( k = e949 && k' = e950 && e950 = e949 )) and exists ( e951,e952 : ( j = e951 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e949,e950 : ( k = e949 && k' = e950 && e950 = e949 )) and exists ( e951,e952 : ( j = e951 && j' = e952 && e952 = e951 )) and exists ( e953,e954 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e949,e950 : ( k = e949 && k' = e950 && e950 = e949 )) and exists ( e951,e952 : ( j = e951 && j' = e952 && e952 = e951 )) and exists ( e953,e954 : ( i = e953 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e949,e950 : ( k = e949 && k' = e950 && e950 = e949 )) and exists ( e951,e952 : ( j = e951 && j' = e952 && e952 = e951 )) and exists ( e953,e954 : ( i = e953 && i' = e954 && e954 = e953 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 2
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e955,e956 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e955,e956 : ( exists ( e957,e958 : ( e957 = e955+e958 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e955,e956 : ( exists ( e957,e958 : ( e957 = e955+e958 && k = e957 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e955,e956 : ( exists ( e957,e958 : ( e957 = e955+e958 && k = e957 && 1 = e958 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e955,e956 : ( exists ( e957,e958 : ( e957 = e955+e958 && k = e957 && 1 = e958 )) and k' = e956 && e956 = e955 )) and exists ( e959,e960 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e955,e956 : ( exists ( e957,e958 : ( e957 = e955+e958 && k = e957 && 1 = e958 )) and k' = e956 && e956 = e955 )) and exists ( e959,e960 : ( j = e959 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e955,e956 : ( exists ( e957,e958 : ( e957 = e955+e958 && k = e957 && 1 = e958 )) and k' = e956 && e956 = e955 )) and exists ( e959,e960 : ( j = e959 && j' = e960 && e960 = e959 )) and exists ( e961,e962 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e955,e956 : ( exists ( e957,e958 : ( e957 = e955+e958 && k = e957 && 1 = e958 )) and k' = e956 && e956 = e955 )) and exists ( e959,e960 : ( j = e959 && j' = e960 && e960 = e959 )) and exists ( e961,e962 : ( i = e961 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e955,e956 : ( exists ( e957,e958 : ( e957 = e955+e958 && k = e957 && 1 = e958 )) and k' = e956 && e956 = e955 )) and exists ( e959,e960 : ( j = e959 && j' = e960 && e960 = e959 )) and exists ( e961,e962 : ( i = e961 && i' = e962 && e962 = e961 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 3
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e963,e964 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e963,e964 : ( k = e963 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e963,e964 : ( k = e963 && k' = e964 && e964 = e963 )) and exists ( e965,e966 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e963,e964 : ( k = e963 && k' = e964 && e964 = e963 )) and exists ( e965,e966 : ( exists ( e967,e968 : ( e967 = e965+e968 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e963,e964 : ( k = e963 && k' = e964 && e964 = e963 )) and exists ( e965,e966 : ( exists ( e967,e968 : ( e967 = e965+e968 && j = e967 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e963,e964 : ( k = e963 && k' = e964 && e964 = e963 )) and exists ( e965,e966 : ( exists ( e967,e968 : ( e967 = e965+e968 && j = e967 && 1 = e968 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e963,e964 : ( k = e963 && k' = e964 && e964 = e963 )) and exists ( e965,e966 : ( exists ( e967,e968 : ( e967 = e965+e968 && j = e967 && 1 = e968 )) and j' = e966 && e966 = e965 )) and exists ( e969,e970 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e963,e964 : ( k = e963 && k' = e964 && e964 = e963 )) and exists ( e965,e966 : ( exists ( e967,e968 : ( e967 = e965+e968 && j = e967 && 1 = e968 )) and j' = e966 && e966 = e965 )) and exists ( e969,e970 : ( i = e969 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e963,e964 : ( k = e963 && k' = e964 && e964 = e963 )) and exists ( e965,e966 : ( exists ( e967,e968 : ( e967 = e965+e968 && j = e967 && 1 = e968 )) and j' = e966 && e966 = e965 )) and exists ( e969,e970 : ( i = e969 && i' = e970 && e970 = e969 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 4
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e971,e972 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e971,e972 : ( k = e971 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e971,e972 : ( k = e971 && k' = e972 && e972 = e971 )) and exists ( e973,e974 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e971,e972 : ( k = e971 && k' = e972 && e972 = e971 )) and exists ( e973,e974 : ( exists ( e975,e976 : ( e975+e976 = e973 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e971,e972 : ( k = e971 && k' = e972 && e972 = e971 )) and exists ( e973,e974 : ( exists ( e975,e976 : ( e975+e976 = e973 && j = e975 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e971,e972 : ( k = e971 && k' = e972 && e972 = e971 )) and exists ( e973,e974 : ( exists ( e975,e976 : ( e975+e976 = e973 && j = e975 && 1 = e976 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e971,e972 : ( k = e971 && k' = e972 && e972 = e971 )) and exists ( e973,e974 : ( exists ( e975,e976 : ( e975+e976 = e973 && j = e975 && 1 = e976 )) and j' = e974 && e974 = e973 )) and exists ( e977,e978 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e971,e972 : ( k = e971 && k' = e972 && e972 = e971 )) and exists ( e973,e974 : ( exists ( e975,e976 : ( e975+e976 = e973 && j = e975 && 1 = e976 )) and j' = e974 && e974 = e973 )) and exists ( e977,e978 : ( i = e977 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e971,e972 : ( k = e971 && k' = e972 && e972 = e971 )) and exists ( e973,e974 : ( exists ( e975,e976 : ( e975+e976 = e973 && j = e975 && 1 = e976 )) and j' = e974 && e974 = e973 )) and exists ( e977,e978 : ( i = e977 && i' = e978 && e978 = e977 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 5
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e979,e980 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e979,e980 : ( exists ( e981,e982 : ( e981+e982 = e979 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e979,e980 : ( exists ( e981,e982 : ( e981+e982 = e979 && k = e981 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e979,e980 : ( exists ( e981,e982 : ( e981+e982 = e979 && k = e981 && 1 = e982 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e979,e980 : ( exists ( e981,e982 : ( e981+e982 = e979 && k = e981 && 1 = e982 )) and k' = e980 && e980 = e979 )) and exists ( e983,e984 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e979,e980 : ( exists ( e981,e982 : ( e981+e982 = e979 && k = e981 && 1 = e982 )) and k' = e980 && e980 = e979 )) and exists ( e983,e984 : ( j = e983 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e979,e980 : ( exists ( e981,e982 : ( e981+e982 = e979 && k = e981 && 1 = e982 )) and k' = e980 && e980 = e979 )) and exists ( e983,e984 : ( j = e983 && j' = e984 && e984 = e983 )) and exists ( e985,e986 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e979,e980 : ( exists ( e981,e982 : ( e981+e982 = e979 && k = e981 && 1 = e982 )) and k' = e980 && e980 = e979 )) and exists ( e983,e984 : ( j = e983 && j' = e984 && e984 = e983 )) and exists ( e985,e986 : ( i = e985 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e979,e980 : ( exists ( e981,e982 : ( e981+e982 = e979 && k = e981 && 1 = e982 )) and k' = e980 && e980 = e979 )) and exists ( e983,e984 : ( j = e983 && j' = e984 && e984 = e983 )) and exists ( e985,e986 : ( i = e985 && i' = e986 && e986 = e985 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 6
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e987,e988 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e987,e988 : ( k = e987 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e987,e988 : ( k = e987 && k' = e988 && e988 = e987 )) and exists ( e989,e990 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e987,e988 : ( k = e987 && k' = e988 && e988 = e987 )) and exists ( e989,e990 : ( j = e989 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e987,e988 : ( k = e987 && k' = e988 && e988 = e987 )) and exists ( e989,e990 : ( j = e989 && j' = e990 && e990 = e989 )) and exists ( e991,e992 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e987,e988 : ( k = e987 && k' = e988 && e988 = e987 )) and exists ( e989,e990 : ( j = e989 && j' = e990 && e990 = e989 )) and exists ( e991,e992 : ( exists ( e993,e994 : ( e993 = e991+e994 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e987,e988 : ( k = e987 && k' = e988 && e988 = e987 )) and exists ( e989,e990 : ( j = e989 && j' = e990 && e990 = e989 )) and exists ( e991,e992 : ( exists ( e993,e994 : ( e993 = e991+e994 && i = e993 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e987,e988 : ( k = e987 && k' = e988 && e988 = e987 )) and exists ( e989,e990 : ( j = e989 && j' = e990 && e990 = e989 )) and exists ( e991,e992 : ( exists ( e993,e994 : ( e993 = e991+e994 && i = e993 && 1 = e994 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e987,e988 : ( k = e987 && k' = e988 && e988 = e987 )) and exists ( e989,e990 : ( j = e989 && j' = e990 && e990 = e989 )) and exists ( e991,e992 : ( exists ( e993,e994 : ( e993 = e991+e994 && i = e993 && 1 = e994 )) and i' = e992 && e992 = e991 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 7
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e995,e996 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e995,e996 : ( k = e995 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e995,e996 : ( k = e995 && k' = e996 && e996 = e995 )) and exists ( e997,e998 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e995,e996 : ( k = e995 && k' = e996 && e996 = e995 )) and exists ( e997,e998 : ( j = e997 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e995,e996 : ( k = e995 && k' = e996 && e996 = e995 )) and exists ( e997,e998 : ( j = e997 && j' = e998 && e998 = e997 )) and exists ( e999,e1000 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e995,e996 : ( k = e995 && k' = e996 && e996 = e995 )) and exists ( e997,e998 : ( j = e997 && j' = e998 && e998 = e997 )) and exists ( e999,e1000 : ( exists ( e1001,e1002 : ( e1001+e1002 = e999 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e995,e996 : ( k = e995 && k' = e996 && e996 = e995 )) and exists ( e997,e998 : ( j = e997 && j' = e998 && e998 = e997 )) and exists ( e999,e1000 : ( exists ( e1001,e1002 : ( e1001+e1002 = e999 && i = e1001 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e995,e996 : ( k = e995 && k' = e996 && e996 = e995 )) and exists ( e997,e998 : ( j = e997 && j' = e998 && e998 = e997 )) and exists ( e999,e1000 : ( exists ( e1001,e1002 : ( e1001+e1002 = e999 && i = e1001 && 1 = e1002 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e995,e996 : ( k = e995 && k' = e996 && e996 = e995 )) and exists ( e997,e998 : ( j = e997 && j' = e998 && e998 = e997 )) and exists ( e999,e1000 : ( exists ( e1001,e1002 : ( e1001+e1002 = e999 && i = e1001 && 1 = e1002 )) and i' = e1000 && e1000 = e999 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 8
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1003,e1004 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1003,e1004 : ( exists ( e1005,e1006 : ( e1005 = e1003+e1006 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1003,e1004 : ( exists ( e1005,e1006 : ( e1005 = e1003+e1006 && k = e1005 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1003,e1004 : ( exists ( e1005,e1006 : ( e1005 = e1003+e1006 && k = e1005 && 1 = e1006 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1003,e1004 : ( exists ( e1005,e1006 : ( e1005 = e1003+e1006 && k = e1005 && 1 = e1006 )) and k' = e1004 && e1004 = e1003 )) and exists ( e1007,e1008 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1003,e1004 : ( exists ( e1005,e1006 : ( e1005 = e1003+e1006 && k = e1005 && 1 = e1006 )) and k' = e1004 && e1004 = e1003 )) and exists ( e1007,e1008 : ( j = e1007 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1003,e1004 : ( exists ( e1005,e1006 : ( e1005 = e1003+e1006 && k = e1005 && 1 = e1006 )) and k' = e1004 && e1004 = e1003 )) and exists ( e1007,e1008 : ( j = e1007 && j' = e1008 && e1008 = e1007 )) and exists ( e1009,e1010 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1003,e1004 : ( exists ( e1005,e1006 : ( e1005 = e1003+e1006 && k = e1005 && 1 = e1006 )) and k' = e1004 && e1004 = e1003 )) and exists ( e1007,e1008 : ( j = e1007 && j' = e1008 && e1008 = e1007 )) and exists ( e1009,e1010 : ( exists ( e1011,e1012 : ( e1011 = e1009+e1012 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1003,e1004 : ( exists ( e1005,e1006 : ( e1005 = e1003+e1006 && k = e1005 && 1 = e1006 )) and k' = e1004 && e1004 = e1003 )) and exists ( e1007,e1008 : ( j = e1007 && j' = e1008 && e1008 = e1007 )) and exists ( e1009,e1010 : ( exists ( e1011,e1012 : ( e1011 = e1009+e1012 && i = e1011 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1003,e1004 : ( exists ( e1005,e1006 : ( e1005 = e1003+e1006 && k = e1005 && 1 = e1006 )) and k' = e1004 && e1004 = e1003 )) and exists ( e1007,e1008 : ( j = e1007 && j' = e1008 && e1008 = e1007 )) and exists ( e1009,e1010 : ( exists ( e1011,e1012 : ( e1011 = e1009+e1012 && i = e1011 && 1 = e1012 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1003,e1004 : ( exists ( e1005,e1006 : ( e1005 = e1003+e1006 && k = e1005 && 1 = e1006 )) and k' = e1004 && e1004 = e1003 )) and exists ( e1007,e1008 : ( j = e1007 && j' = e1008 && e1008 = e1007 )) and exists ( e1009,e1010 : ( exists ( e1011,e1012 : ( e1011 = e1009+e1012 && i = e1011 && 1 = e1012 )) and i' = e1010 && e1010 = e1009 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 9
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1013,e1014 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1013,e1014 : ( k = e1013 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1013,e1014 : ( k = e1013 && k' = e1014 && e1014 = e1013 )) and exists ( e1015,e1016 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1013,e1014 : ( k = e1013 && k' = e1014 && e1014 = e1013 )) and exists ( e1015,e1016 : ( exists ( e1017,e1018 : ( e1017 = e1015+e1018 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1013,e1014 : ( k = e1013 && k' = e1014 && e1014 = e1013 )) and exists ( e1015,e1016 : ( exists ( e1017,e1018 : ( e1017 = e1015+e1018 && j = e1017 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1013,e1014 : ( k = e1013 && k' = e1014 && e1014 = e1013 )) and exists ( e1015,e1016 : ( exists ( e1017,e1018 : ( e1017 = e1015+e1018 && j = e1017 && 1 = e1018 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1013,e1014 : ( k = e1013 && k' = e1014 && e1014 = e1013 )) and exists ( e1015,e1016 : ( exists ( e1017,e1018 : ( e1017 = e1015+e1018 && j = e1017 && 1 = e1018 )) and j' = e1016 && e1016 = e1015 )) and exists ( e1019,e1020 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1013,e1014 : ( k = e1013 && k' = e1014 && e1014 = e1013 )) and exists ( e1015,e1016 : ( exists ( e1017,e1018 : ( e1017 = e1015+e1018 && j = e1017 && 1 = e1018 )) and j' = e1016 && e1016 = e1015 )) and exists ( e1019,e1020 : ( exists ( e1021,e1022 : ( e1021 = e1019+e1022 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1013,e1014 : ( k = e1013 && k' = e1014 && e1014 = e1013 )) and exists ( e1015,e1016 : ( exists ( e1017,e1018 : ( e1017 = e1015+e1018 && j = e1017 && 1 = e1018 )) and j' = e1016 && e1016 = e1015 )) and exists ( e1019,e1020 : ( exists ( e1021,e1022 : ( e1021 = e1019+e1022 && i = e1021 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1013,e1014 : ( k = e1013 && k' = e1014 && e1014 = e1013 )) and exists ( e1015,e1016 : ( exists ( e1017,e1018 : ( e1017 = e1015+e1018 && j = e1017 && 1 = e1018 )) and j' = e1016 && e1016 = e1015 )) and exists ( e1019,e1020 : ( exists ( e1021,e1022 : ( e1021 = e1019+e1022 && i = e1021 && 1 = e1022 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1013,e1014 : ( k = e1013 && k' = e1014 && e1014 = e1013 )) and exists ( e1015,e1016 : ( exists ( e1017,e1018 : ( e1017 = e1015+e1018 && j = e1017 && 1 = e1018 )) and j' = e1016 && e1016 = e1015 )) and exists ( e1019,e1020 : ( exists ( e1021,e1022 : ( e1021 = e1019+e1022 && i = e1021 && 1 = e1022 )) and i' = e1020 && e1020 = e1019 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 10
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1023,e1024 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1023,e1024 : ( k = e1023 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1023,e1024 : ( k = e1023 && k' = e1024 && e1024 = e1023 )) and exists ( e1025,e1026 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1023,e1024 : ( k = e1023 && k' = e1024 && e1024 = e1023 )) and exists ( e1025,e1026 : ( exists ( e1027,e1028 : ( e1027+e1028 = e1025 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1023,e1024 : ( k = e1023 && k' = e1024 && e1024 = e1023 )) and exists ( e1025,e1026 : ( exists ( e1027,e1028 : ( e1027+e1028 = e1025 && j = e1027 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1023,e1024 : ( k = e1023 && k' = e1024 && e1024 = e1023 )) and exists ( e1025,e1026 : ( exists ( e1027,e1028 : ( e1027+e1028 = e1025 && j = e1027 && 1 = e1028 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1023,e1024 : ( k = e1023 && k' = e1024 && e1024 = e1023 )) and exists ( e1025,e1026 : ( exists ( e1027,e1028 : ( e1027+e1028 = e1025 && j = e1027 && 1 = e1028 )) and j' = e1026 && e1026 = e1025 )) and exists ( e1029,e1030 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1023,e1024 : ( k = e1023 && k' = e1024 && e1024 = e1023 )) and exists ( e1025,e1026 : ( exists ( e1027,e1028 : ( e1027+e1028 = e1025 && j = e1027 && 1 = e1028 )) and j' = e1026 && e1026 = e1025 )) and exists ( e1029,e1030 : ( exists ( e1031,e1032 : ( e1031 = e1029+e1032 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1023,e1024 : ( k = e1023 && k' = e1024 && e1024 = e1023 )) and exists ( e1025,e1026 : ( exists ( e1027,e1028 : ( e1027+e1028 = e1025 && j = e1027 && 1 = e1028 )) and j' = e1026 && e1026 = e1025 )) and exists ( e1029,e1030 : ( exists ( e1031,e1032 : ( e1031 = e1029+e1032 && i = e1031 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1023,e1024 : ( k = e1023 && k' = e1024 && e1024 = e1023 )) and exists ( e1025,e1026 : ( exists ( e1027,e1028 : ( e1027+e1028 = e1025 && j = e1027 && 1 = e1028 )) and j' = e1026 && e1026 = e1025 )) and exists ( e1029,e1030 : ( exists ( e1031,e1032 : ( e1031 = e1029+e1032 && i = e1031 && 1 = e1032 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1023,e1024 : ( k = e1023 && k' = e1024 && e1024 = e1023 )) and exists ( e1025,e1026 : ( exists ( e1027,e1028 : ( e1027+e1028 = e1025 && j = e1027 && 1 = e1028 )) and j' = e1026 && e1026 = e1025 )) and exists ( e1029,e1030 : ( exists ( e1031,e1032 : ( e1031 = e1029+e1032 && i = e1031 && 1 = e1032 )) and i' = e1030 && e1030 = e1029 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 11
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1033,e1034 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1033,e1034 : ( exists ( e1035,e1036 : ( e1035+e1036 = e1033 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1033,e1034 : ( exists ( e1035,e1036 : ( e1035+e1036 = e1033 && k = e1035 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1033,e1034 : ( exists ( e1035,e1036 : ( e1035+e1036 = e1033 && k = e1035 && 1 = e1036 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1033,e1034 : ( exists ( e1035,e1036 : ( e1035+e1036 = e1033 && k = e1035 && 1 = e1036 )) and k' = e1034 && e1034 = e1033 )) and exists ( e1037,e1038 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1033,e1034 : ( exists ( e1035,e1036 : ( e1035+e1036 = e1033 && k = e1035 && 1 = e1036 )) and k' = e1034 && e1034 = e1033 )) and exists ( e1037,e1038 : ( j = e1037 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1033,e1034 : ( exists ( e1035,e1036 : ( e1035+e1036 = e1033 && k = e1035 && 1 = e1036 )) and k' = e1034 && e1034 = e1033 )) and exists ( e1037,e1038 : ( j = e1037 && j' = e1038 && e1038 = e1037 )) and exists ( e1039,e1040 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1033,e1034 : ( exists ( e1035,e1036 : ( e1035+e1036 = e1033 && k = e1035 && 1 = e1036 )) and k' = e1034 && e1034 = e1033 )) and exists ( e1037,e1038 : ( j = e1037 && j' = e1038 && e1038 = e1037 )) and exists ( e1039,e1040 : ( exists ( e1041,e1042 : ( e1041 = e1039+e1042 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1033,e1034 : ( exists ( e1035,e1036 : ( e1035+e1036 = e1033 && k = e1035 && 1 = e1036 )) and k' = e1034 && e1034 = e1033 )) and exists ( e1037,e1038 : ( j = e1037 && j' = e1038 && e1038 = e1037 )) and exists ( e1039,e1040 : ( exists ( e1041,e1042 : ( e1041 = e1039+e1042 && i = e1041 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1033,e1034 : ( exists ( e1035,e1036 : ( e1035+e1036 = e1033 && k = e1035 && 1 = e1036 )) and k' = e1034 && e1034 = e1033 )) and exists ( e1037,e1038 : ( j = e1037 && j' = e1038 && e1038 = e1037 )) and exists ( e1039,e1040 : ( exists ( e1041,e1042 : ( e1041 = e1039+e1042 && i = e1041 && 1 = e1042 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1033,e1034 : ( exists ( e1035,e1036 : ( e1035+e1036 = e1033 && k = e1035 && 1 = e1036 )) and k' = e1034 && e1034 = e1033 )) and exists ( e1037,e1038 : ( j = e1037 && j' = e1038 && e1038 = e1037 )) and exists ( e1039,e1040 : ( exists ( e1041,e1042 : ( e1041 = e1039+e1042 && i = e1041 && 1 = e1042 )) and i' = e1040 && e1040 = e1039 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 12
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1043,e1044 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1043,e1044 : ( exists ( e1045,e1046 : ( e1045 = e1043+e1046 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1043,e1044 : ( exists ( e1045,e1046 : ( e1045 = e1043+e1046 && k = e1045 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1043,e1044 : ( exists ( e1045,e1046 : ( e1045 = e1043+e1046 && k = e1045 && 1 = e1046 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1043,e1044 : ( exists ( e1045,e1046 : ( e1045 = e1043+e1046 && k = e1045 && 1 = e1046 )) and k' = e1044 && e1044 = e1043 )) and exists ( e1047,e1048 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1043,e1044 : ( exists ( e1045,e1046 : ( e1045 = e1043+e1046 && k = e1045 && 1 = e1046 )) and k' = e1044 && e1044 = e1043 )) and exists ( e1047,e1048 : ( exists ( e1049,e1050 : ( e1049 = e1047+e1050 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1043,e1044 : ( exists ( e1045,e1046 : ( e1045 = e1043+e1046 && k = e1045 && 1 = e1046 )) and k' = e1044 && e1044 = e1043 )) and exists ( e1047,e1048 : ( exists ( e1049,e1050 : ( e1049 = e1047+e1050 && j = e1049 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1043,e1044 : ( exists ( e1045,e1046 : ( e1045 = e1043+e1046 && k = e1045 && 1 = e1046 )) and k' = e1044 && e1044 = e1043 )) and exists ( e1047,e1048 : ( exists ( e1049,e1050 : ( e1049 = e1047+e1050 && j = e1049 && 1 = e1050 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1043,e1044 : ( exists ( e1045,e1046 : ( e1045 = e1043+e1046 && k = e1045 && 1 = e1046 )) and k' = e1044 && e1044 = e1043 )) and exists ( e1047,e1048 : ( exists ( e1049,e1050 : ( e1049 = e1047+e1050 && j = e1049 && 1 = e1050 )) and j' = e1048 && e1048 = e1047 )) and exists ( e1051,e1052 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1043,e1044 : ( exists ( e1045,e1046 : ( e1045 = e1043+e1046 && k = e1045 && 1 = e1046 )) and k' = e1044 && e1044 = e1043 )) and exists ( e1047,e1048 : ( exists ( e1049,e1050 : ( e1049 = e1047+e1050 && j = e1049 && 1 = e1050 )) and j' = e1048 && e1048 = e1047 )) and exists ( e1051,e1052 : ( i = e1051 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1043,e1044 : ( exists ( e1045,e1046 : ( e1045 = e1043+e1046 && k = e1045 && 1 = e1046 )) and k' = e1044 && e1044 = e1043 )) and exists ( e1047,e1048 : ( exists ( e1049,e1050 : ( e1049 = e1047+e1050 && j = e1049 && 1 = e1050 )) and j' = e1048 && e1048 = e1047 )) and exists ( e1051,e1052 : ( i = e1051 && i' = e1052 && e1052 = e1051 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 13
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1053,e1054 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1053,e1054 : ( exists ( e1055,e1056 : ( e1055 = e1053+e1056 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1053,e1054 : ( exists ( e1055,e1056 : ( e1055 = e1053+e1056 && k = e1055 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1053,e1054 : ( exists ( e1055,e1056 : ( e1055 = e1053+e1056 && k = e1055 && 1 = e1056 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1053,e1054 : ( exists ( e1055,e1056 : ( e1055 = e1053+e1056 && k = e1055 && 1 = e1056 )) and k' = e1054 && e1054 = e1053 )) and exists ( e1057,e1058 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1053,e1054 : ( exists ( e1055,e1056 : ( e1055 = e1053+e1056 && k = e1055 && 1 = e1056 )) and k' = e1054 && e1054 = e1053 )) and exists ( e1057,e1058 : ( exists ( e1059,e1060 : ( e1059+e1060 = e1057 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1053,e1054 : ( exists ( e1055,e1056 : ( e1055 = e1053+e1056 && k = e1055 && 1 = e1056 )) and k' = e1054 && e1054 = e1053 )) and exists ( e1057,e1058 : ( exists ( e1059,e1060 : ( e1059+e1060 = e1057 && j = e1059 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1053,e1054 : ( exists ( e1055,e1056 : ( e1055 = e1053+e1056 && k = e1055 && 1 = e1056 )) and k' = e1054 && e1054 = e1053 )) and exists ( e1057,e1058 : ( exists ( e1059,e1060 : ( e1059+e1060 = e1057 && j = e1059 && 1 = e1060 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1053,e1054 : ( exists ( e1055,e1056 : ( e1055 = e1053+e1056 && k = e1055 && 1 = e1056 )) and k' = e1054 && e1054 = e1053 )) and exists ( e1057,e1058 : ( exists ( e1059,e1060 : ( e1059+e1060 = e1057 && j = e1059 && 1 = e1060 )) and j' = e1058 && e1058 = e1057 )) and exists ( e1061,e1062 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1053,e1054 : ( exists ( e1055,e1056 : ( e1055 = e1053+e1056 && k = e1055 && 1 = e1056 )) and k' = e1054 && e1054 = e1053 )) and exists ( e1057,e1058 : ( exists ( e1059,e1060 : ( e1059+e1060 = e1057 && j = e1059 && 1 = e1060 )) and j' = e1058 && e1058 = e1057 )) and exists ( e1061,e1062 : ( i = e1061 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1053,e1054 : ( exists ( e1055,e1056 : ( e1055 = e1053+e1056 && k = e1055 && 1 = e1056 )) and k' = e1054 && e1054 = e1053 )) and exists ( e1057,e1058 : ( exists ( e1059,e1060 : ( e1059+e1060 = e1057 && j = e1059 && 1 = e1060 )) and j' = e1058 && e1058 = e1057 )) and exists ( e1061,e1062 : ( i = e1061 && i' = e1062 && e1062 = e1061 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 14
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1063,e1064 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1063,e1064 : ( exists ( e1065,e1066 : ( e1065+e1066 = e1063 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1063,e1064 : ( exists ( e1065,e1066 : ( e1065+e1066 = e1063 && k = e1065 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1063,e1064 : ( exists ( e1065,e1066 : ( e1065+e1066 = e1063 && k = e1065 && 1 = e1066 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1063,e1064 : ( exists ( e1065,e1066 : ( e1065+e1066 = e1063 && k = e1065 && 1 = e1066 )) and k' = e1064 && e1064 = e1063 )) and exists ( e1067,e1068 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1063,e1064 : ( exists ( e1065,e1066 : ( e1065+e1066 = e1063 && k = e1065 && 1 = e1066 )) and k' = e1064 && e1064 = e1063 )) and exists ( e1067,e1068 : ( exists ( e1069,e1070 : ( e1069 = e1067+e1070 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1063,e1064 : ( exists ( e1065,e1066 : ( e1065+e1066 = e1063 && k = e1065 && 1 = e1066 )) and k' = e1064 && e1064 = e1063 )) and exists ( e1067,e1068 : ( exists ( e1069,e1070 : ( e1069 = e1067+e1070 && j = e1069 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1063,e1064 : ( exists ( e1065,e1066 : ( e1065+e1066 = e1063 && k = e1065 && 1 = e1066 )) and k' = e1064 && e1064 = e1063 )) and exists ( e1067,e1068 : ( exists ( e1069,e1070 : ( e1069 = e1067+e1070 && j = e1069 && 1 = e1070 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1063,e1064 : ( exists ( e1065,e1066 : ( e1065+e1066 = e1063 && k = e1065 && 1 = e1066 )) and k' = e1064 && e1064 = e1063 )) and exists ( e1067,e1068 : ( exists ( e1069,e1070 : ( e1069 = e1067+e1070 && j = e1069 && 1 = e1070 )) and j' = e1068 && e1068 = e1067 )) and exists ( e1071,e1072 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1063,e1064 : ( exists ( e1065,e1066 : ( e1065+e1066 = e1063 && k = e1065 && 1 = e1066 )) and k' = e1064 && e1064 = e1063 )) and exists ( e1067,e1068 : ( exists ( e1069,e1070 : ( e1069 = e1067+e1070 && j = e1069 && 1 = e1070 )) and j' = e1068 && e1068 = e1067 )) and exists ( e1071,e1072 : ( i = e1071 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1063,e1064 : ( exists ( e1065,e1066 : ( e1065+e1066 = e1063 && k = e1065 && 1 = e1066 )) and k' = e1064 && e1064 = e1063 )) and exists ( e1067,e1068 : ( exists ( e1069,e1070 : ( e1069 = e1067+e1070 && j = e1069 && 1 = e1070 )) and j' = e1068 && e1068 = e1067 )) and exists ( e1071,e1072 : ( i = e1071 && i' = e1072 && e1072 = e1071 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 15
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1073,e1074 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1073,e1074 : ( exists ( e1075,e1076 : ( e1075+e1076 = e1073 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1073,e1074 : ( exists ( e1075,e1076 : ( e1075+e1076 = e1073 && k = e1075 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1073,e1074 : ( exists ( e1075,e1076 : ( e1075+e1076 = e1073 && k = e1075 && 1 = e1076 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1073,e1074 : ( exists ( e1075,e1076 : ( e1075+e1076 = e1073 && k = e1075 && 1 = e1076 )) and k' = e1074 && e1074 = e1073 )) and exists ( e1077,e1078 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1073,e1074 : ( exists ( e1075,e1076 : ( e1075+e1076 = e1073 && k = e1075 && 1 = e1076 )) and k' = e1074 && e1074 = e1073 )) and exists ( e1077,e1078 : ( exists ( e1079,e1080 : ( e1079+e1080 = e1077 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1073,e1074 : ( exists ( e1075,e1076 : ( e1075+e1076 = e1073 && k = e1075 && 1 = e1076 )) and k' = e1074 && e1074 = e1073 )) and exists ( e1077,e1078 : ( exists ( e1079,e1080 : ( e1079+e1080 = e1077 && j = e1079 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1073,e1074 : ( exists ( e1075,e1076 : ( e1075+e1076 = e1073 && k = e1075 && 1 = e1076 )) and k' = e1074 && e1074 = e1073 )) and exists ( e1077,e1078 : ( exists ( e1079,e1080 : ( e1079+e1080 = e1077 && j = e1079 && 1 = e1080 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1073,e1074 : ( exists ( e1075,e1076 : ( e1075+e1076 = e1073 && k = e1075 && 1 = e1076 )) and k' = e1074 && e1074 = e1073 )) and exists ( e1077,e1078 : ( exists ( e1079,e1080 : ( e1079+e1080 = e1077 && j = e1079 && 1 = e1080 )) and j' = e1078 && e1078 = e1077 )) and exists ( e1081,e1082 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1073,e1074 : ( exists ( e1075,e1076 : ( e1075+e1076 = e1073 && k = e1075 && 1 = e1076 )) and k' = e1074 && e1074 = e1073 )) and exists ( e1077,e1078 : ( exists ( e1079,e1080 : ( e1079+e1080 = e1077 && j = e1079 && 1 = e1080 )) and j' = e1078 && e1078 = e1077 )) and exists ( e1081,e1082 : ( i = e1081 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1073,e1074 : ( exists ( e1075,e1076 : ( e1075+e1076 = e1073 && k = e1075 && 1 = e1076 )) and k' = e1074 && e1074 = e1073 )) and exists ( e1077,e1078 : ( exists ( e1079,e1080 : ( e1079+e1080 = e1077 && j = e1079 && 1 = e1080 )) and j' = e1078 && e1078 = e1077 )) and exists ( e1081,e1082 : ( i = e1081 && i' = e1082 && e1082 = e1081 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 16
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1083,e1084 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1083,e1084 : ( exists ( e1085,e1086 : ( e1085 = e1083+e1086 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1083,e1084 : ( exists ( e1085,e1086 : ( e1085 = e1083+e1086 && k = e1085 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1083,e1084 : ( exists ( e1085,e1086 : ( e1085 = e1083+e1086 && k = e1085 && 1 = e1086 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1083,e1084 : ( exists ( e1085,e1086 : ( e1085 = e1083+e1086 && k = e1085 && 1 = e1086 )) and k' = e1084 && e1084 = e1083 )) and exists ( e1087,e1088 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1083,e1084 : ( exists ( e1085,e1086 : ( e1085 = e1083+e1086 && k = e1085 && 1 = e1086 )) and k' = e1084 && e1084 = e1083 )) and exists ( e1087,e1088 : ( j = e1087 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1083,e1084 : ( exists ( e1085,e1086 : ( e1085 = e1083+e1086 && k = e1085 && 1 = e1086 )) and k' = e1084 && e1084 = e1083 )) and exists ( e1087,e1088 : ( j = e1087 && j' = e1088 && e1088 = e1087 )) and exists ( e1089,e1090 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1083,e1084 : ( exists ( e1085,e1086 : ( e1085 = e1083+e1086 && k = e1085 && 1 = e1086 )) and k' = e1084 && e1084 = e1083 )) and exists ( e1087,e1088 : ( j = e1087 && j' = e1088 && e1088 = e1087 )) and exists ( e1089,e1090 : ( exists ( e1091,e1092 : ( e1091+e1092 = e1089 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1083,e1084 : ( exists ( e1085,e1086 : ( e1085 = e1083+e1086 && k = e1085 && 1 = e1086 )) and k' = e1084 && e1084 = e1083 )) and exists ( e1087,e1088 : ( j = e1087 && j' = e1088 && e1088 = e1087 )) and exists ( e1089,e1090 : ( exists ( e1091,e1092 : ( e1091+e1092 = e1089 && i = e1091 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1083,e1084 : ( exists ( e1085,e1086 : ( e1085 = e1083+e1086 && k = e1085 && 1 = e1086 )) and k' = e1084 && e1084 = e1083 )) and exists ( e1087,e1088 : ( j = e1087 && j' = e1088 && e1088 = e1087 )) and exists ( e1089,e1090 : ( exists ( e1091,e1092 : ( e1091+e1092 = e1089 && i = e1091 && 1 = e1092 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1083,e1084 : ( exists ( e1085,e1086 : ( e1085 = e1083+e1086 && k = e1085 && 1 = e1086 )) and k' = e1084 && e1084 = e1083 )) and exists ( e1087,e1088 : ( j = e1087 && j' = e1088 && e1088 = e1087 )) and exists ( e1089,e1090 : ( exists ( e1091,e1092 : ( e1091+e1092 = e1089 && i = e1091 && 1 = e1092 )) and i' = e1090 && e1090 = e1089 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 17
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1093,e1094 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1093,e1094 : ( k = e1093 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1093,e1094 : ( k = e1093 && k' = e1094 && e1094 = e1093 )) and exists ( e1095,e1096 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1093,e1094 : ( k = e1093 && k' = e1094 && e1094 = e1093 )) and exists ( e1095,e1096 : ( exists ( e1097,e1098 : ( e1097 = e1095+e1098 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1093,e1094 : ( k = e1093 && k' = e1094 && e1094 = e1093 )) and exists ( e1095,e1096 : ( exists ( e1097,e1098 : ( e1097 = e1095+e1098 && j = e1097 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1093,e1094 : ( k = e1093 && k' = e1094 && e1094 = e1093 )) and exists ( e1095,e1096 : ( exists ( e1097,e1098 : ( e1097 = e1095+e1098 && j = e1097 && 1 = e1098 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1093,e1094 : ( k = e1093 && k' = e1094 && e1094 = e1093 )) and exists ( e1095,e1096 : ( exists ( e1097,e1098 : ( e1097 = e1095+e1098 && j = e1097 && 1 = e1098 )) and j' = e1096 && e1096 = e1095 )) and exists ( e1099,e1100 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1093,e1094 : ( k = e1093 && k' = e1094 && e1094 = e1093 )) and exists ( e1095,e1096 : ( exists ( e1097,e1098 : ( e1097 = e1095+e1098 && j = e1097 && 1 = e1098 )) and j' = e1096 && e1096 = e1095 )) and exists ( e1099,e1100 : ( exists ( e1101,e1102 : ( e1101+e1102 = e1099 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1093,e1094 : ( k = e1093 && k' = e1094 && e1094 = e1093 )) and exists ( e1095,e1096 : ( exists ( e1097,e1098 : ( e1097 = e1095+e1098 && j = e1097 && 1 = e1098 )) and j' = e1096 && e1096 = e1095 )) and exists ( e1099,e1100 : ( exists ( e1101,e1102 : ( e1101+e1102 = e1099 && i = e1101 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1093,e1094 : ( k = e1093 && k' = e1094 && e1094 = e1093 )) and exists ( e1095,e1096 : ( exists ( e1097,e1098 : ( e1097 = e1095+e1098 && j = e1097 && 1 = e1098 )) and j' = e1096 && e1096 = e1095 )) and exists ( e1099,e1100 : ( exists ( e1101,e1102 : ( e1101+e1102 = e1099 && i = e1101 && 1 = e1102 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1093,e1094 : ( k = e1093 && k' = e1094 && e1094 = e1093 )) and exists ( e1095,e1096 : ( exists ( e1097,e1098 : ( e1097 = e1095+e1098 && j = e1097 && 1 = e1098 )) and j' = e1096 && e1096 = e1095 )) and exists ( e1099,e1100 : ( exists ( e1101,e1102 : ( e1101+e1102 = e1099 && i = e1101 && 1 = e1102 )) and i' = e1100 && e1100 = e1099 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 18
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1103,e1104 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1103,e1104 : ( k = e1103 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1103,e1104 : ( k = e1103 && k' = e1104 && e1104 = e1103 )) and exists ( e1105,e1106 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1103,e1104 : ( k = e1103 && k' = e1104 && e1104 = e1103 )) and exists ( e1105,e1106 : ( exists ( e1107,e1108 : ( e1107+e1108 = e1105 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1103,e1104 : ( k = e1103 && k' = e1104 && e1104 = e1103 )) and exists ( e1105,e1106 : ( exists ( e1107,e1108 : ( e1107+e1108 = e1105 && j = e1107 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1103,e1104 : ( k = e1103 && k' = e1104 && e1104 = e1103 )) and exists ( e1105,e1106 : ( exists ( e1107,e1108 : ( e1107+e1108 = e1105 && j = e1107 && 1 = e1108 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1103,e1104 : ( k = e1103 && k' = e1104 && e1104 = e1103 )) and exists ( e1105,e1106 : ( exists ( e1107,e1108 : ( e1107+e1108 = e1105 && j = e1107 && 1 = e1108 )) and j' = e1106 && e1106 = e1105 )) and exists ( e1109,e1110 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1103,e1104 : ( k = e1103 && k' = e1104 && e1104 = e1103 )) and exists ( e1105,e1106 : ( exists ( e1107,e1108 : ( e1107+e1108 = e1105 && j = e1107 && 1 = e1108 )) and j' = e1106 && e1106 = e1105 )) and exists ( e1109,e1110 : ( exists ( e1111,e1112 : ( e1111+e1112 = e1109 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1103,e1104 : ( k = e1103 && k' = e1104 && e1104 = e1103 )) and exists ( e1105,e1106 : ( exists ( e1107,e1108 : ( e1107+e1108 = e1105 && j = e1107 && 1 = e1108 )) and j' = e1106 && e1106 = e1105 )) and exists ( e1109,e1110 : ( exists ( e1111,e1112 : ( e1111+e1112 = e1109 && i = e1111 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1103,e1104 : ( k = e1103 && k' = e1104 && e1104 = e1103 )) and exists ( e1105,e1106 : ( exists ( e1107,e1108 : ( e1107+e1108 = e1105 && j = e1107 && 1 = e1108 )) and j' = e1106 && e1106 = e1105 )) and exists ( e1109,e1110 : ( exists ( e1111,e1112 : ( e1111+e1112 = e1109 && i = e1111 && 1 = e1112 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1103,e1104 : ( k = e1103 && k' = e1104 && e1104 = e1103 )) and exists ( e1105,e1106 : ( exists ( e1107,e1108 : ( e1107+e1108 = e1105 && j = e1107 && 1 = e1108 )) and j' = e1106 && e1106 = e1105 )) and exists ( e1109,e1110 : ( exists ( e1111,e1112 : ( e1111+e1112 = e1109 && i = e1111 && 1 = e1112 )) and i' = e1110 && e1110 = e1109 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 19
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1113,e1114 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1113,e1114 : ( exists ( e1115,e1116 : ( e1115+e1116 = e1113 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1113,e1114 : ( exists ( e1115,e1116 : ( e1115+e1116 = e1113 && k = e1115 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1113,e1114 : ( exists ( e1115,e1116 : ( e1115+e1116 = e1113 && k = e1115 && 1 = e1116 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1113,e1114 : ( exists ( e1115,e1116 : ( e1115+e1116 = e1113 && k = e1115 && 1 = e1116 )) and k' = e1114 && e1114 = e1113 )) and exists ( e1117,e1118 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1113,e1114 : ( exists ( e1115,e1116 : ( e1115+e1116 = e1113 && k = e1115 && 1 = e1116 )) and k' = e1114 && e1114 = e1113 )) and exists ( e1117,e1118 : ( j = e1117 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1113,e1114 : ( exists ( e1115,e1116 : ( e1115+e1116 = e1113 && k = e1115 && 1 = e1116 )) and k' = e1114 && e1114 = e1113 )) and exists ( e1117,e1118 : ( j = e1117 && j' = e1118 && e1118 = e1117 )) and exists ( e1119,e1120 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1113,e1114 : ( exists ( e1115,e1116 : ( e1115+e1116 = e1113 && k = e1115 && 1 = e1116 )) and k' = e1114 && e1114 = e1113 )) and exists ( e1117,e1118 : ( j = e1117 && j' = e1118 && e1118 = e1117 )) and exists ( e1119,e1120 : ( exists ( e1121,e1122 : ( e1121+e1122 = e1119 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1113,e1114 : ( exists ( e1115,e1116 : ( e1115+e1116 = e1113 && k = e1115 && 1 = e1116 )) and k' = e1114 && e1114 = e1113 )) and exists ( e1117,e1118 : ( j = e1117 && j' = e1118 && e1118 = e1117 )) and exists ( e1119,e1120 : ( exists ( e1121,e1122 : ( e1121+e1122 = e1119 && i = e1121 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1113,e1114 : ( exists ( e1115,e1116 : ( e1115+e1116 = e1113 && k = e1115 && 1 = e1116 )) and k' = e1114 && e1114 = e1113 )) and exists ( e1117,e1118 : ( j = e1117 && j' = e1118 && e1118 = e1117 )) and exists ( e1119,e1120 : ( exists ( e1121,e1122 : ( e1121+e1122 = e1119 && i = e1121 && 1 = e1122 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1113,e1114 : ( exists ( e1115,e1116 : ( e1115+e1116 = e1113 && k = e1115 && 1 = e1116 )) and k' = e1114 && e1114 = e1113 )) and exists ( e1117,e1118 : ( j = e1117 && j' = e1118 && e1118 = e1117 )) and exists ( e1119,e1120 : ( exists ( e1121,e1122 : ( e1121+e1122 = e1119 && i = e1121 && 1 = e1122 )) and i' = e1120 && e1120 = e1119 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 20
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( exists ( e1125,e1126 : ( e1125 = e1123+e1126 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( exists ( e1125,e1126 : ( e1125 = e1123+e1126 && k = e1125 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( exists ( e1125,e1126 : ( e1125 = e1123+e1126 && k = e1125 && 1 = e1126 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( exists ( e1125,e1126 : ( e1125 = e1123+e1126 && k = e1125 && 1 = e1126 )) and k' = e1124 && e1124 = e1123 )) and exists ( e1127,e1128 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( exists ( e1125,e1126 : ( e1125 = e1123+e1126 && k = e1125 && 1 = e1126 )) and k' = e1124 && e1124 = e1123 )) and exists ( e1127,e1128 : ( exists ( e1129,e1130 : ( e1129 = e1127+e1130 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( exists ( e1125,e1126 : ( e1125 = e1123+e1126 && k = e1125 && 1 = e1126 )) and k' = e1124 && e1124 = e1123 )) and exists ( e1127,e1128 : ( exists ( e1129,e1130 : ( e1129 = e1127+e1130 && j = e1129 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( exists ( e1125,e1126 : ( e1125 = e1123+e1126 && k = e1125 && 1 = e1126 )) and k' = e1124 && e1124 = e1123 )) and exists ( e1127,e1128 : ( exists ( e1129,e1130 : ( e1129 = e1127+e1130 && j = e1129 && 1 = e1130 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( exists ( e1125,e1126 : ( e1125 = e1123+e1126 && k = e1125 && 1 = e1126 )) and k' = e1124 && e1124 = e1123 )) and exists ( e1127,e1128 : ( exists ( e1129,e1130 : ( e1129 = e1127+e1130 && j = e1129 && 1 = e1130 )) and j' = e1128 && e1128 = e1127 )) and exists ( e1131,e1132 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( exists ( e1125,e1126 : ( e1125 = e1123+e1126 && k = e1125 && 1 = e1126 )) and k' = e1124 && e1124 = e1123 )) and exists ( e1127,e1128 : ( exists ( e1129,e1130 : ( e1129 = e1127+e1130 && j = e1129 && 1 = e1130 )) and j' = e1128 && e1128 = e1127 )) and exists ( e1131,e1132 : ( exists ( e1133,e1134 : ( e1133 = e1131+e1134 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( exists ( e1125,e1126 : ( e1125 = e1123+e1126 && k = e1125 && 1 = e1126 )) and k' = e1124 && e1124 = e1123 )) and exists ( e1127,e1128 : ( exists ( e1129,e1130 : ( e1129 = e1127+e1130 && j = e1129 && 1 = e1130 )) and j' = e1128 && e1128 = e1127 )) and exists ( e1131,e1132 : ( exists ( e1133,e1134 : ( e1133 = e1131+e1134 && i = e1133 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( exists ( e1125,e1126 : ( e1125 = e1123+e1126 && k = e1125 && 1 = e1126 )) and k' = e1124 && e1124 = e1123 )) and exists ( e1127,e1128 : ( exists ( e1129,e1130 : ( e1129 = e1127+e1130 && j = e1129 && 1 = e1130 )) and j' = e1128 && e1128 = e1127 )) and exists ( e1131,e1132 : ( exists ( e1133,e1134 : ( e1133 = e1131+e1134 && i = e1133 && 1 = e1134 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1123,e1124 : ( exists ( e1125,e1126 : ( e1125 = e1123+e1126 && k = e1125 && 1 = e1126 )) and k' = e1124 && e1124 = e1123 )) and exists ( e1127,e1128 : ( exists ( e1129,e1130 : ( e1129 = e1127+e1130 && j = e1129 && 1 = e1130 )) and j' = e1128 && e1128 = e1127 )) and exists ( e1131,e1132 : ( exists ( e1133,e1134 : ( e1133 = e1131+e1134 && i = e1133 && 1 = e1134 )) and i' = e1132 && e1132 = e1131 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 21
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( exists ( e1137,e1138 : ( e1137 = e1135+e1138 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( exists ( e1137,e1138 : ( e1137 = e1135+e1138 && k = e1137 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( exists ( e1137,e1138 : ( e1137 = e1135+e1138 && k = e1137 && 1 = e1138 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( exists ( e1137,e1138 : ( e1137 = e1135+e1138 && k = e1137 && 1 = e1138 )) and k' = e1136 && e1136 = e1135 )) and exists ( e1139,e1140 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( exists ( e1137,e1138 : ( e1137 = e1135+e1138 && k = e1137 && 1 = e1138 )) and k' = e1136 && e1136 = e1135 )) and exists ( e1139,e1140 : ( exists ( e1141,e1142 : ( e1141+e1142 = e1139 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( exists ( e1137,e1138 : ( e1137 = e1135+e1138 && k = e1137 && 1 = e1138 )) and k' = e1136 && e1136 = e1135 )) and exists ( e1139,e1140 : ( exists ( e1141,e1142 : ( e1141+e1142 = e1139 && j = e1141 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( exists ( e1137,e1138 : ( e1137 = e1135+e1138 && k = e1137 && 1 = e1138 )) and k' = e1136 && e1136 = e1135 )) and exists ( e1139,e1140 : ( exists ( e1141,e1142 : ( e1141+e1142 = e1139 && j = e1141 && 1 = e1142 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( exists ( e1137,e1138 : ( e1137 = e1135+e1138 && k = e1137 && 1 = e1138 )) and k' = e1136 && e1136 = e1135 )) and exists ( e1139,e1140 : ( exists ( e1141,e1142 : ( e1141+e1142 = e1139 && j = e1141 && 1 = e1142 )) and j' = e1140 && e1140 = e1139 )) and exists ( e1143,e1144 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( exists ( e1137,e1138 : ( e1137 = e1135+e1138 && k = e1137 && 1 = e1138 )) and k' = e1136 && e1136 = e1135 )) and exists ( e1139,e1140 : ( exists ( e1141,e1142 : ( e1141+e1142 = e1139 && j = e1141 && 1 = e1142 )) and j' = e1140 && e1140 = e1139 )) and exists ( e1143,e1144 : ( exists ( e1145,e1146 : ( e1145 = e1143+e1146 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( exists ( e1137,e1138 : ( e1137 = e1135+e1138 && k = e1137 && 1 = e1138 )) and k' = e1136 && e1136 = e1135 )) and exists ( e1139,e1140 : ( exists ( e1141,e1142 : ( e1141+e1142 = e1139 && j = e1141 && 1 = e1142 )) and j' = e1140 && e1140 = e1139 )) and exists ( e1143,e1144 : ( exists ( e1145,e1146 : ( e1145 = e1143+e1146 && i = e1145 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( exists ( e1137,e1138 : ( e1137 = e1135+e1138 && k = e1137 && 1 = e1138 )) and k' = e1136 && e1136 = e1135 )) and exists ( e1139,e1140 : ( exists ( e1141,e1142 : ( e1141+e1142 = e1139 && j = e1141 && 1 = e1142 )) and j' = e1140 && e1140 = e1139 )) and exists ( e1143,e1144 : ( exists ( e1145,e1146 : ( e1145 = e1143+e1146 && i = e1145 && 1 = e1146 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1135,e1136 : ( exists ( e1137,e1138 : ( e1137 = e1135+e1138 && k = e1137 && 1 = e1138 )) and k' = e1136 && e1136 = e1135 )) and exists ( e1139,e1140 : ( exists ( e1141,e1142 : ( e1141+e1142 = e1139 && j = e1141 && 1 = e1142 )) and j' = e1140 && e1140 = e1139 )) and exists ( e1143,e1144 : ( exists ( e1145,e1146 : ( e1145 = e1143+e1146 && i = e1145 && 1 = e1146 )) and i' = e1144 && e1144 = e1143 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 22
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( exists ( e1149,e1150 : ( e1149+e1150 = e1147 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( exists ( e1149,e1150 : ( e1149+e1150 = e1147 && k = e1149 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( exists ( e1149,e1150 : ( e1149+e1150 = e1147 && k = e1149 && 1 = e1150 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( exists ( e1149,e1150 : ( e1149+e1150 = e1147 && k = e1149 && 1 = e1150 )) and k' = e1148 && e1148 = e1147 )) and exists ( e1151,e1152 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( exists ( e1149,e1150 : ( e1149+e1150 = e1147 && k = e1149 && 1 = e1150 )) and k' = e1148 && e1148 = e1147 )) and exists ( e1151,e1152 : ( exists ( e1153,e1154 : ( e1153 = e1151+e1154 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( exists ( e1149,e1150 : ( e1149+e1150 = e1147 && k = e1149 && 1 = e1150 )) and k' = e1148 && e1148 = e1147 )) and exists ( e1151,e1152 : ( exists ( e1153,e1154 : ( e1153 = e1151+e1154 && j = e1153 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( exists ( e1149,e1150 : ( e1149+e1150 = e1147 && k = e1149 && 1 = e1150 )) and k' = e1148 && e1148 = e1147 )) and exists ( e1151,e1152 : ( exists ( e1153,e1154 : ( e1153 = e1151+e1154 && j = e1153 && 1 = e1154 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( exists ( e1149,e1150 : ( e1149+e1150 = e1147 && k = e1149 && 1 = e1150 )) and k' = e1148 && e1148 = e1147 )) and exists ( e1151,e1152 : ( exists ( e1153,e1154 : ( e1153 = e1151+e1154 && j = e1153 && 1 = e1154 )) and j' = e1152 && e1152 = e1151 )) and exists ( e1155,e1156 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( exists ( e1149,e1150 : ( e1149+e1150 = e1147 && k = e1149 && 1 = e1150 )) and k' = e1148 && e1148 = e1147 )) and exists ( e1151,e1152 : ( exists ( e1153,e1154 : ( e1153 = e1151+e1154 && j = e1153 && 1 = e1154 )) and j' = e1152 && e1152 = e1151 )) and exists ( e1155,e1156 : ( exists ( e1157,e1158 : ( e1157 = e1155+e1158 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( exists ( e1149,e1150 : ( e1149+e1150 = e1147 && k = e1149 && 1 = e1150 )) and k' = e1148 && e1148 = e1147 )) and exists ( e1151,e1152 : ( exists ( e1153,e1154 : ( e1153 = e1151+e1154 && j = e1153 && 1 = e1154 )) and j' = e1152 && e1152 = e1151 )) and exists ( e1155,e1156 : ( exists ( e1157,e1158 : ( e1157 = e1155+e1158 && i = e1157 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( exists ( e1149,e1150 : ( e1149+e1150 = e1147 && k = e1149 && 1 = e1150 )) and k' = e1148 && e1148 = e1147 )) and exists ( e1151,e1152 : ( exists ( e1153,e1154 : ( e1153 = e1151+e1154 && j = e1153 && 1 = e1154 )) and j' = e1152 && e1152 = e1151 )) and exists ( e1155,e1156 : ( exists ( e1157,e1158 : ( e1157 = e1155+e1158 && i = e1157 && 1 = e1158 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1147,e1148 : ( exists ( e1149,e1150 : ( e1149+e1150 = e1147 && k = e1149 && 1 = e1150 )) and k' = e1148 && e1148 = e1147 )) and exists ( e1151,e1152 : ( exists ( e1153,e1154 : ( e1153 = e1151+e1154 && j = e1153 && 1 = e1154 )) and j' = e1152 && e1152 = e1151 )) and exists ( e1155,e1156 : ( exists ( e1157,e1158 : ( e1157 = e1155+e1158 && i = e1157 && 1 = e1158 )) and i' = e1156 && e1156 = e1155 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 23
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( exists ( e1161,e1162 : ( e1161+e1162 = e1159 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( exists ( e1161,e1162 : ( e1161+e1162 = e1159 && k = e1161 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( exists ( e1161,e1162 : ( e1161+e1162 = e1159 && k = e1161 && 1 = e1162 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( exists ( e1161,e1162 : ( e1161+e1162 = e1159 && k = e1161 && 1 = e1162 )) and k' = e1160 && e1160 = e1159 )) and exists ( e1163,e1164 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( exists ( e1161,e1162 : ( e1161+e1162 = e1159 && k = e1161 && 1 = e1162 )) and k' = e1160 && e1160 = e1159 )) and exists ( e1163,e1164 : ( exists ( e1165,e1166 : ( e1165+e1166 = e1163 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( exists ( e1161,e1162 : ( e1161+e1162 = e1159 && k = e1161 && 1 = e1162 )) and k' = e1160 && e1160 = e1159 )) and exists ( e1163,e1164 : ( exists ( e1165,e1166 : ( e1165+e1166 = e1163 && j = e1165 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( exists ( e1161,e1162 : ( e1161+e1162 = e1159 && k = e1161 && 1 = e1162 )) and k' = e1160 && e1160 = e1159 )) and exists ( e1163,e1164 : ( exists ( e1165,e1166 : ( e1165+e1166 = e1163 && j = e1165 && 1 = e1166 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( exists ( e1161,e1162 : ( e1161+e1162 = e1159 && k = e1161 && 1 = e1162 )) and k' = e1160 && e1160 = e1159 )) and exists ( e1163,e1164 : ( exists ( e1165,e1166 : ( e1165+e1166 = e1163 && j = e1165 && 1 = e1166 )) and j' = e1164 && e1164 = e1163 )) and exists ( e1167,e1168 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( exists ( e1161,e1162 : ( e1161+e1162 = e1159 && k = e1161 && 1 = e1162 )) and k' = e1160 && e1160 = e1159 )) and exists ( e1163,e1164 : ( exists ( e1165,e1166 : ( e1165+e1166 = e1163 && j = e1165 && 1 = e1166 )) and j' = e1164 && e1164 = e1163 )) and exists ( e1167,e1168 : ( exists ( e1169,e1170 : ( e1169 = e1167+e1170 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( exists ( e1161,e1162 : ( e1161+e1162 = e1159 && k = e1161 && 1 = e1162 )) and k' = e1160 && e1160 = e1159 )) and exists ( e1163,e1164 : ( exists ( e1165,e1166 : ( e1165+e1166 = e1163 && j = e1165 && 1 = e1166 )) and j' = e1164 && e1164 = e1163 )) and exists ( e1167,e1168 : ( exists ( e1169,e1170 : ( e1169 = e1167+e1170 && i = e1169 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( exists ( e1161,e1162 : ( e1161+e1162 = e1159 && k = e1161 && 1 = e1162 )) and k' = e1160 && e1160 = e1159 )) and exists ( e1163,e1164 : ( exists ( e1165,e1166 : ( e1165+e1166 = e1163 && j = e1165 && 1 = e1166 )) and j' = e1164 && e1164 = e1163 )) and exists ( e1167,e1168 : ( exists ( e1169,e1170 : ( e1169 = e1167+e1170 && i = e1169 && 1 = e1170 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1159,e1160 : ( exists ( e1161,e1162 : ( e1161+e1162 = e1159 && k = e1161 && 1 = e1162 )) and k' = e1160 && e1160 = e1159 )) and exists ( e1163,e1164 : ( exists ( e1165,e1166 : ( e1165+e1166 = e1163 && j = e1165 && 1 = e1166 )) and j' = e1164 && e1164 = e1163 )) and exists ( e1167,e1168 : ( exists ( e1169,e1170 : ( e1169 = e1167+e1170 && i = e1169 && 1 = e1170 )) and i' = e1168 && e1168 = e1167 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 24
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( exists ( e1173,e1174 : ( e1173 = e1171+e1174 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( exists ( e1173,e1174 : ( e1173 = e1171+e1174 && k = e1173 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( exists ( e1173,e1174 : ( e1173 = e1171+e1174 && k = e1173 && 1 = e1174 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( exists ( e1173,e1174 : ( e1173 = e1171+e1174 && k = e1173 && 1 = e1174 )) and k' = e1172 && e1172 = e1171 )) and exists ( e1175,e1176 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( exists ( e1173,e1174 : ( e1173 = e1171+e1174 && k = e1173 && 1 = e1174 )) and k' = e1172 && e1172 = e1171 )) and exists ( e1175,e1176 : ( exists ( e1177,e1178 : ( e1177 = e1175+e1178 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( exists ( e1173,e1174 : ( e1173 = e1171+e1174 && k = e1173 && 1 = e1174 )) and k' = e1172 && e1172 = e1171 )) and exists ( e1175,e1176 : ( exists ( e1177,e1178 : ( e1177 = e1175+e1178 && j = e1177 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( exists ( e1173,e1174 : ( e1173 = e1171+e1174 && k = e1173 && 1 = e1174 )) and k' = e1172 && e1172 = e1171 )) and exists ( e1175,e1176 : ( exists ( e1177,e1178 : ( e1177 = e1175+e1178 && j = e1177 && 1 = e1178 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( exists ( e1173,e1174 : ( e1173 = e1171+e1174 && k = e1173 && 1 = e1174 )) and k' = e1172 && e1172 = e1171 )) and exists ( e1175,e1176 : ( exists ( e1177,e1178 : ( e1177 = e1175+e1178 && j = e1177 && 1 = e1178 )) and j' = e1176 && e1176 = e1175 )) and exists ( e1179,e1180 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( exists ( e1173,e1174 : ( e1173 = e1171+e1174 && k = e1173 && 1 = e1174 )) and k' = e1172 && e1172 = e1171 )) and exists ( e1175,e1176 : ( exists ( e1177,e1178 : ( e1177 = e1175+e1178 && j = e1177 && 1 = e1178 )) and j' = e1176 && e1176 = e1175 )) and exists ( e1179,e1180 : ( exists ( e1181,e1182 : ( e1181+e1182 = e1179 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( exists ( e1173,e1174 : ( e1173 = e1171+e1174 && k = e1173 && 1 = e1174 )) and k' = e1172 && e1172 = e1171 )) and exists ( e1175,e1176 : ( exists ( e1177,e1178 : ( e1177 = e1175+e1178 && j = e1177 && 1 = e1178 )) and j' = e1176 && e1176 = e1175 )) and exists ( e1179,e1180 : ( exists ( e1181,e1182 : ( e1181+e1182 = e1179 && i = e1181 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( exists ( e1173,e1174 : ( e1173 = e1171+e1174 && k = e1173 && 1 = e1174 )) and k' = e1172 && e1172 = e1171 )) and exists ( e1175,e1176 : ( exists ( e1177,e1178 : ( e1177 = e1175+e1178 && j = e1177 && 1 = e1178 )) and j' = e1176 && e1176 = e1175 )) and exists ( e1179,e1180 : ( exists ( e1181,e1182 : ( e1181+e1182 = e1179 && i = e1181 && 1 = e1182 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1171,e1172 : ( exists ( e1173,e1174 : ( e1173 = e1171+e1174 && k = e1173 && 1 = e1174 )) and k' = e1172 && e1172 = e1171 )) and exists ( e1175,e1176 : ( exists ( e1177,e1178 : ( e1177 = e1175+e1178 && j = e1177 && 1 = e1178 )) and j' = e1176 && e1176 = e1175 )) and exists ( e1179,e1180 : ( exists ( e1181,e1182 : ( e1181+e1182 = e1179 && i = e1181 && 1 = e1182 )) and i' = e1180 && e1180 = e1179 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 25
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( exists ( e1185,e1186 : ( e1185 = e1183+e1186 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( exists ( e1185,e1186 : ( e1185 = e1183+e1186 && k = e1185 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( exists ( e1185,e1186 : ( e1185 = e1183+e1186 && k = e1185 && 1 = e1186 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( exists ( e1185,e1186 : ( e1185 = e1183+e1186 && k = e1185 && 1 = e1186 )) and k' = e1184 && e1184 = e1183 )) and exists ( e1187,e1188 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( exists ( e1185,e1186 : ( e1185 = e1183+e1186 && k = e1185 && 1 = e1186 )) and k' = e1184 && e1184 = e1183 )) and exists ( e1187,e1188 : ( exists ( e1189,e1190 : ( e1189+e1190 = e1187 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( exists ( e1185,e1186 : ( e1185 = e1183+e1186 && k = e1185 && 1 = e1186 )) and k' = e1184 && e1184 = e1183 )) and exists ( e1187,e1188 : ( exists ( e1189,e1190 : ( e1189+e1190 = e1187 && j = e1189 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( exists ( e1185,e1186 : ( e1185 = e1183+e1186 && k = e1185 && 1 = e1186 )) and k' = e1184 && e1184 = e1183 )) and exists ( e1187,e1188 : ( exists ( e1189,e1190 : ( e1189+e1190 = e1187 && j = e1189 && 1 = e1190 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( exists ( e1185,e1186 : ( e1185 = e1183+e1186 && k = e1185 && 1 = e1186 )) and k' = e1184 && e1184 = e1183 )) and exists ( e1187,e1188 : ( exists ( e1189,e1190 : ( e1189+e1190 = e1187 && j = e1189 && 1 = e1190 )) and j' = e1188 && e1188 = e1187 )) and exists ( e1191,e1192 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( exists ( e1185,e1186 : ( e1185 = e1183+e1186 && k = e1185 && 1 = e1186 )) and k' = e1184 && e1184 = e1183 )) and exists ( e1187,e1188 : ( exists ( e1189,e1190 : ( e1189+e1190 = e1187 && j = e1189 && 1 = e1190 )) and j' = e1188 && e1188 = e1187 )) and exists ( e1191,e1192 : ( exists ( e1193,e1194 : ( e1193+e1194 = e1191 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( exists ( e1185,e1186 : ( e1185 = e1183+e1186 && k = e1185 && 1 = e1186 )) and k' = e1184 && e1184 = e1183 )) and exists ( e1187,e1188 : ( exists ( e1189,e1190 : ( e1189+e1190 = e1187 && j = e1189 && 1 = e1190 )) and j' = e1188 && e1188 = e1187 )) and exists ( e1191,e1192 : ( exists ( e1193,e1194 : ( e1193+e1194 = e1191 && i = e1193 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( exists ( e1185,e1186 : ( e1185 = e1183+e1186 && k = e1185 && 1 = e1186 )) and k' = e1184 && e1184 = e1183 )) and exists ( e1187,e1188 : ( exists ( e1189,e1190 : ( e1189+e1190 = e1187 && j = e1189 && 1 = e1190 )) and j' = e1188 && e1188 = e1187 )) and exists ( e1191,e1192 : ( exists ( e1193,e1194 : ( e1193+e1194 = e1191 && i = e1193 && 1 = e1194 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1183,e1184 : ( exists ( e1185,e1186 : ( e1185 = e1183+e1186 && k = e1185 && 1 = e1186 )) and k' = e1184 && e1184 = e1183 )) and exists ( e1187,e1188 : ( exists ( e1189,e1190 : ( e1189+e1190 = e1187 && j = e1189 && 1 = e1190 )) and j' = e1188 && e1188 = e1187 )) and exists ( e1191,e1192 : ( exists ( e1193,e1194 : ( e1193+e1194 = e1191 && i = e1193 && 1 = e1194 )) and i' = e1192 && e1192 = e1191 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 26
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( exists ( e1197,e1198 : ( e1197+e1198 = e1195 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( exists ( e1197,e1198 : ( e1197+e1198 = e1195 && k = e1197 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( exists ( e1197,e1198 : ( e1197+e1198 = e1195 && k = e1197 && 1 = e1198 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( exists ( e1197,e1198 : ( e1197+e1198 = e1195 && k = e1197 && 1 = e1198 )) and k' = e1196 && e1196 = e1195 )) and exists ( e1199,e1200 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( exists ( e1197,e1198 : ( e1197+e1198 = e1195 && k = e1197 && 1 = e1198 )) and k' = e1196 && e1196 = e1195 )) and exists ( e1199,e1200 : ( exists ( e1201,e1202 : ( e1201 = e1199+e1202 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( exists ( e1197,e1198 : ( e1197+e1198 = e1195 && k = e1197 && 1 = e1198 )) and k' = e1196 && e1196 = e1195 )) and exists ( e1199,e1200 : ( exists ( e1201,e1202 : ( e1201 = e1199+e1202 && j = e1201 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( exists ( e1197,e1198 : ( e1197+e1198 = e1195 && k = e1197 && 1 = e1198 )) and k' = e1196 && e1196 = e1195 )) and exists ( e1199,e1200 : ( exists ( e1201,e1202 : ( e1201 = e1199+e1202 && j = e1201 && 1 = e1202 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( exists ( e1197,e1198 : ( e1197+e1198 = e1195 && k = e1197 && 1 = e1198 )) and k' = e1196 && e1196 = e1195 )) and exists ( e1199,e1200 : ( exists ( e1201,e1202 : ( e1201 = e1199+e1202 && j = e1201 && 1 = e1202 )) and j' = e1200 && e1200 = e1199 )) and exists ( e1203,e1204 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( exists ( e1197,e1198 : ( e1197+e1198 = e1195 && k = e1197 && 1 = e1198 )) and k' = e1196 && e1196 = e1195 )) and exists ( e1199,e1200 : ( exists ( e1201,e1202 : ( e1201 = e1199+e1202 && j = e1201 && 1 = e1202 )) and j' = e1200 && e1200 = e1199 )) and exists ( e1203,e1204 : ( exists ( e1205,e1206 : ( e1205+e1206 = e1203 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( exists ( e1197,e1198 : ( e1197+e1198 = e1195 && k = e1197 && 1 = e1198 )) and k' = e1196 && e1196 = e1195 )) and exists ( e1199,e1200 : ( exists ( e1201,e1202 : ( e1201 = e1199+e1202 && j = e1201 && 1 = e1202 )) and j' = e1200 && e1200 = e1199 )) and exists ( e1203,e1204 : ( exists ( e1205,e1206 : ( e1205+e1206 = e1203 && i = e1205 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( exists ( e1197,e1198 : ( e1197+e1198 = e1195 && k = e1197 && 1 = e1198 )) and k' = e1196 && e1196 = e1195 )) and exists ( e1199,e1200 : ( exists ( e1201,e1202 : ( e1201 = e1199+e1202 && j = e1201 && 1 = e1202 )) and j' = e1200 && e1200 = e1199 )) and exists ( e1203,e1204 : ( exists ( e1205,e1206 : ( e1205+e1206 = e1203 && i = e1205 && 1 = e1206 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1195,e1196 : ( exists ( e1197,e1198 : ( e1197+e1198 = e1195 && k = e1197 && 1 = e1198 )) and k' = e1196 && e1196 = e1195 )) and exists ( e1199,e1200 : ( exists ( e1201,e1202 : ( e1201 = e1199+e1202 && j = e1201 && 1 = e1202 )) and j' = e1200 && e1200 = e1199 )) and exists ( e1203,e1204 : ( exists ( e1205,e1206 : ( e1205+e1206 = e1203 && i = e1205 && 1 = e1206 )) and i' = e1204 && e1204 = e1203 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 27
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( exists ( e1209,e1210 : ( e1209+e1210 = e1207 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( exists ( e1209,e1210 : ( e1209+e1210 = e1207 && k = e1209 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( exists ( e1209,e1210 : ( e1209+e1210 = e1207 && k = e1209 && 1 = e1210 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( exists ( e1209,e1210 : ( e1209+e1210 = e1207 && k = e1209 && 1 = e1210 )) and k' = e1208 && e1208 = e1207 )) and exists ( e1211,e1212 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( exists ( e1209,e1210 : ( e1209+e1210 = e1207 && k = e1209 && 1 = e1210 )) and k' = e1208 && e1208 = e1207 )) and exists ( e1211,e1212 : ( exists ( e1213,e1214 : ( e1213+e1214 = e1211 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( exists ( e1209,e1210 : ( e1209+e1210 = e1207 && k = e1209 && 1 = e1210 )) and k' = e1208 && e1208 = e1207 )) and exists ( e1211,e1212 : ( exists ( e1213,e1214 : ( e1213+e1214 = e1211 && j = e1213 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( exists ( e1209,e1210 : ( e1209+e1210 = e1207 && k = e1209 && 1 = e1210 )) and k' = e1208 && e1208 = e1207 )) and exists ( e1211,e1212 : ( exists ( e1213,e1214 : ( e1213+e1214 = e1211 && j = e1213 && 1 = e1214 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( exists ( e1209,e1210 : ( e1209+e1210 = e1207 && k = e1209 && 1 = e1210 )) and k' = e1208 && e1208 = e1207 )) and exists ( e1211,e1212 : ( exists ( e1213,e1214 : ( e1213+e1214 = e1211 && j = e1213 && 1 = e1214 )) and j' = e1212 && e1212 = e1211 )) and exists ( e1215,e1216 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( exists ( e1209,e1210 : ( e1209+e1210 = e1207 && k = e1209 && 1 = e1210 )) and k' = e1208 && e1208 = e1207 )) and exists ( e1211,e1212 : ( exists ( e1213,e1214 : ( e1213+e1214 = e1211 && j = e1213 && 1 = e1214 )) and j' = e1212 && e1212 = e1211 )) and exists ( e1215,e1216 : ( exists ( e1217,e1218 : ( e1217+e1218 = e1215 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( exists ( e1209,e1210 : ( e1209+e1210 = e1207 && k = e1209 && 1 = e1210 )) and k' = e1208 && e1208 = e1207 )) and exists ( e1211,e1212 : ( exists ( e1213,e1214 : ( e1213+e1214 = e1211 && j = e1213 && 1 = e1214 )) and j' = e1212 && e1212 = e1211 )) and exists ( e1215,e1216 : ( exists ( e1217,e1218 : ( e1217+e1218 = e1215 && i = e1217 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( exists ( e1209,e1210 : ( e1209+e1210 = e1207 && k = e1209 && 1 = e1210 )) and k' = e1208 && e1208 = e1207 )) and exists ( e1211,e1212 : ( exists ( e1213,e1214 : ( e1213+e1214 = e1211 && j = e1213 && 1 = e1214 )) and j' = e1212 && e1212 = e1211 )) and exists ( e1215,e1216 : ( exists ( e1217,e1218 : ( e1217+e1218 = e1215 && i = e1217 && 1 = e1218 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1207,e1208 : ( exists ( e1209,e1210 : ( e1209+e1210 = e1207 && k = e1209 && 1 = e1210 )) and k' = e1208 && e1208 = e1207 )) and exists ( e1211,e1212 : ( exists ( e1213,e1214 : ( e1213+e1214 = e1211 && j = e1213 && 1 = e1214 )) and j' = e1212 && e1212 = e1211 )) and exists ( e1215,e1216 : ( exists ( e1217,e1218 : ( e1217+e1218 = e1215 && i = e1217 && 1 = e1218 )) and i' = e1216 && e1216 = e1215 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0
i 1
j 1

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))
repr2   _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
repr1 == repr2
repr1->dump()
_out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))

3 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

access of size 3
WRITE  array access 0 = _out
       array access 1 = _in
       array access 2 = _out
that was the list


before mapRefstoStatements()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
after mapRefstoStatements()

i 0
sym_a = _out
irtools.cc j 0
sym_b = _out
irtools.cc ij 0 0
*sym_a == *sym_b
0 a->is_write()
0 b->is_write()

irtools.cc ij 0 0   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1219,e1220 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1219,e1220 : ( k = e1219 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1219,e1220 : ( k = e1219 && k' = e1220 && e1220 = e1219 )) and exists ( e1221,e1222 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1219,e1220 : ( k = e1219 && k' = e1220 && e1220 = e1219 )) and exists ( e1221,e1222 : ( j = e1221 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1219,e1220 : ( k = e1219 && k' = e1220 && e1220 = e1219 )) and exists ( e1221,e1222 : ( j = e1221 && j' = e1222 && e1222 = e1221 )) and exists ( e1223,e1224 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1219,e1220 : ( k = e1219 && k' = e1220 && e1220 = e1219 )) and exists ( e1221,e1222 : ( j = e1221 && j' = e1222 && e1222 = e1221 )) and exists ( e1223,e1224 : ( i = e1223 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1219,e1220 : ( k = e1219 && k' = e1220 && e1220 = e1219 )) and exists ( e1221,e1222 : ( j = e1221 && j' = e1222 && e1222 = e1221 )) and exists ( e1223,e1224 : ( i = e1223 && i' = e1224 && e1224 = e1223 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1219,e1220 : ( k = e1219 && k' = e1220 && e1220 = e1219 )) and exists ( e1221,e1222 : ( j = e1221 && j' = e1222 && e1222 = e1221 )) and exists ( e1223,e1224 : ( i = e1223 && i' = e1224 && e1224 = e1223 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
1
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
leaving relation2dependences, 0 and 0 dependences

irtools.cc ij 0 0 dv.first 0   dv.second 0
234irtools.cc j 1
sym_b = _in
irtools.cc ij 0 1
*sym_a NOT == *sym_b
0 a->is_write()
1 b->is_NOT_write()
irtools.cc j 2
sym_b = _out
irtools.cc ij 0 2
*sym_a == *sym_b
0 a->is_write()
2 b->is_NOT_write()

irtools.cc ij 0 2   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1225,e1226 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1225,e1226 : ( k = e1225 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1225,e1226 : ( k = e1225 && k' = e1226 && e1226 = e1225 )) and exists ( e1227,e1228 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1225,e1226 : ( k = e1225 && k' = e1226 && e1226 = e1225 )) and exists ( e1227,e1228 : ( j = e1227 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1225,e1226 : ( k = e1225 && k' = e1226 && e1226 = e1225 )) and exists ( e1227,e1228 : ( j = e1227 && j' = e1228 && e1228 = e1227 )) and exists ( e1229,e1230 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1225,e1226 : ( k = e1225 && k' = e1226 && e1226 = e1225 )) and exists ( e1227,e1228 : ( j = e1227 && j' = e1228 && e1228 = e1227 )) and exists ( e1229,e1230 : ( i = e1229 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1225,e1226 : ( k = e1225 && k' = e1226 && e1226 = e1225 )) and exists ( e1227,e1228 : ( j = e1227 && j' = e1228 && e1228 = e1227 )) and exists ( e1229,e1230 : ( i = e1229 && i' = e1230 && e1230 = e1229 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1225,e1226 : ( k = e1225 && k' = e1226 && e1226 = e1225 )) and exists ( e1227,e1228 : ( j = e1227 && j' = e1228 && e1228 = e1227 )) and exists ( e1229,e1230 : ( i = e1229 && i' = e1230 && e1230 = e1229 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
1
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _out  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _out

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _out
symbol _out  HAS A left  DEPENDENCE OF TYPE DEP_W2R

irtools.cc ij 0 2 dv.first 1   dv.second 0
234i 1
sym_a = _in
irtools.cc j 1
sym_b = _in
irtools.cc ij 1 1
*sym_a == *sym_b
1 a->is_NOT_write()
1 b->is_NOT_write()
irtools.cc j 2
sym_b = _out
irtools.cc ij 1 2
*sym_a NOT == *sym_b
1 a->is_NOT_write()
2 b->is_NOT_write()
i 2
sym_a = _out
irtools.cc j 2
sym_b = _out
irtools.cc ij 2 2
*sym_a == *sym_b
2 a->is_NOT_write()
2 b->is_NOT_write()
LEAVING test_data_dependences()  first size 2    second size 0

dv.first.size() 2
k1 0
k1 1
j 2

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))
repr2   _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))

3 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))

5 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _lambda is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_lambda' write 0

ref[3] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[4] _rhs is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_rhs' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1231,e1232 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1231,e1232 : ( k = e1231 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1231,e1232 : ( k = e1231 && k' = e1232 && e1232 = e1231 )) and exists ( e1233,e1234 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1231,e1232 : ( k = e1231 && k' = e1232 && e1232 = e1231 )) and exists ( e1233,e1234 : ( j = e1233 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1231,e1232 : ( k = e1231 && k' = e1232 && e1232 = e1231 )) and exists ( e1233,e1234 : ( j = e1233 && j' = e1234 && e1234 = e1233 )) and exists ( e1235,e1236 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1231,e1232 : ( k = e1231 && k' = e1232 && e1232 = e1231 )) and exists ( e1233,e1234 : ( j = e1233 && j' = e1234 && e1234 = e1233 )) and exists ( e1235,e1236 : ( i = e1235 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1231,e1232 : ( k = e1231 && k' = e1232 && e1232 = e1231 )) and exists ( e1233,e1234 : ( j = e1233 && j' = e1234 && e1234 = e1233 )) and exists ( e1235,e1236 : ( i = e1235 && i' = e1236 && e1236 = e1235 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _out  ADDING A DEPENDENCE OF TYPE DEP_W2W to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _out

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _out
symbol _out  HAS A left  DEPENDENCE OF TYPE DEP_W2W
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1237,e1238 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1237,e1238 : ( k = e1237 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1237,e1238 : ( k = e1237 && k' = e1238 && e1238 = e1237 )) and exists ( e1239,e1240 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1237,e1238 : ( k = e1237 && k' = e1238 && e1238 = e1237 )) and exists ( e1239,e1240 : ( j = e1239 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1237,e1238 : ( k = e1237 && k' = e1238 && e1238 = e1237 )) and exists ( e1239,e1240 : ( j = e1239 && j' = e1240 && e1240 = e1239 )) and exists ( e1241,e1242 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1237,e1238 : ( k = e1237 && k' = e1238 && e1238 = e1237 )) and exists ( e1239,e1240 : ( j = e1239 && j' = e1240 && e1240 = e1239 )) and exists ( e1241,e1242 : ( i = e1241 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1237,e1238 : ( k = e1237 && k' = e1238 && e1238 = e1237 )) and exists ( e1239,e1240 : ( j = e1239 && j' = e1240 && e1240 = e1239 )) and exists ( e1241,e1242 : ( i = e1241 && i' = e1242 && e1242 = e1241 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _out  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _out

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _out
symbol _out  HAS A left  DEPENDENCE OF TYPE DEP_W2R
i 1
i 2
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1243,e1244 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1243,e1244 : ( k = e1243 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1243,e1244 : ( k = e1243 && k' = e1244 && e1244 = e1243 )) and exists ( e1245,e1246 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1243,e1244 : ( k = e1243 && k' = e1244 && e1244 = e1243 )) and exists ( e1245,e1246 : ( j = e1245 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1243,e1244 : ( k = e1243 && k' = e1244 && e1244 = e1243 )) and exists ( e1245,e1246 : ( j = e1245 && j' = e1246 && e1246 = e1245 )) and exists ( e1247,e1248 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1243,e1244 : ( k = e1243 && k' = e1244 && e1244 = e1243 )) and exists ( e1245,e1246 : ( j = e1245 && j' = e1246 && e1246 = e1245 )) and exists ( e1247,e1248 : ( i = e1247 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1243,e1244 : ( k = e1243 && k' = e1244 && e1244 = e1243 )) and exists ( e1245,e1246 : ( j = e1245 && j' = e1246 && e1246 = e1245 )) and exists ( e1247,e1248 : ( i = e1247 && i' = e1248 && e1248 = e1247 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _out  ADDING A DEPENDENCE OF TYPE DEP_R2W to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _out

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _out
symbol _out  HAS A left  DEPENDENCE OF TYPE DEP_R2W
LEAVING test_data_dependences()  first size 3    second size 0

dv.first.size() 3
k1 0
k1 1
k1 2
j 3

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))
repr2   _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))

3 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))

28 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[3] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[4] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[5] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[6] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[7] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[8] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[9] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[10] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[11] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[12] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[13] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[14] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[15] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[16] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[17] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[18] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[19] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[20] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[21] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[22] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[23] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[24] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[25] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[26] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[27] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1249,e1250 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1249,e1250 : ( k = e1249 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1249,e1250 : ( k = e1249 && k' = e1250 && e1250 = e1249 )) and exists ( e1251,e1252 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1249,e1250 : ( k = e1249 && k' = e1250 && e1250 = e1249 )) and exists ( e1251,e1252 : ( j = e1251 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1249,e1250 : ( k = e1249 && k' = e1250 && e1250 = e1249 )) and exists ( e1251,e1252 : ( j = e1251 && j' = e1252 && e1252 = e1251 )) and exists ( e1253,e1254 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1249,e1250 : ( k = e1249 && k' = e1250 && e1250 = e1249 )) and exists ( e1251,e1252 : ( j = e1251 && j' = e1252 && e1252 = e1251 )) and exists ( e1253,e1254 : ( i = e1253 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1249,e1250 : ( k = e1249 && k' = e1250 && e1250 = e1249 )) and exists ( e1251,e1252 : ( j = e1251 && j' = e1252 && e1252 = e1251 )) and exists ( e1253,e1254 : ( i = e1253 && i' = e1254 && e1254 = e1253 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1255,e1256 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1255,e1256 : ( k = e1255 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1255,e1256 : ( k = e1255 and exists ( e1257,e1258 : ( e1257 = e1256+e1258 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1255,e1256 : ( k = e1255 and exists ( e1257,e1258 : ( e1257 = e1256+e1258 && k' = e1257 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1255,e1256 : ( k = e1255 && e1256 = e1255 and exists ( e1257,e1258 : ( e1257 = e1256+e1258 && k' = e1257 && 1 = e1258 )) )) and exists ( e1259,e1260 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1255,e1256 : ( k = e1255 && e1256 = e1255 and exists ( e1257,e1258 : ( e1257 = e1256+e1258 && k' = e1257 && 1 = e1258 )) )) and exists ( e1259,e1260 : ( j = e1259 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1255,e1256 : ( k = e1255 && e1256 = e1255 and exists ( e1257,e1258 : ( e1257 = e1256+e1258 && k' = e1257 && 1 = e1258 )) )) and exists ( e1259,e1260 : ( j = e1259 && j' = e1260 && e1260 = e1259 )) and exists ( e1261,e1262 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1255,e1256 : ( k = e1255 && e1256 = e1255 and exists ( e1257,e1258 : ( e1257 = e1256+e1258 && k' = e1257 && 1 = e1258 )) )) and exists ( e1259,e1260 : ( j = e1259 && j' = e1260 && e1260 = e1259 )) and exists ( e1261,e1262 : ( i = e1261 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1255,e1256 : ( k = e1255 && e1256 = e1255 and exists ( e1257,e1258 : ( e1257 = e1256+e1258 && k' = e1257 && 1 = e1258 )) )) and exists ( e1259,e1260 : ( j = e1259 && j' = e1260 && e1260 = e1259 )) and exists ( e1261,e1262 : ( i = e1261 && i' = e1262 && e1262 = e1261 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1263,e1264 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1263,e1264 : ( k = e1263 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1263,e1264 : ( k = e1263 && k' = e1264 && e1264 = e1263 )) and exists ( e1265,e1266 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1263,e1264 : ( k = e1263 && k' = e1264 && e1264 = e1263 )) and exists ( e1265,e1266 : ( j = e1265 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1263,e1264 : ( k = e1263 && k' = e1264 && e1264 = e1263 )) and exists ( e1265,e1266 : ( j = e1265 and exists ( e1267,e1268 : ( e1267 = e1266+e1268 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1263,e1264 : ( k = e1263 && k' = e1264 && e1264 = e1263 )) and exists ( e1265,e1266 : ( j = e1265 and exists ( e1267,e1268 : ( e1267 = e1266+e1268 && j' = e1267 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1263,e1264 : ( k = e1263 && k' = e1264 && e1264 = e1263 )) and exists ( e1265,e1266 : ( j = e1265 && e1266 = e1265 and exists ( e1267,e1268 : ( e1267 = e1266+e1268 && j' = e1267 && 1 = e1268 )) )) and exists ( e1269,e1270 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1263,e1264 : ( k = e1263 && k' = e1264 && e1264 = e1263 )) and exists ( e1265,e1266 : ( j = e1265 && e1266 = e1265 and exists ( e1267,e1268 : ( e1267 = e1266+e1268 && j' = e1267 && 1 = e1268 )) )) and exists ( e1269,e1270 : ( i = e1269 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1263,e1264 : ( k = e1263 && k' = e1264 && e1264 = e1263 )) and exists ( e1265,e1266 : ( j = e1265 && e1266 = e1265 and exists ( e1267,e1268 : ( e1267 = e1266+e1268 && j' = e1267 && 1 = e1268 )) )) and exists ( e1269,e1270 : ( i = e1269 && i' = e1270 && e1270 = e1269 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1271,e1272 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1271,e1272 : ( k = e1271 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1271,e1272 : ( k = e1271 && k' = e1272 && e1272 = e1271 )) and exists ( e1273,e1274 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1271,e1272 : ( k = e1271 && k' = e1272 && e1272 = e1271 )) and exists ( e1273,e1274 : ( j = e1273 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1271,e1272 : ( k = e1271 && k' = e1272 && e1272 = e1271 )) and exists ( e1273,e1274 : ( j = e1273 and exists ( e1275,e1276 : ( e1275+e1276 = e1274 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1271,e1272 : ( k = e1271 && k' = e1272 && e1272 = e1271 )) and exists ( e1273,e1274 : ( j = e1273 and exists ( e1275,e1276 : ( e1275+e1276 = e1274 && j' = e1275 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1271,e1272 : ( k = e1271 && k' = e1272 && e1272 = e1271 )) and exists ( e1273,e1274 : ( j = e1273 && e1274 = e1273 and exists ( e1275,e1276 : ( e1275+e1276 = e1274 && j' = e1275 && 1 = e1276 )) )) and exists ( e1277,e1278 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1271,e1272 : ( k = e1271 && k' = e1272 && e1272 = e1271 )) and exists ( e1273,e1274 : ( j = e1273 && e1274 = e1273 and exists ( e1275,e1276 : ( e1275+e1276 = e1274 && j' = e1275 && 1 = e1276 )) )) and exists ( e1277,e1278 : ( i = e1277 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1271,e1272 : ( k = e1271 && k' = e1272 && e1272 = e1271 )) and exists ( e1273,e1274 : ( j = e1273 && e1274 = e1273 and exists ( e1275,e1276 : ( e1275+e1276 = e1274 && j' = e1275 && 1 = e1276 )) )) and exists ( e1277,e1278 : ( i = e1277 && i' = e1278 && e1278 = e1277 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1279,e1280 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1279,e1280 : ( k = e1279 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1279,e1280 : ( k = e1279 and exists ( e1281,e1282 : ( e1281+e1282 = e1280 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1279,e1280 : ( k = e1279 and exists ( e1281,e1282 : ( e1281+e1282 = e1280 && k' = e1281 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1279,e1280 : ( k = e1279 && e1280 = e1279 and exists ( e1281,e1282 : ( e1281+e1282 = e1280 && k' = e1281 && 1 = e1282 )) )) and exists ( e1283,e1284 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1279,e1280 : ( k = e1279 && e1280 = e1279 and exists ( e1281,e1282 : ( e1281+e1282 = e1280 && k' = e1281 && 1 = e1282 )) )) and exists ( e1283,e1284 : ( j = e1283 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1279,e1280 : ( k = e1279 && e1280 = e1279 and exists ( e1281,e1282 : ( e1281+e1282 = e1280 && k' = e1281 && 1 = e1282 )) )) and exists ( e1283,e1284 : ( j = e1283 && j' = e1284 && e1284 = e1283 )) and exists ( e1285,e1286 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1279,e1280 : ( k = e1279 && e1280 = e1279 and exists ( e1281,e1282 : ( e1281+e1282 = e1280 && k' = e1281 && 1 = e1282 )) )) and exists ( e1283,e1284 : ( j = e1283 && j' = e1284 && e1284 = e1283 )) and exists ( e1285,e1286 : ( i = e1285 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1279,e1280 : ( k = e1279 && e1280 = e1279 and exists ( e1281,e1282 : ( e1281+e1282 = e1280 && k' = e1281 && 1 = e1282 )) )) and exists ( e1283,e1284 : ( j = e1283 && j' = e1284 && e1284 = e1283 )) and exists ( e1285,e1286 : ( i = e1285 && i' = e1286 && e1286 = e1285 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1287,e1288 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1287,e1288 : ( k = e1287 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1287,e1288 : ( k = e1287 && k' = e1288 && e1288 = e1287 )) and exists ( e1289,e1290 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1287,e1288 : ( k = e1287 && k' = e1288 && e1288 = e1287 )) and exists ( e1289,e1290 : ( j = e1289 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1287,e1288 : ( k = e1287 && k' = e1288 && e1288 = e1287 )) and exists ( e1289,e1290 : ( j = e1289 && j' = e1290 && e1290 = e1289 )) and exists ( e1291,e1292 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1287,e1288 : ( k = e1287 && k' = e1288 && e1288 = e1287 )) and exists ( e1289,e1290 : ( j = e1289 && j' = e1290 && e1290 = e1289 )) and exists ( e1291,e1292 : ( i = e1291 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1287,e1288 : ( k = e1287 && k' = e1288 && e1288 = e1287 )) and exists ( e1289,e1290 : ( j = e1289 && j' = e1290 && e1290 = e1289 )) and exists ( e1291,e1292 : ( i = e1291 and exists ( e1293,e1294 : ( e1293 = e1292+e1294 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1287,e1288 : ( k = e1287 && k' = e1288 && e1288 = e1287 )) and exists ( e1289,e1290 : ( j = e1289 && j' = e1290 && e1290 = e1289 )) and exists ( e1291,e1292 : ( i = e1291 and exists ( e1293,e1294 : ( e1293 = e1292+e1294 && i' = e1293 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1287,e1288 : ( k = e1287 && k' = e1288 && e1288 = e1287 )) and exists ( e1289,e1290 : ( j = e1289 && j' = e1290 && e1290 = e1289 )) and exists ( e1291,e1292 : ( i = e1291 && e1292 = e1291 and exists ( e1293,e1294 : ( e1293 = e1292+e1294 && i' = e1293 && 1 = e1294 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1295,e1296 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1295,e1296 : ( k = e1295 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1295,e1296 : ( k = e1295 && k' = e1296 && e1296 = e1295 )) and exists ( e1297,e1298 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1295,e1296 : ( k = e1295 && k' = e1296 && e1296 = e1295 )) and exists ( e1297,e1298 : ( j = e1297 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1295,e1296 : ( k = e1295 && k' = e1296 && e1296 = e1295 )) and exists ( e1297,e1298 : ( j = e1297 && j' = e1298 && e1298 = e1297 )) and exists ( e1299,e1300 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1295,e1296 : ( k = e1295 && k' = e1296 && e1296 = e1295 )) and exists ( e1297,e1298 : ( j = e1297 && j' = e1298 && e1298 = e1297 )) and exists ( e1299,e1300 : ( i = e1299 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1295,e1296 : ( k = e1295 && k' = e1296 && e1296 = e1295 )) and exists ( e1297,e1298 : ( j = e1297 && j' = e1298 && e1298 = e1297 )) and exists ( e1299,e1300 : ( i = e1299 and exists ( e1301,e1302 : ( e1301+e1302 = e1300 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1295,e1296 : ( k = e1295 && k' = e1296 && e1296 = e1295 )) and exists ( e1297,e1298 : ( j = e1297 && j' = e1298 && e1298 = e1297 )) and exists ( e1299,e1300 : ( i = e1299 and exists ( e1301,e1302 : ( e1301+e1302 = e1300 && i' = e1301 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1295,e1296 : ( k = e1295 && k' = e1296 && e1296 = e1295 )) and exists ( e1297,e1298 : ( j = e1297 && j' = e1298 && e1298 = e1297 )) and exists ( e1299,e1300 : ( i = e1299 && e1300 = e1299 and exists ( e1301,e1302 : ( e1301+e1302 = e1300 && i' = e1301 && 1 = e1302 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1303,e1304 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1303,e1304 : ( k = e1303 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1303,e1304 : ( k = e1303 and exists ( e1305,e1306 : ( e1305 = e1304+e1306 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1303,e1304 : ( k = e1303 and exists ( e1305,e1306 : ( e1305 = e1304+e1306 && k' = e1305 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1303,e1304 : ( k = e1303 && e1304 = e1303 and exists ( e1305,e1306 : ( e1305 = e1304+e1306 && k' = e1305 && 1 = e1306 )) )) and exists ( e1307,e1308 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1303,e1304 : ( k = e1303 && e1304 = e1303 and exists ( e1305,e1306 : ( e1305 = e1304+e1306 && k' = e1305 && 1 = e1306 )) )) and exists ( e1307,e1308 : ( j = e1307 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1303,e1304 : ( k = e1303 && e1304 = e1303 and exists ( e1305,e1306 : ( e1305 = e1304+e1306 && k' = e1305 && 1 = e1306 )) )) and exists ( e1307,e1308 : ( j = e1307 && j' = e1308 && e1308 = e1307 )) and exists ( e1309,e1310 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1303,e1304 : ( k = e1303 && e1304 = e1303 and exists ( e1305,e1306 : ( e1305 = e1304+e1306 && k' = e1305 && 1 = e1306 )) )) and exists ( e1307,e1308 : ( j = e1307 && j' = e1308 && e1308 = e1307 )) and exists ( e1309,e1310 : ( i = e1309 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1303,e1304 : ( k = e1303 && e1304 = e1303 and exists ( e1305,e1306 : ( e1305 = e1304+e1306 && k' = e1305 && 1 = e1306 )) )) and exists ( e1307,e1308 : ( j = e1307 && j' = e1308 && e1308 = e1307 )) and exists ( e1309,e1310 : ( i = e1309 and exists ( e1311,e1312 : ( e1311 = e1310+e1312 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1303,e1304 : ( k = e1303 && e1304 = e1303 and exists ( e1305,e1306 : ( e1305 = e1304+e1306 && k' = e1305 && 1 = e1306 )) )) and exists ( e1307,e1308 : ( j = e1307 && j' = e1308 && e1308 = e1307 )) and exists ( e1309,e1310 : ( i = e1309 and exists ( e1311,e1312 : ( e1311 = e1310+e1312 && i' = e1311 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1303,e1304 : ( k = e1303 && e1304 = e1303 and exists ( e1305,e1306 : ( e1305 = e1304+e1306 && k' = e1305 && 1 = e1306 )) )) and exists ( e1307,e1308 : ( j = e1307 && j' = e1308 && e1308 = e1307 )) and exists ( e1309,e1310 : ( i = e1309 && e1310 = e1309 and exists ( e1311,e1312 : ( e1311 = e1310+e1312 && i' = e1311 && 1 = e1312 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1313,e1314 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1313,e1314 : ( k = e1313 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1313,e1314 : ( k = e1313 && k' = e1314 && e1314 = e1313 )) and exists ( e1315,e1316 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1313,e1314 : ( k = e1313 && k' = e1314 && e1314 = e1313 )) and exists ( e1315,e1316 : ( j = e1315 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1313,e1314 : ( k = e1313 && k' = e1314 && e1314 = e1313 )) and exists ( e1315,e1316 : ( j = e1315 and exists ( e1317,e1318 : ( e1317 = e1316+e1318 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1313,e1314 : ( k = e1313 && k' = e1314 && e1314 = e1313 )) and exists ( e1315,e1316 : ( j = e1315 and exists ( e1317,e1318 : ( e1317 = e1316+e1318 && j' = e1317 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1313,e1314 : ( k = e1313 && k' = e1314 && e1314 = e1313 )) and exists ( e1315,e1316 : ( j = e1315 && e1316 = e1315 and exists ( e1317,e1318 : ( e1317 = e1316+e1318 && j' = e1317 && 1 = e1318 )) )) and exists ( e1319,e1320 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1313,e1314 : ( k = e1313 && k' = e1314 && e1314 = e1313 )) and exists ( e1315,e1316 : ( j = e1315 && e1316 = e1315 and exists ( e1317,e1318 : ( e1317 = e1316+e1318 && j' = e1317 && 1 = e1318 )) )) and exists ( e1319,e1320 : ( i = e1319 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1313,e1314 : ( k = e1313 && k' = e1314 && e1314 = e1313 )) and exists ( e1315,e1316 : ( j = e1315 && e1316 = e1315 and exists ( e1317,e1318 : ( e1317 = e1316+e1318 && j' = e1317 && 1 = e1318 )) )) and exists ( e1319,e1320 : ( i = e1319 and exists ( e1321,e1322 : ( e1321 = e1320+e1322 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1313,e1314 : ( k = e1313 && k' = e1314 && e1314 = e1313 )) and exists ( e1315,e1316 : ( j = e1315 && e1316 = e1315 and exists ( e1317,e1318 : ( e1317 = e1316+e1318 && j' = e1317 && 1 = e1318 )) )) and exists ( e1319,e1320 : ( i = e1319 and exists ( e1321,e1322 : ( e1321 = e1320+e1322 && i' = e1321 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1313,e1314 : ( k = e1313 && k' = e1314 && e1314 = e1313 )) and exists ( e1315,e1316 : ( j = e1315 && e1316 = e1315 and exists ( e1317,e1318 : ( e1317 = e1316+e1318 && j' = e1317 && 1 = e1318 )) )) and exists ( e1319,e1320 : ( i = e1319 && e1320 = e1319 and exists ( e1321,e1322 : ( e1321 = e1320+e1322 && i' = e1321 && 1 = e1322 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1323,e1324 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1323,e1324 : ( k = e1323 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1323,e1324 : ( k = e1323 && k' = e1324 && e1324 = e1323 )) and exists ( e1325,e1326 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1323,e1324 : ( k = e1323 && k' = e1324 && e1324 = e1323 )) and exists ( e1325,e1326 : ( j = e1325 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1323,e1324 : ( k = e1323 && k' = e1324 && e1324 = e1323 )) and exists ( e1325,e1326 : ( j = e1325 and exists ( e1327,e1328 : ( e1327+e1328 = e1326 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1323,e1324 : ( k = e1323 && k' = e1324 && e1324 = e1323 )) and exists ( e1325,e1326 : ( j = e1325 and exists ( e1327,e1328 : ( e1327+e1328 = e1326 && j' = e1327 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1323,e1324 : ( k = e1323 && k' = e1324 && e1324 = e1323 )) and exists ( e1325,e1326 : ( j = e1325 && e1326 = e1325 and exists ( e1327,e1328 : ( e1327+e1328 = e1326 && j' = e1327 && 1 = e1328 )) )) and exists ( e1329,e1330 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1323,e1324 : ( k = e1323 && k' = e1324 && e1324 = e1323 )) and exists ( e1325,e1326 : ( j = e1325 && e1326 = e1325 and exists ( e1327,e1328 : ( e1327+e1328 = e1326 && j' = e1327 && 1 = e1328 )) )) and exists ( e1329,e1330 : ( i = e1329 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1323,e1324 : ( k = e1323 && k' = e1324 && e1324 = e1323 )) and exists ( e1325,e1326 : ( j = e1325 && e1326 = e1325 and exists ( e1327,e1328 : ( e1327+e1328 = e1326 && j' = e1327 && 1 = e1328 )) )) and exists ( e1329,e1330 : ( i = e1329 and exists ( e1331,e1332 : ( e1331 = e1330+e1332 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1323,e1324 : ( k = e1323 && k' = e1324 && e1324 = e1323 )) and exists ( e1325,e1326 : ( j = e1325 && e1326 = e1325 and exists ( e1327,e1328 : ( e1327+e1328 = e1326 && j' = e1327 && 1 = e1328 )) )) and exists ( e1329,e1330 : ( i = e1329 and exists ( e1331,e1332 : ( e1331 = e1330+e1332 && i' = e1331 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1323,e1324 : ( k = e1323 && k' = e1324 && e1324 = e1323 )) and exists ( e1325,e1326 : ( j = e1325 && e1326 = e1325 and exists ( e1327,e1328 : ( e1327+e1328 = e1326 && j' = e1327 && 1 = e1328 )) )) and exists ( e1329,e1330 : ( i = e1329 && e1330 = e1329 and exists ( e1331,e1332 : ( e1331 = e1330+e1332 && i' = e1331 && 1 = e1332 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1333,e1334 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1333,e1334 : ( k = e1333 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1333,e1334 : ( k = e1333 and exists ( e1335,e1336 : ( e1335+e1336 = e1334 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1333,e1334 : ( k = e1333 and exists ( e1335,e1336 : ( e1335+e1336 = e1334 && k' = e1335 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1333,e1334 : ( k = e1333 && e1334 = e1333 and exists ( e1335,e1336 : ( e1335+e1336 = e1334 && k' = e1335 && 1 = e1336 )) )) and exists ( e1337,e1338 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1333,e1334 : ( k = e1333 && e1334 = e1333 and exists ( e1335,e1336 : ( e1335+e1336 = e1334 && k' = e1335 && 1 = e1336 )) )) and exists ( e1337,e1338 : ( j = e1337 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1333,e1334 : ( k = e1333 && e1334 = e1333 and exists ( e1335,e1336 : ( e1335+e1336 = e1334 && k' = e1335 && 1 = e1336 )) )) and exists ( e1337,e1338 : ( j = e1337 && j' = e1338 && e1338 = e1337 )) and exists ( e1339,e1340 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1333,e1334 : ( k = e1333 && e1334 = e1333 and exists ( e1335,e1336 : ( e1335+e1336 = e1334 && k' = e1335 && 1 = e1336 )) )) and exists ( e1337,e1338 : ( j = e1337 && j' = e1338 && e1338 = e1337 )) and exists ( e1339,e1340 : ( i = e1339 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1333,e1334 : ( k = e1333 && e1334 = e1333 and exists ( e1335,e1336 : ( e1335+e1336 = e1334 && k' = e1335 && 1 = e1336 )) )) and exists ( e1337,e1338 : ( j = e1337 && j' = e1338 && e1338 = e1337 )) and exists ( e1339,e1340 : ( i = e1339 and exists ( e1341,e1342 : ( e1341 = e1340+e1342 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1333,e1334 : ( k = e1333 && e1334 = e1333 and exists ( e1335,e1336 : ( e1335+e1336 = e1334 && k' = e1335 && 1 = e1336 )) )) and exists ( e1337,e1338 : ( j = e1337 && j' = e1338 && e1338 = e1337 )) and exists ( e1339,e1340 : ( i = e1339 and exists ( e1341,e1342 : ( e1341 = e1340+e1342 && i' = e1341 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1333,e1334 : ( k = e1333 && e1334 = e1333 and exists ( e1335,e1336 : ( e1335+e1336 = e1334 && k' = e1335 && 1 = e1336 )) )) and exists ( e1337,e1338 : ( j = e1337 && j' = e1338 && e1338 = e1337 )) and exists ( e1339,e1340 : ( i = e1339 && e1340 = e1339 and exists ( e1341,e1342 : ( e1341 = e1340+e1342 && i' = e1341 && 1 = e1342 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1343,e1344 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1343,e1344 : ( k = e1343 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1343,e1344 : ( k = e1343 and exists ( e1345,e1346 : ( e1345 = e1344+e1346 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1343,e1344 : ( k = e1343 and exists ( e1345,e1346 : ( e1345 = e1344+e1346 && k' = e1345 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1343,e1344 : ( k = e1343 && e1344 = e1343 and exists ( e1345,e1346 : ( e1345 = e1344+e1346 && k' = e1345 && 1 = e1346 )) )) and exists ( e1347,e1348 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1343,e1344 : ( k = e1343 && e1344 = e1343 and exists ( e1345,e1346 : ( e1345 = e1344+e1346 && k' = e1345 && 1 = e1346 )) )) and exists ( e1347,e1348 : ( j = e1347 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1343,e1344 : ( k = e1343 && e1344 = e1343 and exists ( e1345,e1346 : ( e1345 = e1344+e1346 && k' = e1345 && 1 = e1346 )) )) and exists ( e1347,e1348 : ( j = e1347 and exists ( e1349,e1350 : ( e1349 = e1348+e1350 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1343,e1344 : ( k = e1343 && e1344 = e1343 and exists ( e1345,e1346 : ( e1345 = e1344+e1346 && k' = e1345 && 1 = e1346 )) )) and exists ( e1347,e1348 : ( j = e1347 and exists ( e1349,e1350 : ( e1349 = e1348+e1350 && j' = e1349 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1343,e1344 : ( k = e1343 && e1344 = e1343 and exists ( e1345,e1346 : ( e1345 = e1344+e1346 && k' = e1345 && 1 = e1346 )) )) and exists ( e1347,e1348 : ( j = e1347 && e1348 = e1347 and exists ( e1349,e1350 : ( e1349 = e1348+e1350 && j' = e1349 && 1 = e1350 )) )) and exists ( e1351,e1352 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1343,e1344 : ( k = e1343 && e1344 = e1343 and exists ( e1345,e1346 : ( e1345 = e1344+e1346 && k' = e1345 && 1 = e1346 )) )) and exists ( e1347,e1348 : ( j = e1347 && e1348 = e1347 and exists ( e1349,e1350 : ( e1349 = e1348+e1350 && j' = e1349 && 1 = e1350 )) )) and exists ( e1351,e1352 : ( i = e1351 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1343,e1344 : ( k = e1343 && e1344 = e1343 and exists ( e1345,e1346 : ( e1345 = e1344+e1346 && k' = e1345 && 1 = e1346 )) )) and exists ( e1347,e1348 : ( j = e1347 && e1348 = e1347 and exists ( e1349,e1350 : ( e1349 = e1348+e1350 && j' = e1349 && 1 = e1350 )) )) and exists ( e1351,e1352 : ( i = e1351 && i' = e1352 && e1352 = e1351 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1353,e1354 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1353,e1354 : ( k = e1353 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1353,e1354 : ( k = e1353 and exists ( e1355,e1356 : ( e1355 = e1354+e1356 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1353,e1354 : ( k = e1353 and exists ( e1355,e1356 : ( e1355 = e1354+e1356 && k' = e1355 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1353,e1354 : ( k = e1353 && e1354 = e1353 and exists ( e1355,e1356 : ( e1355 = e1354+e1356 && k' = e1355 && 1 = e1356 )) )) and exists ( e1357,e1358 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1353,e1354 : ( k = e1353 && e1354 = e1353 and exists ( e1355,e1356 : ( e1355 = e1354+e1356 && k' = e1355 && 1 = e1356 )) )) and exists ( e1357,e1358 : ( j = e1357 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1353,e1354 : ( k = e1353 && e1354 = e1353 and exists ( e1355,e1356 : ( e1355 = e1354+e1356 && k' = e1355 && 1 = e1356 )) )) and exists ( e1357,e1358 : ( j = e1357 and exists ( e1359,e1360 : ( e1359+e1360 = e1358 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1353,e1354 : ( k = e1353 && e1354 = e1353 and exists ( e1355,e1356 : ( e1355 = e1354+e1356 && k' = e1355 && 1 = e1356 )) )) and exists ( e1357,e1358 : ( j = e1357 and exists ( e1359,e1360 : ( e1359+e1360 = e1358 && j' = e1359 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1353,e1354 : ( k = e1353 && e1354 = e1353 and exists ( e1355,e1356 : ( e1355 = e1354+e1356 && k' = e1355 && 1 = e1356 )) )) and exists ( e1357,e1358 : ( j = e1357 && e1358 = e1357 and exists ( e1359,e1360 : ( e1359+e1360 = e1358 && j' = e1359 && 1 = e1360 )) )) and exists ( e1361,e1362 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1353,e1354 : ( k = e1353 && e1354 = e1353 and exists ( e1355,e1356 : ( e1355 = e1354+e1356 && k' = e1355 && 1 = e1356 )) )) and exists ( e1357,e1358 : ( j = e1357 && e1358 = e1357 and exists ( e1359,e1360 : ( e1359+e1360 = e1358 && j' = e1359 && 1 = e1360 )) )) and exists ( e1361,e1362 : ( i = e1361 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1353,e1354 : ( k = e1353 && e1354 = e1353 and exists ( e1355,e1356 : ( e1355 = e1354+e1356 && k' = e1355 && 1 = e1356 )) )) and exists ( e1357,e1358 : ( j = e1357 && e1358 = e1357 and exists ( e1359,e1360 : ( e1359+e1360 = e1358 && j' = e1359 && 1 = e1360 )) )) and exists ( e1361,e1362 : ( i = e1361 && i' = e1362 && e1362 = e1361 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1363,e1364 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1363,e1364 : ( k = e1363 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1363,e1364 : ( k = e1363 and exists ( e1365,e1366 : ( e1365+e1366 = e1364 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1363,e1364 : ( k = e1363 and exists ( e1365,e1366 : ( e1365+e1366 = e1364 && k' = e1365 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1363,e1364 : ( k = e1363 && e1364 = e1363 and exists ( e1365,e1366 : ( e1365+e1366 = e1364 && k' = e1365 && 1 = e1366 )) )) and exists ( e1367,e1368 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1363,e1364 : ( k = e1363 && e1364 = e1363 and exists ( e1365,e1366 : ( e1365+e1366 = e1364 && k' = e1365 && 1 = e1366 )) )) and exists ( e1367,e1368 : ( j = e1367 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1363,e1364 : ( k = e1363 && e1364 = e1363 and exists ( e1365,e1366 : ( e1365+e1366 = e1364 && k' = e1365 && 1 = e1366 )) )) and exists ( e1367,e1368 : ( j = e1367 and exists ( e1369,e1370 : ( e1369 = e1368+e1370 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1363,e1364 : ( k = e1363 && e1364 = e1363 and exists ( e1365,e1366 : ( e1365+e1366 = e1364 && k' = e1365 && 1 = e1366 )) )) and exists ( e1367,e1368 : ( j = e1367 and exists ( e1369,e1370 : ( e1369 = e1368+e1370 && j' = e1369 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1363,e1364 : ( k = e1363 && e1364 = e1363 and exists ( e1365,e1366 : ( e1365+e1366 = e1364 && k' = e1365 && 1 = e1366 )) )) and exists ( e1367,e1368 : ( j = e1367 && e1368 = e1367 and exists ( e1369,e1370 : ( e1369 = e1368+e1370 && j' = e1369 && 1 = e1370 )) )) and exists ( e1371,e1372 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1363,e1364 : ( k = e1363 && e1364 = e1363 and exists ( e1365,e1366 : ( e1365+e1366 = e1364 && k' = e1365 && 1 = e1366 )) )) and exists ( e1367,e1368 : ( j = e1367 && e1368 = e1367 and exists ( e1369,e1370 : ( e1369 = e1368+e1370 && j' = e1369 && 1 = e1370 )) )) and exists ( e1371,e1372 : ( i = e1371 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1363,e1364 : ( k = e1363 && e1364 = e1363 and exists ( e1365,e1366 : ( e1365+e1366 = e1364 && k' = e1365 && 1 = e1366 )) )) and exists ( e1367,e1368 : ( j = e1367 && e1368 = e1367 and exists ( e1369,e1370 : ( e1369 = e1368+e1370 && j' = e1369 && 1 = e1370 )) )) and exists ( e1371,e1372 : ( i = e1371 && i' = e1372 && e1372 = e1371 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1373,e1374 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1373,e1374 : ( k = e1373 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1373,e1374 : ( k = e1373 and exists ( e1375,e1376 : ( e1375+e1376 = e1374 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1373,e1374 : ( k = e1373 and exists ( e1375,e1376 : ( e1375+e1376 = e1374 && k' = e1375 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1373,e1374 : ( k = e1373 && e1374 = e1373 and exists ( e1375,e1376 : ( e1375+e1376 = e1374 && k' = e1375 && 1 = e1376 )) )) and exists ( e1377,e1378 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1373,e1374 : ( k = e1373 && e1374 = e1373 and exists ( e1375,e1376 : ( e1375+e1376 = e1374 && k' = e1375 && 1 = e1376 )) )) and exists ( e1377,e1378 : ( j = e1377 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1373,e1374 : ( k = e1373 && e1374 = e1373 and exists ( e1375,e1376 : ( e1375+e1376 = e1374 && k' = e1375 && 1 = e1376 )) )) and exists ( e1377,e1378 : ( j = e1377 and exists ( e1379,e1380 : ( e1379+e1380 = e1378 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1373,e1374 : ( k = e1373 && e1374 = e1373 and exists ( e1375,e1376 : ( e1375+e1376 = e1374 && k' = e1375 && 1 = e1376 )) )) and exists ( e1377,e1378 : ( j = e1377 and exists ( e1379,e1380 : ( e1379+e1380 = e1378 && j' = e1379 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1373,e1374 : ( k = e1373 && e1374 = e1373 and exists ( e1375,e1376 : ( e1375+e1376 = e1374 && k' = e1375 && 1 = e1376 )) )) and exists ( e1377,e1378 : ( j = e1377 && e1378 = e1377 and exists ( e1379,e1380 : ( e1379+e1380 = e1378 && j' = e1379 && 1 = e1380 )) )) and exists ( e1381,e1382 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1373,e1374 : ( k = e1373 && e1374 = e1373 and exists ( e1375,e1376 : ( e1375+e1376 = e1374 && k' = e1375 && 1 = e1376 )) )) and exists ( e1377,e1378 : ( j = e1377 && e1378 = e1377 and exists ( e1379,e1380 : ( e1379+e1380 = e1378 && j' = e1379 && 1 = e1380 )) )) and exists ( e1381,e1382 : ( i = e1381 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1373,e1374 : ( k = e1373 && e1374 = e1373 and exists ( e1375,e1376 : ( e1375+e1376 = e1374 && k' = e1375 && 1 = e1376 )) )) and exists ( e1377,e1378 : ( j = e1377 && e1378 = e1377 and exists ( e1379,e1380 : ( e1379+e1380 = e1378 && j' = e1379 && 1 = e1380 )) )) and exists ( e1381,e1382 : ( i = e1381 && i' = e1382 && e1382 = e1381 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1383,e1384 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1383,e1384 : ( k = e1383 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1383,e1384 : ( k = e1383 and exists ( e1385,e1386 : ( e1385 = e1384+e1386 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1383,e1384 : ( k = e1383 and exists ( e1385,e1386 : ( e1385 = e1384+e1386 && k' = e1385 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1383,e1384 : ( k = e1383 && e1384 = e1383 and exists ( e1385,e1386 : ( e1385 = e1384+e1386 && k' = e1385 && 1 = e1386 )) )) and exists ( e1387,e1388 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1383,e1384 : ( k = e1383 && e1384 = e1383 and exists ( e1385,e1386 : ( e1385 = e1384+e1386 && k' = e1385 && 1 = e1386 )) )) and exists ( e1387,e1388 : ( j = e1387 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1383,e1384 : ( k = e1383 && e1384 = e1383 and exists ( e1385,e1386 : ( e1385 = e1384+e1386 && k' = e1385 && 1 = e1386 )) )) and exists ( e1387,e1388 : ( j = e1387 && j' = e1388 && e1388 = e1387 )) and exists ( e1389,e1390 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1383,e1384 : ( k = e1383 && e1384 = e1383 and exists ( e1385,e1386 : ( e1385 = e1384+e1386 && k' = e1385 && 1 = e1386 )) )) and exists ( e1387,e1388 : ( j = e1387 && j' = e1388 && e1388 = e1387 )) and exists ( e1389,e1390 : ( i = e1389 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1383,e1384 : ( k = e1383 && e1384 = e1383 and exists ( e1385,e1386 : ( e1385 = e1384+e1386 && k' = e1385 && 1 = e1386 )) )) and exists ( e1387,e1388 : ( j = e1387 && j' = e1388 && e1388 = e1387 )) and exists ( e1389,e1390 : ( i = e1389 and exists ( e1391,e1392 : ( e1391+e1392 = e1390 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1383,e1384 : ( k = e1383 && e1384 = e1383 and exists ( e1385,e1386 : ( e1385 = e1384+e1386 && k' = e1385 && 1 = e1386 )) )) and exists ( e1387,e1388 : ( j = e1387 && j' = e1388 && e1388 = e1387 )) and exists ( e1389,e1390 : ( i = e1389 and exists ( e1391,e1392 : ( e1391+e1392 = e1390 && i' = e1391 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1383,e1384 : ( k = e1383 && e1384 = e1383 and exists ( e1385,e1386 : ( e1385 = e1384+e1386 && k' = e1385 && 1 = e1386 )) )) and exists ( e1387,e1388 : ( j = e1387 && j' = e1388 && e1388 = e1387 )) and exists ( e1389,e1390 : ( i = e1389 && e1390 = e1389 and exists ( e1391,e1392 : ( e1391+e1392 = e1390 && i' = e1391 && 1 = e1392 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1393,e1394 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1393,e1394 : ( k = e1393 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1393,e1394 : ( k = e1393 && k' = e1394 && e1394 = e1393 )) and exists ( e1395,e1396 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1393,e1394 : ( k = e1393 && k' = e1394 && e1394 = e1393 )) and exists ( e1395,e1396 : ( j = e1395 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1393,e1394 : ( k = e1393 && k' = e1394 && e1394 = e1393 )) and exists ( e1395,e1396 : ( j = e1395 and exists ( e1397,e1398 : ( e1397 = e1396+e1398 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1393,e1394 : ( k = e1393 && k' = e1394 && e1394 = e1393 )) and exists ( e1395,e1396 : ( j = e1395 and exists ( e1397,e1398 : ( e1397 = e1396+e1398 && j' = e1397 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1393,e1394 : ( k = e1393 && k' = e1394 && e1394 = e1393 )) and exists ( e1395,e1396 : ( j = e1395 && e1396 = e1395 and exists ( e1397,e1398 : ( e1397 = e1396+e1398 && j' = e1397 && 1 = e1398 )) )) and exists ( e1399,e1400 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1393,e1394 : ( k = e1393 && k' = e1394 && e1394 = e1393 )) and exists ( e1395,e1396 : ( j = e1395 && e1396 = e1395 and exists ( e1397,e1398 : ( e1397 = e1396+e1398 && j' = e1397 && 1 = e1398 )) )) and exists ( e1399,e1400 : ( i = e1399 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1393,e1394 : ( k = e1393 && k' = e1394 && e1394 = e1393 )) and exists ( e1395,e1396 : ( j = e1395 && e1396 = e1395 and exists ( e1397,e1398 : ( e1397 = e1396+e1398 && j' = e1397 && 1 = e1398 )) )) and exists ( e1399,e1400 : ( i = e1399 and exists ( e1401,e1402 : ( e1401+e1402 = e1400 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1393,e1394 : ( k = e1393 && k' = e1394 && e1394 = e1393 )) and exists ( e1395,e1396 : ( j = e1395 && e1396 = e1395 and exists ( e1397,e1398 : ( e1397 = e1396+e1398 && j' = e1397 && 1 = e1398 )) )) and exists ( e1399,e1400 : ( i = e1399 and exists ( e1401,e1402 : ( e1401+e1402 = e1400 && i' = e1401 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1393,e1394 : ( k = e1393 && k' = e1394 && e1394 = e1393 )) and exists ( e1395,e1396 : ( j = e1395 && e1396 = e1395 and exists ( e1397,e1398 : ( e1397 = e1396+e1398 && j' = e1397 && 1 = e1398 )) )) and exists ( e1399,e1400 : ( i = e1399 && e1400 = e1399 and exists ( e1401,e1402 : ( e1401+e1402 = e1400 && i' = e1401 && 1 = e1402 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1403,e1404 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1403,e1404 : ( k = e1403 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1403,e1404 : ( k = e1403 && k' = e1404 && e1404 = e1403 )) and exists ( e1405,e1406 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1403,e1404 : ( k = e1403 && k' = e1404 && e1404 = e1403 )) and exists ( e1405,e1406 : ( j = e1405 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1403,e1404 : ( k = e1403 && k' = e1404 && e1404 = e1403 )) and exists ( e1405,e1406 : ( j = e1405 and exists ( e1407,e1408 : ( e1407+e1408 = e1406 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1403,e1404 : ( k = e1403 && k' = e1404 && e1404 = e1403 )) and exists ( e1405,e1406 : ( j = e1405 and exists ( e1407,e1408 : ( e1407+e1408 = e1406 && j' = e1407 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1403,e1404 : ( k = e1403 && k' = e1404 && e1404 = e1403 )) and exists ( e1405,e1406 : ( j = e1405 && e1406 = e1405 and exists ( e1407,e1408 : ( e1407+e1408 = e1406 && j' = e1407 && 1 = e1408 )) )) and exists ( e1409,e1410 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1403,e1404 : ( k = e1403 && k' = e1404 && e1404 = e1403 )) and exists ( e1405,e1406 : ( j = e1405 && e1406 = e1405 and exists ( e1407,e1408 : ( e1407+e1408 = e1406 && j' = e1407 && 1 = e1408 )) )) and exists ( e1409,e1410 : ( i = e1409 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1403,e1404 : ( k = e1403 && k' = e1404 && e1404 = e1403 )) and exists ( e1405,e1406 : ( j = e1405 && e1406 = e1405 and exists ( e1407,e1408 : ( e1407+e1408 = e1406 && j' = e1407 && 1 = e1408 )) )) and exists ( e1409,e1410 : ( i = e1409 and exists ( e1411,e1412 : ( e1411+e1412 = e1410 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1403,e1404 : ( k = e1403 && k' = e1404 && e1404 = e1403 )) and exists ( e1405,e1406 : ( j = e1405 && e1406 = e1405 and exists ( e1407,e1408 : ( e1407+e1408 = e1406 && j' = e1407 && 1 = e1408 )) )) and exists ( e1409,e1410 : ( i = e1409 and exists ( e1411,e1412 : ( e1411+e1412 = e1410 && i' = e1411 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1403,e1404 : ( k = e1403 && k' = e1404 && e1404 = e1403 )) and exists ( e1405,e1406 : ( j = e1405 && e1406 = e1405 and exists ( e1407,e1408 : ( e1407+e1408 = e1406 && j' = e1407 && 1 = e1408 )) )) and exists ( e1409,e1410 : ( i = e1409 && e1410 = e1409 and exists ( e1411,e1412 : ( e1411+e1412 = e1410 && i' = e1411 && 1 = e1412 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1413,e1414 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1413,e1414 : ( k = e1413 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1413,e1414 : ( k = e1413 and exists ( e1415,e1416 : ( e1415+e1416 = e1414 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1413,e1414 : ( k = e1413 and exists ( e1415,e1416 : ( e1415+e1416 = e1414 && k' = e1415 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1413,e1414 : ( k = e1413 && e1414 = e1413 and exists ( e1415,e1416 : ( e1415+e1416 = e1414 && k' = e1415 && 1 = e1416 )) )) and exists ( e1417,e1418 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1413,e1414 : ( k = e1413 && e1414 = e1413 and exists ( e1415,e1416 : ( e1415+e1416 = e1414 && k' = e1415 && 1 = e1416 )) )) and exists ( e1417,e1418 : ( j = e1417 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1413,e1414 : ( k = e1413 && e1414 = e1413 and exists ( e1415,e1416 : ( e1415+e1416 = e1414 && k' = e1415 && 1 = e1416 )) )) and exists ( e1417,e1418 : ( j = e1417 && j' = e1418 && e1418 = e1417 )) and exists ( e1419,e1420 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1413,e1414 : ( k = e1413 && e1414 = e1413 and exists ( e1415,e1416 : ( e1415+e1416 = e1414 && k' = e1415 && 1 = e1416 )) )) and exists ( e1417,e1418 : ( j = e1417 && j' = e1418 && e1418 = e1417 )) and exists ( e1419,e1420 : ( i = e1419 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1413,e1414 : ( k = e1413 && e1414 = e1413 and exists ( e1415,e1416 : ( e1415+e1416 = e1414 && k' = e1415 && 1 = e1416 )) )) and exists ( e1417,e1418 : ( j = e1417 && j' = e1418 && e1418 = e1417 )) and exists ( e1419,e1420 : ( i = e1419 and exists ( e1421,e1422 : ( e1421+e1422 = e1420 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1413,e1414 : ( k = e1413 && e1414 = e1413 and exists ( e1415,e1416 : ( e1415+e1416 = e1414 && k' = e1415 && 1 = e1416 )) )) and exists ( e1417,e1418 : ( j = e1417 && j' = e1418 && e1418 = e1417 )) and exists ( e1419,e1420 : ( i = e1419 and exists ( e1421,e1422 : ( e1421+e1422 = e1420 && i' = e1421 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1413,e1414 : ( k = e1413 && e1414 = e1413 and exists ( e1415,e1416 : ( e1415+e1416 = e1414 && k' = e1415 && 1 = e1416 )) )) and exists ( e1417,e1418 : ( j = e1417 && j' = e1418 && e1418 = e1417 )) and exists ( e1419,e1420 : ( i = e1419 && e1420 = e1419 and exists ( e1421,e1422 : ( e1421+e1422 = e1420 && i' = e1421 && 1 = e1422 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( k = e1423 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( k = e1423 and exists ( e1425,e1426 : ( e1425 = e1424+e1426 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( k = e1423 and exists ( e1425,e1426 : ( e1425 = e1424+e1426 && k' = e1425 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( k = e1423 && e1424 = e1423 and exists ( e1425,e1426 : ( e1425 = e1424+e1426 && k' = e1425 && 1 = e1426 )) )) and exists ( e1427,e1428 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( k = e1423 && e1424 = e1423 and exists ( e1425,e1426 : ( e1425 = e1424+e1426 && k' = e1425 && 1 = e1426 )) )) and exists ( e1427,e1428 : ( j = e1427 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( k = e1423 && e1424 = e1423 and exists ( e1425,e1426 : ( e1425 = e1424+e1426 && k' = e1425 && 1 = e1426 )) )) and exists ( e1427,e1428 : ( j = e1427 and exists ( e1429,e1430 : ( e1429 = e1428+e1430 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( k = e1423 && e1424 = e1423 and exists ( e1425,e1426 : ( e1425 = e1424+e1426 && k' = e1425 && 1 = e1426 )) )) and exists ( e1427,e1428 : ( j = e1427 and exists ( e1429,e1430 : ( e1429 = e1428+e1430 && j' = e1429 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( k = e1423 && e1424 = e1423 and exists ( e1425,e1426 : ( e1425 = e1424+e1426 && k' = e1425 && 1 = e1426 )) )) and exists ( e1427,e1428 : ( j = e1427 && e1428 = e1427 and exists ( e1429,e1430 : ( e1429 = e1428+e1430 && j' = e1429 && 1 = e1430 )) )) and exists ( e1431,e1432 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( k = e1423 && e1424 = e1423 and exists ( e1425,e1426 : ( e1425 = e1424+e1426 && k' = e1425 && 1 = e1426 )) )) and exists ( e1427,e1428 : ( j = e1427 && e1428 = e1427 and exists ( e1429,e1430 : ( e1429 = e1428+e1430 && j' = e1429 && 1 = e1430 )) )) and exists ( e1431,e1432 : ( i = e1431 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( k = e1423 && e1424 = e1423 and exists ( e1425,e1426 : ( e1425 = e1424+e1426 && k' = e1425 && 1 = e1426 )) )) and exists ( e1427,e1428 : ( j = e1427 && e1428 = e1427 and exists ( e1429,e1430 : ( e1429 = e1428+e1430 && j' = e1429 && 1 = e1430 )) )) and exists ( e1431,e1432 : ( i = e1431 and exists ( e1433,e1434 : ( e1433 = e1432+e1434 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( k = e1423 && e1424 = e1423 and exists ( e1425,e1426 : ( e1425 = e1424+e1426 && k' = e1425 && 1 = e1426 )) )) and exists ( e1427,e1428 : ( j = e1427 && e1428 = e1427 and exists ( e1429,e1430 : ( e1429 = e1428+e1430 && j' = e1429 && 1 = e1430 )) )) and exists ( e1431,e1432 : ( i = e1431 and exists ( e1433,e1434 : ( e1433 = e1432+e1434 && i' = e1433 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1423,e1424 : ( k = e1423 && e1424 = e1423 and exists ( e1425,e1426 : ( e1425 = e1424+e1426 && k' = e1425 && 1 = e1426 )) )) and exists ( e1427,e1428 : ( j = e1427 && e1428 = e1427 and exists ( e1429,e1430 : ( e1429 = e1428+e1430 && j' = e1429 && 1 = e1430 )) )) and exists ( e1431,e1432 : ( i = e1431 && e1432 = e1431 and exists ( e1433,e1434 : ( e1433 = e1432+e1434 && i' = e1433 && 1 = e1434 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( k = e1435 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( k = e1435 and exists ( e1437,e1438 : ( e1437 = e1436+e1438 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( k = e1435 and exists ( e1437,e1438 : ( e1437 = e1436+e1438 && k' = e1437 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( k = e1435 && e1436 = e1435 and exists ( e1437,e1438 : ( e1437 = e1436+e1438 && k' = e1437 && 1 = e1438 )) )) and exists ( e1439,e1440 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( k = e1435 && e1436 = e1435 and exists ( e1437,e1438 : ( e1437 = e1436+e1438 && k' = e1437 && 1 = e1438 )) )) and exists ( e1439,e1440 : ( j = e1439 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( k = e1435 && e1436 = e1435 and exists ( e1437,e1438 : ( e1437 = e1436+e1438 && k' = e1437 && 1 = e1438 )) )) and exists ( e1439,e1440 : ( j = e1439 and exists ( e1441,e1442 : ( e1441+e1442 = e1440 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( k = e1435 && e1436 = e1435 and exists ( e1437,e1438 : ( e1437 = e1436+e1438 && k' = e1437 && 1 = e1438 )) )) and exists ( e1439,e1440 : ( j = e1439 and exists ( e1441,e1442 : ( e1441+e1442 = e1440 && j' = e1441 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( k = e1435 && e1436 = e1435 and exists ( e1437,e1438 : ( e1437 = e1436+e1438 && k' = e1437 && 1 = e1438 )) )) and exists ( e1439,e1440 : ( j = e1439 && e1440 = e1439 and exists ( e1441,e1442 : ( e1441+e1442 = e1440 && j' = e1441 && 1 = e1442 )) )) and exists ( e1443,e1444 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( k = e1435 && e1436 = e1435 and exists ( e1437,e1438 : ( e1437 = e1436+e1438 && k' = e1437 && 1 = e1438 )) )) and exists ( e1439,e1440 : ( j = e1439 && e1440 = e1439 and exists ( e1441,e1442 : ( e1441+e1442 = e1440 && j' = e1441 && 1 = e1442 )) )) and exists ( e1443,e1444 : ( i = e1443 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( k = e1435 && e1436 = e1435 and exists ( e1437,e1438 : ( e1437 = e1436+e1438 && k' = e1437 && 1 = e1438 )) )) and exists ( e1439,e1440 : ( j = e1439 && e1440 = e1439 and exists ( e1441,e1442 : ( e1441+e1442 = e1440 && j' = e1441 && 1 = e1442 )) )) and exists ( e1443,e1444 : ( i = e1443 and exists ( e1445,e1446 : ( e1445 = e1444+e1446 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( k = e1435 && e1436 = e1435 and exists ( e1437,e1438 : ( e1437 = e1436+e1438 && k' = e1437 && 1 = e1438 )) )) and exists ( e1439,e1440 : ( j = e1439 && e1440 = e1439 and exists ( e1441,e1442 : ( e1441+e1442 = e1440 && j' = e1441 && 1 = e1442 )) )) and exists ( e1443,e1444 : ( i = e1443 and exists ( e1445,e1446 : ( e1445 = e1444+e1446 && i' = e1445 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1435,e1436 : ( k = e1435 && e1436 = e1435 and exists ( e1437,e1438 : ( e1437 = e1436+e1438 && k' = e1437 && 1 = e1438 )) )) and exists ( e1439,e1440 : ( j = e1439 && e1440 = e1439 and exists ( e1441,e1442 : ( e1441+e1442 = e1440 && j' = e1441 && 1 = e1442 )) )) and exists ( e1443,e1444 : ( i = e1443 && e1444 = e1443 and exists ( e1445,e1446 : ( e1445 = e1444+e1446 && i' = e1445 && 1 = e1446 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( k = e1447 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( k = e1447 and exists ( e1449,e1450 : ( e1449+e1450 = e1448 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( k = e1447 and exists ( e1449,e1450 : ( e1449+e1450 = e1448 && k' = e1449 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( k = e1447 && e1448 = e1447 and exists ( e1449,e1450 : ( e1449+e1450 = e1448 && k' = e1449 && 1 = e1450 )) )) and exists ( e1451,e1452 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( k = e1447 && e1448 = e1447 and exists ( e1449,e1450 : ( e1449+e1450 = e1448 && k' = e1449 && 1 = e1450 )) )) and exists ( e1451,e1452 : ( j = e1451 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( k = e1447 && e1448 = e1447 and exists ( e1449,e1450 : ( e1449+e1450 = e1448 && k' = e1449 && 1 = e1450 )) )) and exists ( e1451,e1452 : ( j = e1451 and exists ( e1453,e1454 : ( e1453 = e1452+e1454 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( k = e1447 && e1448 = e1447 and exists ( e1449,e1450 : ( e1449+e1450 = e1448 && k' = e1449 && 1 = e1450 )) )) and exists ( e1451,e1452 : ( j = e1451 and exists ( e1453,e1454 : ( e1453 = e1452+e1454 && j' = e1453 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( k = e1447 && e1448 = e1447 and exists ( e1449,e1450 : ( e1449+e1450 = e1448 && k' = e1449 && 1 = e1450 )) )) and exists ( e1451,e1452 : ( j = e1451 && e1452 = e1451 and exists ( e1453,e1454 : ( e1453 = e1452+e1454 && j' = e1453 && 1 = e1454 )) )) and exists ( e1455,e1456 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( k = e1447 && e1448 = e1447 and exists ( e1449,e1450 : ( e1449+e1450 = e1448 && k' = e1449 && 1 = e1450 )) )) and exists ( e1451,e1452 : ( j = e1451 && e1452 = e1451 and exists ( e1453,e1454 : ( e1453 = e1452+e1454 && j' = e1453 && 1 = e1454 )) )) and exists ( e1455,e1456 : ( i = e1455 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( k = e1447 && e1448 = e1447 and exists ( e1449,e1450 : ( e1449+e1450 = e1448 && k' = e1449 && 1 = e1450 )) )) and exists ( e1451,e1452 : ( j = e1451 && e1452 = e1451 and exists ( e1453,e1454 : ( e1453 = e1452+e1454 && j' = e1453 && 1 = e1454 )) )) and exists ( e1455,e1456 : ( i = e1455 and exists ( e1457,e1458 : ( e1457 = e1456+e1458 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( k = e1447 && e1448 = e1447 and exists ( e1449,e1450 : ( e1449+e1450 = e1448 && k' = e1449 && 1 = e1450 )) )) and exists ( e1451,e1452 : ( j = e1451 && e1452 = e1451 and exists ( e1453,e1454 : ( e1453 = e1452+e1454 && j' = e1453 && 1 = e1454 )) )) and exists ( e1455,e1456 : ( i = e1455 and exists ( e1457,e1458 : ( e1457 = e1456+e1458 && i' = e1457 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1447,e1448 : ( k = e1447 && e1448 = e1447 and exists ( e1449,e1450 : ( e1449+e1450 = e1448 && k' = e1449 && 1 = e1450 )) )) and exists ( e1451,e1452 : ( j = e1451 && e1452 = e1451 and exists ( e1453,e1454 : ( e1453 = e1452+e1454 && j' = e1453 && 1 = e1454 )) )) and exists ( e1455,e1456 : ( i = e1455 && e1456 = e1455 and exists ( e1457,e1458 : ( e1457 = e1456+e1458 && i' = e1457 && 1 = e1458 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( k = e1459 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( k = e1459 and exists ( e1461,e1462 : ( e1461+e1462 = e1460 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( k = e1459 and exists ( e1461,e1462 : ( e1461+e1462 = e1460 && k' = e1461 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( k = e1459 && e1460 = e1459 and exists ( e1461,e1462 : ( e1461+e1462 = e1460 && k' = e1461 && 1 = e1462 )) )) and exists ( e1463,e1464 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( k = e1459 && e1460 = e1459 and exists ( e1461,e1462 : ( e1461+e1462 = e1460 && k' = e1461 && 1 = e1462 )) )) and exists ( e1463,e1464 : ( j = e1463 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( k = e1459 && e1460 = e1459 and exists ( e1461,e1462 : ( e1461+e1462 = e1460 && k' = e1461 && 1 = e1462 )) )) and exists ( e1463,e1464 : ( j = e1463 and exists ( e1465,e1466 : ( e1465+e1466 = e1464 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( k = e1459 && e1460 = e1459 and exists ( e1461,e1462 : ( e1461+e1462 = e1460 && k' = e1461 && 1 = e1462 )) )) and exists ( e1463,e1464 : ( j = e1463 and exists ( e1465,e1466 : ( e1465+e1466 = e1464 && j' = e1465 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( k = e1459 && e1460 = e1459 and exists ( e1461,e1462 : ( e1461+e1462 = e1460 && k' = e1461 && 1 = e1462 )) )) and exists ( e1463,e1464 : ( j = e1463 && e1464 = e1463 and exists ( e1465,e1466 : ( e1465+e1466 = e1464 && j' = e1465 && 1 = e1466 )) )) and exists ( e1467,e1468 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( k = e1459 && e1460 = e1459 and exists ( e1461,e1462 : ( e1461+e1462 = e1460 && k' = e1461 && 1 = e1462 )) )) and exists ( e1463,e1464 : ( j = e1463 && e1464 = e1463 and exists ( e1465,e1466 : ( e1465+e1466 = e1464 && j' = e1465 && 1 = e1466 )) )) and exists ( e1467,e1468 : ( i = e1467 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( k = e1459 && e1460 = e1459 and exists ( e1461,e1462 : ( e1461+e1462 = e1460 && k' = e1461 && 1 = e1462 )) )) and exists ( e1463,e1464 : ( j = e1463 && e1464 = e1463 and exists ( e1465,e1466 : ( e1465+e1466 = e1464 && j' = e1465 && 1 = e1466 )) )) and exists ( e1467,e1468 : ( i = e1467 and exists ( e1469,e1470 : ( e1469 = e1468+e1470 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( k = e1459 && e1460 = e1459 and exists ( e1461,e1462 : ( e1461+e1462 = e1460 && k' = e1461 && 1 = e1462 )) )) and exists ( e1463,e1464 : ( j = e1463 && e1464 = e1463 and exists ( e1465,e1466 : ( e1465+e1466 = e1464 && j' = e1465 && 1 = e1466 )) )) and exists ( e1467,e1468 : ( i = e1467 and exists ( e1469,e1470 : ( e1469 = e1468+e1470 && i' = e1469 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1459,e1460 : ( k = e1459 && e1460 = e1459 and exists ( e1461,e1462 : ( e1461+e1462 = e1460 && k' = e1461 && 1 = e1462 )) )) and exists ( e1463,e1464 : ( j = e1463 && e1464 = e1463 and exists ( e1465,e1466 : ( e1465+e1466 = e1464 && j' = e1465 && 1 = e1466 )) )) and exists ( e1467,e1468 : ( i = e1467 && e1468 = e1467 and exists ( e1469,e1470 : ( e1469 = e1468+e1470 && i' = e1469 && 1 = e1470 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( k = e1471 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( k = e1471 and exists ( e1473,e1474 : ( e1473 = e1472+e1474 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( k = e1471 and exists ( e1473,e1474 : ( e1473 = e1472+e1474 && k' = e1473 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( k = e1471 && e1472 = e1471 and exists ( e1473,e1474 : ( e1473 = e1472+e1474 && k' = e1473 && 1 = e1474 )) )) and exists ( e1475,e1476 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( k = e1471 && e1472 = e1471 and exists ( e1473,e1474 : ( e1473 = e1472+e1474 && k' = e1473 && 1 = e1474 )) )) and exists ( e1475,e1476 : ( j = e1475 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( k = e1471 && e1472 = e1471 and exists ( e1473,e1474 : ( e1473 = e1472+e1474 && k' = e1473 && 1 = e1474 )) )) and exists ( e1475,e1476 : ( j = e1475 and exists ( e1477,e1478 : ( e1477 = e1476+e1478 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( k = e1471 && e1472 = e1471 and exists ( e1473,e1474 : ( e1473 = e1472+e1474 && k' = e1473 && 1 = e1474 )) )) and exists ( e1475,e1476 : ( j = e1475 and exists ( e1477,e1478 : ( e1477 = e1476+e1478 && j' = e1477 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( k = e1471 && e1472 = e1471 and exists ( e1473,e1474 : ( e1473 = e1472+e1474 && k' = e1473 && 1 = e1474 )) )) and exists ( e1475,e1476 : ( j = e1475 && e1476 = e1475 and exists ( e1477,e1478 : ( e1477 = e1476+e1478 && j' = e1477 && 1 = e1478 )) )) and exists ( e1479,e1480 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( k = e1471 && e1472 = e1471 and exists ( e1473,e1474 : ( e1473 = e1472+e1474 && k' = e1473 && 1 = e1474 )) )) and exists ( e1475,e1476 : ( j = e1475 && e1476 = e1475 and exists ( e1477,e1478 : ( e1477 = e1476+e1478 && j' = e1477 && 1 = e1478 )) )) and exists ( e1479,e1480 : ( i = e1479 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( k = e1471 && e1472 = e1471 and exists ( e1473,e1474 : ( e1473 = e1472+e1474 && k' = e1473 && 1 = e1474 )) )) and exists ( e1475,e1476 : ( j = e1475 && e1476 = e1475 and exists ( e1477,e1478 : ( e1477 = e1476+e1478 && j' = e1477 && 1 = e1478 )) )) and exists ( e1479,e1480 : ( i = e1479 and exists ( e1481,e1482 : ( e1481+e1482 = e1480 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( k = e1471 && e1472 = e1471 and exists ( e1473,e1474 : ( e1473 = e1472+e1474 && k' = e1473 && 1 = e1474 )) )) and exists ( e1475,e1476 : ( j = e1475 && e1476 = e1475 and exists ( e1477,e1478 : ( e1477 = e1476+e1478 && j' = e1477 && 1 = e1478 )) )) and exists ( e1479,e1480 : ( i = e1479 and exists ( e1481,e1482 : ( e1481+e1482 = e1480 && i' = e1481 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1471,e1472 : ( k = e1471 && e1472 = e1471 and exists ( e1473,e1474 : ( e1473 = e1472+e1474 && k' = e1473 && 1 = e1474 )) )) and exists ( e1475,e1476 : ( j = e1475 && e1476 = e1475 and exists ( e1477,e1478 : ( e1477 = e1476+e1478 && j' = e1477 && 1 = e1478 )) )) and exists ( e1479,e1480 : ( i = e1479 && e1480 = e1479 and exists ( e1481,e1482 : ( e1481+e1482 = e1480 && i' = e1481 && 1 = e1482 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( k = e1483 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( k = e1483 and exists ( e1485,e1486 : ( e1485 = e1484+e1486 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( k = e1483 and exists ( e1485,e1486 : ( e1485 = e1484+e1486 && k' = e1485 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( k = e1483 && e1484 = e1483 and exists ( e1485,e1486 : ( e1485 = e1484+e1486 && k' = e1485 && 1 = e1486 )) )) and exists ( e1487,e1488 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( k = e1483 && e1484 = e1483 and exists ( e1485,e1486 : ( e1485 = e1484+e1486 && k' = e1485 && 1 = e1486 )) )) and exists ( e1487,e1488 : ( j = e1487 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( k = e1483 && e1484 = e1483 and exists ( e1485,e1486 : ( e1485 = e1484+e1486 && k' = e1485 && 1 = e1486 )) )) and exists ( e1487,e1488 : ( j = e1487 and exists ( e1489,e1490 : ( e1489+e1490 = e1488 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( k = e1483 && e1484 = e1483 and exists ( e1485,e1486 : ( e1485 = e1484+e1486 && k' = e1485 && 1 = e1486 )) )) and exists ( e1487,e1488 : ( j = e1487 and exists ( e1489,e1490 : ( e1489+e1490 = e1488 && j' = e1489 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( k = e1483 && e1484 = e1483 and exists ( e1485,e1486 : ( e1485 = e1484+e1486 && k' = e1485 && 1 = e1486 )) )) and exists ( e1487,e1488 : ( j = e1487 && e1488 = e1487 and exists ( e1489,e1490 : ( e1489+e1490 = e1488 && j' = e1489 && 1 = e1490 )) )) and exists ( e1491,e1492 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( k = e1483 && e1484 = e1483 and exists ( e1485,e1486 : ( e1485 = e1484+e1486 && k' = e1485 && 1 = e1486 )) )) and exists ( e1487,e1488 : ( j = e1487 && e1488 = e1487 and exists ( e1489,e1490 : ( e1489+e1490 = e1488 && j' = e1489 && 1 = e1490 )) )) and exists ( e1491,e1492 : ( i = e1491 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( k = e1483 && e1484 = e1483 and exists ( e1485,e1486 : ( e1485 = e1484+e1486 && k' = e1485 && 1 = e1486 )) )) and exists ( e1487,e1488 : ( j = e1487 && e1488 = e1487 and exists ( e1489,e1490 : ( e1489+e1490 = e1488 && j' = e1489 && 1 = e1490 )) )) and exists ( e1491,e1492 : ( i = e1491 and exists ( e1493,e1494 : ( e1493+e1494 = e1492 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( k = e1483 && e1484 = e1483 and exists ( e1485,e1486 : ( e1485 = e1484+e1486 && k' = e1485 && 1 = e1486 )) )) and exists ( e1487,e1488 : ( j = e1487 && e1488 = e1487 and exists ( e1489,e1490 : ( e1489+e1490 = e1488 && j' = e1489 && 1 = e1490 )) )) and exists ( e1491,e1492 : ( i = e1491 and exists ( e1493,e1494 : ( e1493+e1494 = e1492 && i' = e1493 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1483,e1484 : ( k = e1483 && e1484 = e1483 and exists ( e1485,e1486 : ( e1485 = e1484+e1486 && k' = e1485 && 1 = e1486 )) )) and exists ( e1487,e1488 : ( j = e1487 && e1488 = e1487 and exists ( e1489,e1490 : ( e1489+e1490 = e1488 && j' = e1489 && 1 = e1490 )) )) and exists ( e1491,e1492 : ( i = e1491 && e1492 = e1491 and exists ( e1493,e1494 : ( e1493+e1494 = e1492 && i' = e1493 && 1 = e1494 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( k = e1495 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( k = e1495 and exists ( e1497,e1498 : ( e1497+e1498 = e1496 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( k = e1495 and exists ( e1497,e1498 : ( e1497+e1498 = e1496 && k' = e1497 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( k = e1495 && e1496 = e1495 and exists ( e1497,e1498 : ( e1497+e1498 = e1496 && k' = e1497 && 1 = e1498 )) )) and exists ( e1499,e1500 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( k = e1495 && e1496 = e1495 and exists ( e1497,e1498 : ( e1497+e1498 = e1496 && k' = e1497 && 1 = e1498 )) )) and exists ( e1499,e1500 : ( j = e1499 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( k = e1495 && e1496 = e1495 and exists ( e1497,e1498 : ( e1497+e1498 = e1496 && k' = e1497 && 1 = e1498 )) )) and exists ( e1499,e1500 : ( j = e1499 and exists ( e1501,e1502 : ( e1501 = e1500+e1502 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( k = e1495 && e1496 = e1495 and exists ( e1497,e1498 : ( e1497+e1498 = e1496 && k' = e1497 && 1 = e1498 )) )) and exists ( e1499,e1500 : ( j = e1499 and exists ( e1501,e1502 : ( e1501 = e1500+e1502 && j' = e1501 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( k = e1495 && e1496 = e1495 and exists ( e1497,e1498 : ( e1497+e1498 = e1496 && k' = e1497 && 1 = e1498 )) )) and exists ( e1499,e1500 : ( j = e1499 && e1500 = e1499 and exists ( e1501,e1502 : ( e1501 = e1500+e1502 && j' = e1501 && 1 = e1502 )) )) and exists ( e1503,e1504 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( k = e1495 && e1496 = e1495 and exists ( e1497,e1498 : ( e1497+e1498 = e1496 && k' = e1497 && 1 = e1498 )) )) and exists ( e1499,e1500 : ( j = e1499 && e1500 = e1499 and exists ( e1501,e1502 : ( e1501 = e1500+e1502 && j' = e1501 && 1 = e1502 )) )) and exists ( e1503,e1504 : ( i = e1503 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( k = e1495 && e1496 = e1495 and exists ( e1497,e1498 : ( e1497+e1498 = e1496 && k' = e1497 && 1 = e1498 )) )) and exists ( e1499,e1500 : ( j = e1499 && e1500 = e1499 and exists ( e1501,e1502 : ( e1501 = e1500+e1502 && j' = e1501 && 1 = e1502 )) )) and exists ( e1503,e1504 : ( i = e1503 and exists ( e1505,e1506 : ( e1505+e1506 = e1504 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( k = e1495 && e1496 = e1495 and exists ( e1497,e1498 : ( e1497+e1498 = e1496 && k' = e1497 && 1 = e1498 )) )) and exists ( e1499,e1500 : ( j = e1499 && e1500 = e1499 and exists ( e1501,e1502 : ( e1501 = e1500+e1502 && j' = e1501 && 1 = e1502 )) )) and exists ( e1503,e1504 : ( i = e1503 and exists ( e1505,e1506 : ( e1505+e1506 = e1504 && i' = e1505 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1495,e1496 : ( k = e1495 && e1496 = e1495 and exists ( e1497,e1498 : ( e1497+e1498 = e1496 && k' = e1497 && 1 = e1498 )) )) and exists ( e1499,e1500 : ( j = e1499 && e1500 = e1499 and exists ( e1501,e1502 : ( e1501 = e1500+e1502 && j' = e1501 && 1 = e1502 )) )) and exists ( e1503,e1504 : ( i = e1503 && e1504 = e1503 and exists ( e1505,e1506 : ( e1505+e1506 = e1504 && i' = e1505 && 1 = e1506 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( k = e1507 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( k = e1507 and exists ( e1509,e1510 : ( e1509+e1510 = e1508 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( k = e1507 and exists ( e1509,e1510 : ( e1509+e1510 = e1508 && k' = e1509 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( k = e1507 && e1508 = e1507 and exists ( e1509,e1510 : ( e1509+e1510 = e1508 && k' = e1509 && 1 = e1510 )) )) and exists ( e1511,e1512 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( k = e1507 && e1508 = e1507 and exists ( e1509,e1510 : ( e1509+e1510 = e1508 && k' = e1509 && 1 = e1510 )) )) and exists ( e1511,e1512 : ( j = e1511 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( k = e1507 && e1508 = e1507 and exists ( e1509,e1510 : ( e1509+e1510 = e1508 && k' = e1509 && 1 = e1510 )) )) and exists ( e1511,e1512 : ( j = e1511 and exists ( e1513,e1514 : ( e1513+e1514 = e1512 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( k = e1507 && e1508 = e1507 and exists ( e1509,e1510 : ( e1509+e1510 = e1508 && k' = e1509 && 1 = e1510 )) )) and exists ( e1511,e1512 : ( j = e1511 and exists ( e1513,e1514 : ( e1513+e1514 = e1512 && j' = e1513 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( k = e1507 && e1508 = e1507 and exists ( e1509,e1510 : ( e1509+e1510 = e1508 && k' = e1509 && 1 = e1510 )) )) and exists ( e1511,e1512 : ( j = e1511 && e1512 = e1511 and exists ( e1513,e1514 : ( e1513+e1514 = e1512 && j' = e1513 && 1 = e1514 )) )) and exists ( e1515,e1516 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( k = e1507 && e1508 = e1507 and exists ( e1509,e1510 : ( e1509+e1510 = e1508 && k' = e1509 && 1 = e1510 )) )) and exists ( e1511,e1512 : ( j = e1511 && e1512 = e1511 and exists ( e1513,e1514 : ( e1513+e1514 = e1512 && j' = e1513 && 1 = e1514 )) )) and exists ( e1515,e1516 : ( i = e1515 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( k = e1507 && e1508 = e1507 and exists ( e1509,e1510 : ( e1509+e1510 = e1508 && k' = e1509 && 1 = e1510 )) )) and exists ( e1511,e1512 : ( j = e1511 && e1512 = e1511 and exists ( e1513,e1514 : ( e1513+e1514 = e1512 && j' = e1513 && 1 = e1514 )) )) and exists ( e1515,e1516 : ( i = e1515 and exists ( e1517,e1518 : ( e1517+e1518 = e1516 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( k = e1507 && e1508 = e1507 and exists ( e1509,e1510 : ( e1509+e1510 = e1508 && k' = e1509 && 1 = e1510 )) )) and exists ( e1511,e1512 : ( j = e1511 && e1512 = e1511 and exists ( e1513,e1514 : ( e1513+e1514 = e1512 && j' = e1513 && 1 = e1514 )) )) and exists ( e1515,e1516 : ( i = e1515 and exists ( e1517,e1518 : ( e1517+e1518 = e1516 && i' = e1517 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1507,e1508 : ( k = e1507 && e1508 = e1507 and exists ( e1509,e1510 : ( e1509+e1510 = e1508 && k' = e1509 && 1 = e1510 )) )) and exists ( e1511,e1512 : ( j = e1511 && e1512 = e1511 and exists ( e1513,e1514 : ( e1513+e1514 = e1512 && j' = e1513 && 1 = e1514 )) )) and exists ( e1515,e1516 : ( i = e1515 && e1516 = e1515 and exists ( e1517,e1518 : ( e1517+e1518 = e1516 && i' = e1517 && 1 = e1518 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 1
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1519,e1520 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1519,e1520 : ( k = e1519 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1519,e1520 : ( k = e1519 && k' = e1520 && e1520 = e1519 )) and exists ( e1521,e1522 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1519,e1520 : ( k = e1519 && k' = e1520 && e1520 = e1519 )) and exists ( e1521,e1522 : ( j = e1521 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1519,e1520 : ( k = e1519 && k' = e1520 && e1520 = e1519 )) and exists ( e1521,e1522 : ( j = e1521 && j' = e1522 && e1522 = e1521 )) and exists ( e1523,e1524 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1519,e1520 : ( k = e1519 && k' = e1520 && e1520 = e1519 )) and exists ( e1521,e1522 : ( j = e1521 && j' = e1522 && e1522 = e1521 )) and exists ( e1523,e1524 : ( i = e1523 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1519,e1520 : ( k = e1519 && k' = e1520 && e1520 = e1519 )) and exists ( e1521,e1522 : ( j = e1521 && j' = e1522 && e1522 = e1521 )) and exists ( e1523,e1524 : ( i = e1523 && i' = e1524 && e1524 = e1523 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 2
LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0
j 4

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))
repr2   _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))

3 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))

3 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1525,e1526 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1525,e1526 : ( k = e1525 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1525,e1526 : ( k = e1525 && k' = e1526 && e1526 = e1525 )) and exists ( e1527,e1528 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1525,e1526 : ( k = e1525 && k' = e1526 && e1526 = e1525 )) and exists ( e1527,e1528 : ( j = e1527 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1525,e1526 : ( k = e1525 && k' = e1526 && e1526 = e1525 )) and exists ( e1527,e1528 : ( j = e1527 && j' = e1528 && e1528 = e1527 )) and exists ( e1529,e1530 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1525,e1526 : ( k = e1525 && k' = e1526 && e1526 = e1525 )) and exists ( e1527,e1528 : ( j = e1527 && j' = e1528 && e1528 = e1527 )) and exists ( e1529,e1530 : ( i = e1529 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1525,e1526 : ( k = e1525 && k' = e1526 && e1526 = e1525 )) and exists ( e1527,e1528 : ( j = e1527 && j' = e1528 && e1528 = e1527 )) and exists ( e1529,e1530 : ( i = e1529 && i' = e1530 && e1530 = e1529 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 1
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1531,e1532 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1531,e1532 : ( k = e1531 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1531,e1532 : ( k = e1531 && k' = e1532 && e1532 = e1531 )) and exists ( e1533,e1534 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1531,e1532 : ( k = e1531 && k' = e1532 && e1532 = e1531 )) and exists ( e1533,e1534 : ( j = e1533 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1531,e1532 : ( k = e1531 && k' = e1532 && e1532 = e1531 )) and exists ( e1533,e1534 : ( j = e1533 && j' = e1534 && e1534 = e1533 )) and exists ( e1535,e1536 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1531,e1532 : ( k = e1531 && k' = e1532 && e1532 = e1531 )) and exists ( e1533,e1534 : ( j = e1533 && j' = e1534 && e1534 = e1533 )) and exists ( e1535,e1536 : ( i = e1535 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1531,e1532 : ( k = e1531 && k' = e1532 && e1532 = e1531 )) and exists ( e1533,e1534 : ( j = e1533 && j' = e1534 && e1534 = e1533 )) and exists ( e1535,e1536 : ( i = e1535 && i' = e1536 && e1536 = e1535 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 2
LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0
j 5

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))
repr2   _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (x * _in[k][j][i] - ((y * h2inv) * _out[k][j][i]))

3 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))

5 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _lambda is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_lambda' write 0

ref[3] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[4] _rhs is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_rhs' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1537,e1538 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1537,e1538 : ( k = e1537 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1537,e1538 : ( k = e1537 && k' = e1538 && e1538 = e1537 )) and exists ( e1539,e1540 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1537,e1538 : ( k = e1537 && k' = e1538 && e1538 = e1537 )) and exists ( e1539,e1540 : ( j = e1539 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1537,e1538 : ( k = e1537 && k' = e1538 && e1538 = e1537 )) and exists ( e1539,e1540 : ( j = e1539 && j' = e1540 && e1540 = e1539 )) and exists ( e1541,e1542 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1537,e1538 : ( k = e1537 && k' = e1538 && e1538 = e1537 )) and exists ( e1539,e1540 : ( j = e1539 && j' = e1540 && e1540 = e1539 )) and exists ( e1541,e1542 : ( i = e1541 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1537,e1538 : ( k = e1537 && k' = e1538 && e1538 = e1537 )) and exists ( e1539,e1540 : ( j = e1539 && j' = e1540 && e1540 = e1539 )) and exists ( e1541,e1542 : ( i = e1541 && i' = e1542 && e1542 = e1541 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 1
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1543,e1544 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1543,e1544 : ( k = e1543 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1543,e1544 : ( k = e1543 && k' = e1544 && e1544 = e1543 )) and exists ( e1545,e1546 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1543,e1544 : ( k = e1543 && k' = e1544 && e1544 = e1543 )) and exists ( e1545,e1546 : ( j = e1545 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1543,e1544 : ( k = e1543 && k' = e1544 && e1544 = e1543 )) and exists ( e1545,e1546 : ( j = e1545 && j' = e1546 && e1546 = e1545 )) and exists ( e1547,e1548 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1543,e1544 : ( k = e1543 && k' = e1544 && e1544 = e1543 )) and exists ( e1545,e1546 : ( j = e1545 && j' = e1546 && e1546 = e1545 )) and exists ( e1547,e1548 : ( i = e1547 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1543,e1544 : ( k = e1543 && k' = e1544 && e1544 = e1543 )) and exists ( e1545,e1546 : ( j = e1545 && j' = e1546 && e1546 = e1545 )) and exists ( e1547,e1548 : ( i = e1547 && i' = e1548 && e1548 = e1547 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 2
LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0
i 2
j 2

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))
repr2   _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
repr1 == repr2
repr1->dump()
_out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))

5 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _lambda is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_lambda' write 0

ref[3] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[4] _rhs is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_rhs' write 0

access of size 5
WRITE  array access 0 = _out
       array access 1 = _in
       array access 2 = _lambda
       array access 3 = _out
       array access 4 = _rhs
that was the list


before mapRefstoStatements()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
after mapRefstoStatements()

i 0
sym_a = _out
irtools.cc j 0
sym_b = _out
irtools.cc ij 0 0
*sym_a == *sym_b
0 a->is_write()
0 b->is_write()

irtools.cc ij 0 0   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1549,e1550 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1549,e1550 : ( k = e1549 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1549,e1550 : ( k = e1549 && k' = e1550 && e1550 = e1549 )) and exists ( e1551,e1552 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1549,e1550 : ( k = e1549 && k' = e1550 && e1550 = e1549 )) and exists ( e1551,e1552 : ( j = e1551 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1549,e1550 : ( k = e1549 && k' = e1550 && e1550 = e1549 )) and exists ( e1551,e1552 : ( j = e1551 && j' = e1552 && e1552 = e1551 )) and exists ( e1553,e1554 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1549,e1550 : ( k = e1549 && k' = e1550 && e1550 = e1549 )) and exists ( e1551,e1552 : ( j = e1551 && j' = e1552 && e1552 = e1551 )) and exists ( e1553,e1554 : ( i = e1553 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1549,e1550 : ( k = e1549 && k' = e1550 && e1550 = e1549 )) and exists ( e1551,e1552 : ( j = e1551 && j' = e1552 && e1552 = e1551 )) and exists ( e1553,e1554 : ( i = e1553 && i' = e1554 && e1554 = e1553 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1549,e1550 : ( k = e1549 && k' = e1550 && e1550 = e1549 )) and exists ( e1551,e1552 : ( j = e1551 && j' = e1552 && e1552 = e1551 )) and exists ( e1553,e1554 : ( i = e1553 && i' = e1554 && e1554 = e1553 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
1
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
leaving relation2dependences, 0 and 0 dependences

irtools.cc ij 0 0 dv.first 0   dv.second 0
234irtools.cc j 1
sym_b = _in
irtools.cc ij 0 1
*sym_a NOT == *sym_b
0 a->is_write()
1 b->is_NOT_write()
irtools.cc j 2
sym_b = _lambda
irtools.cc ij 0 2
*sym_a NOT == *sym_b
0 a->is_write()
2 b->is_NOT_write()
irtools.cc j 3
sym_b = _out
irtools.cc ij 0 3
*sym_a == *sym_b
0 a->is_write()
3 b->is_NOT_write()

irtools.cc ij 0 3   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1555,e1556 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1555,e1556 : ( k = e1555 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1555,e1556 : ( k = e1555 && k' = e1556 && e1556 = e1555 )) and exists ( e1557,e1558 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1555,e1556 : ( k = e1555 && k' = e1556 && e1556 = e1555 )) and exists ( e1557,e1558 : ( j = e1557 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1555,e1556 : ( k = e1555 && k' = e1556 && e1556 = e1555 )) and exists ( e1557,e1558 : ( j = e1557 && j' = e1558 && e1558 = e1557 )) and exists ( e1559,e1560 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1555,e1556 : ( k = e1555 && k' = e1556 && e1556 = e1555 )) and exists ( e1557,e1558 : ( j = e1557 && j' = e1558 && e1558 = e1557 )) and exists ( e1559,e1560 : ( i = e1559 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1555,e1556 : ( k = e1555 && k' = e1556 && e1556 = e1555 )) and exists ( e1557,e1558 : ( j = e1557 && j' = e1558 && e1558 = e1557 )) and exists ( e1559,e1560 : ( i = e1559 && i' = e1560 && e1560 = e1559 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1555,e1556 : ( k = e1555 && k' = e1556 && e1556 = e1555 )) and exists ( e1557,e1558 : ( j = e1557 && j' = e1558 && e1558 = e1557 )) and exists ( e1559,e1560 : ( i = e1559 && i' = e1560 && e1560 = e1559 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
1
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _out  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _out

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _out
symbol _out  HAS A left  DEPENDENCE OF TYPE DEP_W2R

irtools.cc ij 0 3 dv.first 1   dv.second 0
234irtools.cc j 4
sym_b = _rhs
irtools.cc ij 0 4
*sym_a NOT == *sym_b
0 a->is_write()
4 b->is_NOT_write()
i 1
sym_a = _in
irtools.cc j 1
sym_b = _in
irtools.cc ij 1 1
*sym_a == *sym_b
1 a->is_NOT_write()
1 b->is_NOT_write()
irtools.cc j 2
sym_b = _lambda
irtools.cc ij 1 2
*sym_a NOT == *sym_b
1 a->is_NOT_write()
2 b->is_NOT_write()
irtools.cc j 3
sym_b = _out
irtools.cc ij 1 3
*sym_a NOT == *sym_b
1 a->is_NOT_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _rhs
irtools.cc ij 1 4
*sym_a NOT == *sym_b
1 a->is_NOT_write()
4 b->is_NOT_write()
i 2
sym_a = _lambda
irtools.cc j 2
sym_b = _lambda
irtools.cc ij 2 2
*sym_a == *sym_b
2 a->is_NOT_write()
2 b->is_NOT_write()
irtools.cc j 3
sym_b = _out
irtools.cc ij 2 3
*sym_a NOT == *sym_b
2 a->is_NOT_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _rhs
irtools.cc ij 2 4
*sym_a NOT == *sym_b
2 a->is_NOT_write()
4 b->is_NOT_write()
i 3
sym_a = _out
irtools.cc j 3
sym_b = _out
irtools.cc ij 3 3
*sym_a == *sym_b
3 a->is_NOT_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _rhs
irtools.cc ij 3 4
*sym_a NOT == *sym_b
3 a->is_NOT_write()
4 b->is_NOT_write()
i 4
sym_a = _rhs
irtools.cc j 4
sym_b = _rhs
irtools.cc ij 4 4
*sym_a == *sym_b
4 a->is_NOT_write()
4 b->is_NOT_write()
LEAVING test_data_dependences()  first size 2    second size 0

dv.first.size() 2
k1 0
k1 1
j 3

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))
repr2   _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))

5 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _lambda is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_lambda' write 0

ref[3] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[4] _rhs is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_rhs' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))

28 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[3] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[4] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[5] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[6] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[7] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[8] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[9] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[10] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[11] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[12] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[13] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[14] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[15] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[16] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[17] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[18] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[19] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[20] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[21] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[22] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[23] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[24] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[25] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[26] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[27] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1561,e1562 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1561,e1562 : ( k = e1561 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1561,e1562 : ( k = e1561 && k' = e1562 && e1562 = e1561 )) and exists ( e1563,e1564 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1561,e1562 : ( k = e1561 && k' = e1562 && e1562 = e1561 )) and exists ( e1563,e1564 : ( j = e1563 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1561,e1562 : ( k = e1561 && k' = e1562 && e1562 = e1561 )) and exists ( e1563,e1564 : ( j = e1563 && j' = e1564 && e1564 = e1563 )) and exists ( e1565,e1566 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1561,e1562 : ( k = e1561 && k' = e1562 && e1562 = e1561 )) and exists ( e1563,e1564 : ( j = e1563 && j' = e1564 && e1564 = e1563 )) and exists ( e1565,e1566 : ( i = e1565 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1561,e1562 : ( k = e1561 && k' = e1562 && e1562 = e1561 )) and exists ( e1563,e1564 : ( j = e1563 && j' = e1564 && e1564 = e1563 )) and exists ( e1565,e1566 : ( i = e1565 && i' = e1566 && e1566 = e1565 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1567,e1568 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1567,e1568 : ( k = e1567 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1567,e1568 : ( k = e1567 and exists ( e1569,e1570 : ( e1569 = e1568+e1570 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1567,e1568 : ( k = e1567 and exists ( e1569,e1570 : ( e1569 = e1568+e1570 && k' = e1569 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1567,e1568 : ( k = e1567 && e1568 = e1567 and exists ( e1569,e1570 : ( e1569 = e1568+e1570 && k' = e1569 && 1 = e1570 )) )) and exists ( e1571,e1572 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1567,e1568 : ( k = e1567 && e1568 = e1567 and exists ( e1569,e1570 : ( e1569 = e1568+e1570 && k' = e1569 && 1 = e1570 )) )) and exists ( e1571,e1572 : ( j = e1571 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1567,e1568 : ( k = e1567 && e1568 = e1567 and exists ( e1569,e1570 : ( e1569 = e1568+e1570 && k' = e1569 && 1 = e1570 )) )) and exists ( e1571,e1572 : ( j = e1571 && j' = e1572 && e1572 = e1571 )) and exists ( e1573,e1574 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1567,e1568 : ( k = e1567 && e1568 = e1567 and exists ( e1569,e1570 : ( e1569 = e1568+e1570 && k' = e1569 && 1 = e1570 )) )) and exists ( e1571,e1572 : ( j = e1571 && j' = e1572 && e1572 = e1571 )) and exists ( e1573,e1574 : ( i = e1573 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1567,e1568 : ( k = e1567 && e1568 = e1567 and exists ( e1569,e1570 : ( e1569 = e1568+e1570 && k' = e1569 && 1 = e1570 )) )) and exists ( e1571,e1572 : ( j = e1571 && j' = e1572 && e1572 = e1571 )) and exists ( e1573,e1574 : ( i = e1573 && i' = e1574 && e1574 = e1573 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1575,e1576 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1575,e1576 : ( k = e1575 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1575,e1576 : ( k = e1575 && k' = e1576 && e1576 = e1575 )) and exists ( e1577,e1578 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1575,e1576 : ( k = e1575 && k' = e1576 && e1576 = e1575 )) and exists ( e1577,e1578 : ( j = e1577 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1575,e1576 : ( k = e1575 && k' = e1576 && e1576 = e1575 )) and exists ( e1577,e1578 : ( j = e1577 and exists ( e1579,e1580 : ( e1579 = e1578+e1580 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1575,e1576 : ( k = e1575 && k' = e1576 && e1576 = e1575 )) and exists ( e1577,e1578 : ( j = e1577 and exists ( e1579,e1580 : ( e1579 = e1578+e1580 && j' = e1579 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1575,e1576 : ( k = e1575 && k' = e1576 && e1576 = e1575 )) and exists ( e1577,e1578 : ( j = e1577 && e1578 = e1577 and exists ( e1579,e1580 : ( e1579 = e1578+e1580 && j' = e1579 && 1 = e1580 )) )) and exists ( e1581,e1582 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1575,e1576 : ( k = e1575 && k' = e1576 && e1576 = e1575 )) and exists ( e1577,e1578 : ( j = e1577 && e1578 = e1577 and exists ( e1579,e1580 : ( e1579 = e1578+e1580 && j' = e1579 && 1 = e1580 )) )) and exists ( e1581,e1582 : ( i = e1581 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1575,e1576 : ( k = e1575 && k' = e1576 && e1576 = e1575 )) and exists ( e1577,e1578 : ( j = e1577 && e1578 = e1577 and exists ( e1579,e1580 : ( e1579 = e1578+e1580 && j' = e1579 && 1 = e1580 )) )) and exists ( e1581,e1582 : ( i = e1581 && i' = e1582 && e1582 = e1581 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1583,e1584 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1583,e1584 : ( k = e1583 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1583,e1584 : ( k = e1583 && k' = e1584 && e1584 = e1583 )) and exists ( e1585,e1586 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1583,e1584 : ( k = e1583 && k' = e1584 && e1584 = e1583 )) and exists ( e1585,e1586 : ( j = e1585 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1583,e1584 : ( k = e1583 && k' = e1584 && e1584 = e1583 )) and exists ( e1585,e1586 : ( j = e1585 and exists ( e1587,e1588 : ( e1587+e1588 = e1586 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1583,e1584 : ( k = e1583 && k' = e1584 && e1584 = e1583 )) and exists ( e1585,e1586 : ( j = e1585 and exists ( e1587,e1588 : ( e1587+e1588 = e1586 && j' = e1587 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1583,e1584 : ( k = e1583 && k' = e1584 && e1584 = e1583 )) and exists ( e1585,e1586 : ( j = e1585 && e1586 = e1585 and exists ( e1587,e1588 : ( e1587+e1588 = e1586 && j' = e1587 && 1 = e1588 )) )) and exists ( e1589,e1590 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1583,e1584 : ( k = e1583 && k' = e1584 && e1584 = e1583 )) and exists ( e1585,e1586 : ( j = e1585 && e1586 = e1585 and exists ( e1587,e1588 : ( e1587+e1588 = e1586 && j' = e1587 && 1 = e1588 )) )) and exists ( e1589,e1590 : ( i = e1589 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1583,e1584 : ( k = e1583 && k' = e1584 && e1584 = e1583 )) and exists ( e1585,e1586 : ( j = e1585 && e1586 = e1585 and exists ( e1587,e1588 : ( e1587+e1588 = e1586 && j' = e1587 && 1 = e1588 )) )) and exists ( e1589,e1590 : ( i = e1589 && i' = e1590 && e1590 = e1589 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1591,e1592 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1591,e1592 : ( k = e1591 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1591,e1592 : ( k = e1591 and exists ( e1593,e1594 : ( e1593+e1594 = e1592 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1591,e1592 : ( k = e1591 and exists ( e1593,e1594 : ( e1593+e1594 = e1592 && k' = e1593 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1591,e1592 : ( k = e1591 && e1592 = e1591 and exists ( e1593,e1594 : ( e1593+e1594 = e1592 && k' = e1593 && 1 = e1594 )) )) and exists ( e1595,e1596 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1591,e1592 : ( k = e1591 && e1592 = e1591 and exists ( e1593,e1594 : ( e1593+e1594 = e1592 && k' = e1593 && 1 = e1594 )) )) and exists ( e1595,e1596 : ( j = e1595 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1591,e1592 : ( k = e1591 && e1592 = e1591 and exists ( e1593,e1594 : ( e1593+e1594 = e1592 && k' = e1593 && 1 = e1594 )) )) and exists ( e1595,e1596 : ( j = e1595 && j' = e1596 && e1596 = e1595 )) and exists ( e1597,e1598 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1591,e1592 : ( k = e1591 && e1592 = e1591 and exists ( e1593,e1594 : ( e1593+e1594 = e1592 && k' = e1593 && 1 = e1594 )) )) and exists ( e1595,e1596 : ( j = e1595 && j' = e1596 && e1596 = e1595 )) and exists ( e1597,e1598 : ( i = e1597 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1591,e1592 : ( k = e1591 && e1592 = e1591 and exists ( e1593,e1594 : ( e1593+e1594 = e1592 && k' = e1593 && 1 = e1594 )) )) and exists ( e1595,e1596 : ( j = e1595 && j' = e1596 && e1596 = e1595 )) and exists ( e1597,e1598 : ( i = e1597 && i' = e1598 && e1598 = e1597 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1599,e1600 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1599,e1600 : ( k = e1599 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1599,e1600 : ( k = e1599 && k' = e1600 && e1600 = e1599 )) and exists ( e1601,e1602 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1599,e1600 : ( k = e1599 && k' = e1600 && e1600 = e1599 )) and exists ( e1601,e1602 : ( j = e1601 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1599,e1600 : ( k = e1599 && k' = e1600 && e1600 = e1599 )) and exists ( e1601,e1602 : ( j = e1601 && j' = e1602 && e1602 = e1601 )) and exists ( e1603,e1604 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1599,e1600 : ( k = e1599 && k' = e1600 && e1600 = e1599 )) and exists ( e1601,e1602 : ( j = e1601 && j' = e1602 && e1602 = e1601 )) and exists ( e1603,e1604 : ( i = e1603 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1599,e1600 : ( k = e1599 && k' = e1600 && e1600 = e1599 )) and exists ( e1601,e1602 : ( j = e1601 && j' = e1602 && e1602 = e1601 )) and exists ( e1603,e1604 : ( i = e1603 and exists ( e1605,e1606 : ( e1605 = e1604+e1606 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1599,e1600 : ( k = e1599 && k' = e1600 && e1600 = e1599 )) and exists ( e1601,e1602 : ( j = e1601 && j' = e1602 && e1602 = e1601 )) and exists ( e1603,e1604 : ( i = e1603 and exists ( e1605,e1606 : ( e1605 = e1604+e1606 && i' = e1605 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1599,e1600 : ( k = e1599 && k' = e1600 && e1600 = e1599 )) and exists ( e1601,e1602 : ( j = e1601 && j' = e1602 && e1602 = e1601 )) and exists ( e1603,e1604 : ( i = e1603 && e1604 = e1603 and exists ( e1605,e1606 : ( e1605 = e1604+e1606 && i' = e1605 && 1 = e1606 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1607,e1608 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1607,e1608 : ( k = e1607 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1607,e1608 : ( k = e1607 && k' = e1608 && e1608 = e1607 )) and exists ( e1609,e1610 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1607,e1608 : ( k = e1607 && k' = e1608 && e1608 = e1607 )) and exists ( e1609,e1610 : ( j = e1609 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1607,e1608 : ( k = e1607 && k' = e1608 && e1608 = e1607 )) and exists ( e1609,e1610 : ( j = e1609 && j' = e1610 && e1610 = e1609 )) and exists ( e1611,e1612 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1607,e1608 : ( k = e1607 && k' = e1608 && e1608 = e1607 )) and exists ( e1609,e1610 : ( j = e1609 && j' = e1610 && e1610 = e1609 )) and exists ( e1611,e1612 : ( i = e1611 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1607,e1608 : ( k = e1607 && k' = e1608 && e1608 = e1607 )) and exists ( e1609,e1610 : ( j = e1609 && j' = e1610 && e1610 = e1609 )) and exists ( e1611,e1612 : ( i = e1611 and exists ( e1613,e1614 : ( e1613+e1614 = e1612 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1607,e1608 : ( k = e1607 && k' = e1608 && e1608 = e1607 )) and exists ( e1609,e1610 : ( j = e1609 && j' = e1610 && e1610 = e1609 )) and exists ( e1611,e1612 : ( i = e1611 and exists ( e1613,e1614 : ( e1613+e1614 = e1612 && i' = e1613 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1607,e1608 : ( k = e1607 && k' = e1608 && e1608 = e1607 )) and exists ( e1609,e1610 : ( j = e1609 && j' = e1610 && e1610 = e1609 )) and exists ( e1611,e1612 : ( i = e1611 && e1612 = e1611 and exists ( e1613,e1614 : ( e1613+e1614 = e1612 && i' = e1613 && 1 = e1614 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1615,e1616 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1615,e1616 : ( k = e1615 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1615,e1616 : ( k = e1615 and exists ( e1617,e1618 : ( e1617 = e1616+e1618 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1615,e1616 : ( k = e1615 and exists ( e1617,e1618 : ( e1617 = e1616+e1618 && k' = e1617 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1615,e1616 : ( k = e1615 && e1616 = e1615 and exists ( e1617,e1618 : ( e1617 = e1616+e1618 && k' = e1617 && 1 = e1618 )) )) and exists ( e1619,e1620 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1615,e1616 : ( k = e1615 && e1616 = e1615 and exists ( e1617,e1618 : ( e1617 = e1616+e1618 && k' = e1617 && 1 = e1618 )) )) and exists ( e1619,e1620 : ( j = e1619 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1615,e1616 : ( k = e1615 && e1616 = e1615 and exists ( e1617,e1618 : ( e1617 = e1616+e1618 && k' = e1617 && 1 = e1618 )) )) and exists ( e1619,e1620 : ( j = e1619 && j' = e1620 && e1620 = e1619 )) and exists ( e1621,e1622 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1615,e1616 : ( k = e1615 && e1616 = e1615 and exists ( e1617,e1618 : ( e1617 = e1616+e1618 && k' = e1617 && 1 = e1618 )) )) and exists ( e1619,e1620 : ( j = e1619 && j' = e1620 && e1620 = e1619 )) and exists ( e1621,e1622 : ( i = e1621 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1615,e1616 : ( k = e1615 && e1616 = e1615 and exists ( e1617,e1618 : ( e1617 = e1616+e1618 && k' = e1617 && 1 = e1618 )) )) and exists ( e1619,e1620 : ( j = e1619 && j' = e1620 && e1620 = e1619 )) and exists ( e1621,e1622 : ( i = e1621 and exists ( e1623,e1624 : ( e1623 = e1622+e1624 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1615,e1616 : ( k = e1615 && e1616 = e1615 and exists ( e1617,e1618 : ( e1617 = e1616+e1618 && k' = e1617 && 1 = e1618 )) )) and exists ( e1619,e1620 : ( j = e1619 && j' = e1620 && e1620 = e1619 )) and exists ( e1621,e1622 : ( i = e1621 and exists ( e1623,e1624 : ( e1623 = e1622+e1624 && i' = e1623 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1615,e1616 : ( k = e1615 && e1616 = e1615 and exists ( e1617,e1618 : ( e1617 = e1616+e1618 && k' = e1617 && 1 = e1618 )) )) and exists ( e1619,e1620 : ( j = e1619 && j' = e1620 && e1620 = e1619 )) and exists ( e1621,e1622 : ( i = e1621 && e1622 = e1621 and exists ( e1623,e1624 : ( e1623 = e1622+e1624 && i' = e1623 && 1 = e1624 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1625,e1626 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1625,e1626 : ( k = e1625 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1625,e1626 : ( k = e1625 && k' = e1626 && e1626 = e1625 )) and exists ( e1627,e1628 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1625,e1626 : ( k = e1625 && k' = e1626 && e1626 = e1625 )) and exists ( e1627,e1628 : ( j = e1627 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1625,e1626 : ( k = e1625 && k' = e1626 && e1626 = e1625 )) and exists ( e1627,e1628 : ( j = e1627 and exists ( e1629,e1630 : ( e1629 = e1628+e1630 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1625,e1626 : ( k = e1625 && k' = e1626 && e1626 = e1625 )) and exists ( e1627,e1628 : ( j = e1627 and exists ( e1629,e1630 : ( e1629 = e1628+e1630 && j' = e1629 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1625,e1626 : ( k = e1625 && k' = e1626 && e1626 = e1625 )) and exists ( e1627,e1628 : ( j = e1627 && e1628 = e1627 and exists ( e1629,e1630 : ( e1629 = e1628+e1630 && j' = e1629 && 1 = e1630 )) )) and exists ( e1631,e1632 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1625,e1626 : ( k = e1625 && k' = e1626 && e1626 = e1625 )) and exists ( e1627,e1628 : ( j = e1627 && e1628 = e1627 and exists ( e1629,e1630 : ( e1629 = e1628+e1630 && j' = e1629 && 1 = e1630 )) )) and exists ( e1631,e1632 : ( i = e1631 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1625,e1626 : ( k = e1625 && k' = e1626 && e1626 = e1625 )) and exists ( e1627,e1628 : ( j = e1627 && e1628 = e1627 and exists ( e1629,e1630 : ( e1629 = e1628+e1630 && j' = e1629 && 1 = e1630 )) )) and exists ( e1631,e1632 : ( i = e1631 and exists ( e1633,e1634 : ( e1633 = e1632+e1634 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1625,e1626 : ( k = e1625 && k' = e1626 && e1626 = e1625 )) and exists ( e1627,e1628 : ( j = e1627 && e1628 = e1627 and exists ( e1629,e1630 : ( e1629 = e1628+e1630 && j' = e1629 && 1 = e1630 )) )) and exists ( e1631,e1632 : ( i = e1631 and exists ( e1633,e1634 : ( e1633 = e1632+e1634 && i' = e1633 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1625,e1626 : ( k = e1625 && k' = e1626 && e1626 = e1625 )) and exists ( e1627,e1628 : ( j = e1627 && e1628 = e1627 and exists ( e1629,e1630 : ( e1629 = e1628+e1630 && j' = e1629 && 1 = e1630 )) )) and exists ( e1631,e1632 : ( i = e1631 && e1632 = e1631 and exists ( e1633,e1634 : ( e1633 = e1632+e1634 && i' = e1633 && 1 = e1634 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1635,e1636 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1635,e1636 : ( k = e1635 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1635,e1636 : ( k = e1635 && k' = e1636 && e1636 = e1635 )) and exists ( e1637,e1638 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1635,e1636 : ( k = e1635 && k' = e1636 && e1636 = e1635 )) and exists ( e1637,e1638 : ( j = e1637 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1635,e1636 : ( k = e1635 && k' = e1636 && e1636 = e1635 )) and exists ( e1637,e1638 : ( j = e1637 and exists ( e1639,e1640 : ( e1639+e1640 = e1638 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1635,e1636 : ( k = e1635 && k' = e1636 && e1636 = e1635 )) and exists ( e1637,e1638 : ( j = e1637 and exists ( e1639,e1640 : ( e1639+e1640 = e1638 && j' = e1639 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1635,e1636 : ( k = e1635 && k' = e1636 && e1636 = e1635 )) and exists ( e1637,e1638 : ( j = e1637 && e1638 = e1637 and exists ( e1639,e1640 : ( e1639+e1640 = e1638 && j' = e1639 && 1 = e1640 )) )) and exists ( e1641,e1642 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1635,e1636 : ( k = e1635 && k' = e1636 && e1636 = e1635 )) and exists ( e1637,e1638 : ( j = e1637 && e1638 = e1637 and exists ( e1639,e1640 : ( e1639+e1640 = e1638 && j' = e1639 && 1 = e1640 )) )) and exists ( e1641,e1642 : ( i = e1641 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1635,e1636 : ( k = e1635 && k' = e1636 && e1636 = e1635 )) and exists ( e1637,e1638 : ( j = e1637 && e1638 = e1637 and exists ( e1639,e1640 : ( e1639+e1640 = e1638 && j' = e1639 && 1 = e1640 )) )) and exists ( e1641,e1642 : ( i = e1641 and exists ( e1643,e1644 : ( e1643 = e1642+e1644 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1635,e1636 : ( k = e1635 && k' = e1636 && e1636 = e1635 )) and exists ( e1637,e1638 : ( j = e1637 && e1638 = e1637 and exists ( e1639,e1640 : ( e1639+e1640 = e1638 && j' = e1639 && 1 = e1640 )) )) and exists ( e1641,e1642 : ( i = e1641 and exists ( e1643,e1644 : ( e1643 = e1642+e1644 && i' = e1643 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1635,e1636 : ( k = e1635 && k' = e1636 && e1636 = e1635 )) and exists ( e1637,e1638 : ( j = e1637 && e1638 = e1637 and exists ( e1639,e1640 : ( e1639+e1640 = e1638 && j' = e1639 && 1 = e1640 )) )) and exists ( e1641,e1642 : ( i = e1641 && e1642 = e1641 and exists ( e1643,e1644 : ( e1643 = e1642+e1644 && i' = e1643 && 1 = e1644 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1645,e1646 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1645,e1646 : ( k = e1645 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1645,e1646 : ( k = e1645 and exists ( e1647,e1648 : ( e1647+e1648 = e1646 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1645,e1646 : ( k = e1645 and exists ( e1647,e1648 : ( e1647+e1648 = e1646 && k' = e1647 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1645,e1646 : ( k = e1645 && e1646 = e1645 and exists ( e1647,e1648 : ( e1647+e1648 = e1646 && k' = e1647 && 1 = e1648 )) )) and exists ( e1649,e1650 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1645,e1646 : ( k = e1645 && e1646 = e1645 and exists ( e1647,e1648 : ( e1647+e1648 = e1646 && k' = e1647 && 1 = e1648 )) )) and exists ( e1649,e1650 : ( j = e1649 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1645,e1646 : ( k = e1645 && e1646 = e1645 and exists ( e1647,e1648 : ( e1647+e1648 = e1646 && k' = e1647 && 1 = e1648 )) )) and exists ( e1649,e1650 : ( j = e1649 && j' = e1650 && e1650 = e1649 )) and exists ( e1651,e1652 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1645,e1646 : ( k = e1645 && e1646 = e1645 and exists ( e1647,e1648 : ( e1647+e1648 = e1646 && k' = e1647 && 1 = e1648 )) )) and exists ( e1649,e1650 : ( j = e1649 && j' = e1650 && e1650 = e1649 )) and exists ( e1651,e1652 : ( i = e1651 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1645,e1646 : ( k = e1645 && e1646 = e1645 and exists ( e1647,e1648 : ( e1647+e1648 = e1646 && k' = e1647 && 1 = e1648 )) )) and exists ( e1649,e1650 : ( j = e1649 && j' = e1650 && e1650 = e1649 )) and exists ( e1651,e1652 : ( i = e1651 and exists ( e1653,e1654 : ( e1653 = e1652+e1654 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1645,e1646 : ( k = e1645 && e1646 = e1645 and exists ( e1647,e1648 : ( e1647+e1648 = e1646 && k' = e1647 && 1 = e1648 )) )) and exists ( e1649,e1650 : ( j = e1649 && j' = e1650 && e1650 = e1649 )) and exists ( e1651,e1652 : ( i = e1651 and exists ( e1653,e1654 : ( e1653 = e1652+e1654 && i' = e1653 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1645,e1646 : ( k = e1645 && e1646 = e1645 and exists ( e1647,e1648 : ( e1647+e1648 = e1646 && k' = e1647 && 1 = e1648 )) )) and exists ( e1649,e1650 : ( j = e1649 && j' = e1650 && e1650 = e1649 )) and exists ( e1651,e1652 : ( i = e1651 && e1652 = e1651 and exists ( e1653,e1654 : ( e1653 = e1652+e1654 && i' = e1653 && 1 = e1654 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1655,e1656 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1655,e1656 : ( k = e1655 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1655,e1656 : ( k = e1655 and exists ( e1657,e1658 : ( e1657 = e1656+e1658 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1655,e1656 : ( k = e1655 and exists ( e1657,e1658 : ( e1657 = e1656+e1658 && k' = e1657 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1655,e1656 : ( k = e1655 && e1656 = e1655 and exists ( e1657,e1658 : ( e1657 = e1656+e1658 && k' = e1657 && 1 = e1658 )) )) and exists ( e1659,e1660 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1655,e1656 : ( k = e1655 && e1656 = e1655 and exists ( e1657,e1658 : ( e1657 = e1656+e1658 && k' = e1657 && 1 = e1658 )) )) and exists ( e1659,e1660 : ( j = e1659 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1655,e1656 : ( k = e1655 && e1656 = e1655 and exists ( e1657,e1658 : ( e1657 = e1656+e1658 && k' = e1657 && 1 = e1658 )) )) and exists ( e1659,e1660 : ( j = e1659 and exists ( e1661,e1662 : ( e1661 = e1660+e1662 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1655,e1656 : ( k = e1655 && e1656 = e1655 and exists ( e1657,e1658 : ( e1657 = e1656+e1658 && k' = e1657 && 1 = e1658 )) )) and exists ( e1659,e1660 : ( j = e1659 and exists ( e1661,e1662 : ( e1661 = e1660+e1662 && j' = e1661 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1655,e1656 : ( k = e1655 && e1656 = e1655 and exists ( e1657,e1658 : ( e1657 = e1656+e1658 && k' = e1657 && 1 = e1658 )) )) and exists ( e1659,e1660 : ( j = e1659 && e1660 = e1659 and exists ( e1661,e1662 : ( e1661 = e1660+e1662 && j' = e1661 && 1 = e1662 )) )) and exists ( e1663,e1664 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1655,e1656 : ( k = e1655 && e1656 = e1655 and exists ( e1657,e1658 : ( e1657 = e1656+e1658 && k' = e1657 && 1 = e1658 )) )) and exists ( e1659,e1660 : ( j = e1659 && e1660 = e1659 and exists ( e1661,e1662 : ( e1661 = e1660+e1662 && j' = e1661 && 1 = e1662 )) )) and exists ( e1663,e1664 : ( i = e1663 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1655,e1656 : ( k = e1655 && e1656 = e1655 and exists ( e1657,e1658 : ( e1657 = e1656+e1658 && k' = e1657 && 1 = e1658 )) )) and exists ( e1659,e1660 : ( j = e1659 && e1660 = e1659 and exists ( e1661,e1662 : ( e1661 = e1660+e1662 && j' = e1661 && 1 = e1662 )) )) and exists ( e1663,e1664 : ( i = e1663 && i' = e1664 && e1664 = e1663 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1665,e1666 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1665,e1666 : ( k = e1665 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1665,e1666 : ( k = e1665 and exists ( e1667,e1668 : ( e1667 = e1666+e1668 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1665,e1666 : ( k = e1665 and exists ( e1667,e1668 : ( e1667 = e1666+e1668 && k' = e1667 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1665,e1666 : ( k = e1665 && e1666 = e1665 and exists ( e1667,e1668 : ( e1667 = e1666+e1668 && k' = e1667 && 1 = e1668 )) )) and exists ( e1669,e1670 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1665,e1666 : ( k = e1665 && e1666 = e1665 and exists ( e1667,e1668 : ( e1667 = e1666+e1668 && k' = e1667 && 1 = e1668 )) )) and exists ( e1669,e1670 : ( j = e1669 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1665,e1666 : ( k = e1665 && e1666 = e1665 and exists ( e1667,e1668 : ( e1667 = e1666+e1668 && k' = e1667 && 1 = e1668 )) )) and exists ( e1669,e1670 : ( j = e1669 and exists ( e1671,e1672 : ( e1671+e1672 = e1670 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1665,e1666 : ( k = e1665 && e1666 = e1665 and exists ( e1667,e1668 : ( e1667 = e1666+e1668 && k' = e1667 && 1 = e1668 )) )) and exists ( e1669,e1670 : ( j = e1669 and exists ( e1671,e1672 : ( e1671+e1672 = e1670 && j' = e1671 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1665,e1666 : ( k = e1665 && e1666 = e1665 and exists ( e1667,e1668 : ( e1667 = e1666+e1668 && k' = e1667 && 1 = e1668 )) )) and exists ( e1669,e1670 : ( j = e1669 && e1670 = e1669 and exists ( e1671,e1672 : ( e1671+e1672 = e1670 && j' = e1671 && 1 = e1672 )) )) and exists ( e1673,e1674 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1665,e1666 : ( k = e1665 && e1666 = e1665 and exists ( e1667,e1668 : ( e1667 = e1666+e1668 && k' = e1667 && 1 = e1668 )) )) and exists ( e1669,e1670 : ( j = e1669 && e1670 = e1669 and exists ( e1671,e1672 : ( e1671+e1672 = e1670 && j' = e1671 && 1 = e1672 )) )) and exists ( e1673,e1674 : ( i = e1673 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1665,e1666 : ( k = e1665 && e1666 = e1665 and exists ( e1667,e1668 : ( e1667 = e1666+e1668 && k' = e1667 && 1 = e1668 )) )) and exists ( e1669,e1670 : ( j = e1669 && e1670 = e1669 and exists ( e1671,e1672 : ( e1671+e1672 = e1670 && j' = e1671 && 1 = e1672 )) )) and exists ( e1673,e1674 : ( i = e1673 && i' = e1674 && e1674 = e1673 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1675,e1676 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1675,e1676 : ( k = e1675 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1675,e1676 : ( k = e1675 and exists ( e1677,e1678 : ( e1677+e1678 = e1676 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1675,e1676 : ( k = e1675 and exists ( e1677,e1678 : ( e1677+e1678 = e1676 && k' = e1677 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1675,e1676 : ( k = e1675 && e1676 = e1675 and exists ( e1677,e1678 : ( e1677+e1678 = e1676 && k' = e1677 && 1 = e1678 )) )) and exists ( e1679,e1680 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1675,e1676 : ( k = e1675 && e1676 = e1675 and exists ( e1677,e1678 : ( e1677+e1678 = e1676 && k' = e1677 && 1 = e1678 )) )) and exists ( e1679,e1680 : ( j = e1679 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1675,e1676 : ( k = e1675 && e1676 = e1675 and exists ( e1677,e1678 : ( e1677+e1678 = e1676 && k' = e1677 && 1 = e1678 )) )) and exists ( e1679,e1680 : ( j = e1679 and exists ( e1681,e1682 : ( e1681 = e1680+e1682 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1675,e1676 : ( k = e1675 && e1676 = e1675 and exists ( e1677,e1678 : ( e1677+e1678 = e1676 && k' = e1677 && 1 = e1678 )) )) and exists ( e1679,e1680 : ( j = e1679 and exists ( e1681,e1682 : ( e1681 = e1680+e1682 && j' = e1681 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1675,e1676 : ( k = e1675 && e1676 = e1675 and exists ( e1677,e1678 : ( e1677+e1678 = e1676 && k' = e1677 && 1 = e1678 )) )) and exists ( e1679,e1680 : ( j = e1679 && e1680 = e1679 and exists ( e1681,e1682 : ( e1681 = e1680+e1682 && j' = e1681 && 1 = e1682 )) )) and exists ( e1683,e1684 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1675,e1676 : ( k = e1675 && e1676 = e1675 and exists ( e1677,e1678 : ( e1677+e1678 = e1676 && k' = e1677 && 1 = e1678 )) )) and exists ( e1679,e1680 : ( j = e1679 && e1680 = e1679 and exists ( e1681,e1682 : ( e1681 = e1680+e1682 && j' = e1681 && 1 = e1682 )) )) and exists ( e1683,e1684 : ( i = e1683 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1675,e1676 : ( k = e1675 && e1676 = e1675 and exists ( e1677,e1678 : ( e1677+e1678 = e1676 && k' = e1677 && 1 = e1678 )) )) and exists ( e1679,e1680 : ( j = e1679 && e1680 = e1679 and exists ( e1681,e1682 : ( e1681 = e1680+e1682 && j' = e1681 && 1 = e1682 )) )) and exists ( e1683,e1684 : ( i = e1683 && i' = e1684 && e1684 = e1683 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1685,e1686 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1685,e1686 : ( k = e1685 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1685,e1686 : ( k = e1685 and exists ( e1687,e1688 : ( e1687+e1688 = e1686 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1685,e1686 : ( k = e1685 and exists ( e1687,e1688 : ( e1687+e1688 = e1686 && k' = e1687 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1685,e1686 : ( k = e1685 && e1686 = e1685 and exists ( e1687,e1688 : ( e1687+e1688 = e1686 && k' = e1687 && 1 = e1688 )) )) and exists ( e1689,e1690 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1685,e1686 : ( k = e1685 && e1686 = e1685 and exists ( e1687,e1688 : ( e1687+e1688 = e1686 && k' = e1687 && 1 = e1688 )) )) and exists ( e1689,e1690 : ( j = e1689 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1685,e1686 : ( k = e1685 && e1686 = e1685 and exists ( e1687,e1688 : ( e1687+e1688 = e1686 && k' = e1687 && 1 = e1688 )) )) and exists ( e1689,e1690 : ( j = e1689 and exists ( e1691,e1692 : ( e1691+e1692 = e1690 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1685,e1686 : ( k = e1685 && e1686 = e1685 and exists ( e1687,e1688 : ( e1687+e1688 = e1686 && k' = e1687 && 1 = e1688 )) )) and exists ( e1689,e1690 : ( j = e1689 and exists ( e1691,e1692 : ( e1691+e1692 = e1690 && j' = e1691 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1685,e1686 : ( k = e1685 && e1686 = e1685 and exists ( e1687,e1688 : ( e1687+e1688 = e1686 && k' = e1687 && 1 = e1688 )) )) and exists ( e1689,e1690 : ( j = e1689 && e1690 = e1689 and exists ( e1691,e1692 : ( e1691+e1692 = e1690 && j' = e1691 && 1 = e1692 )) )) and exists ( e1693,e1694 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1685,e1686 : ( k = e1685 && e1686 = e1685 and exists ( e1687,e1688 : ( e1687+e1688 = e1686 && k' = e1687 && 1 = e1688 )) )) and exists ( e1689,e1690 : ( j = e1689 && e1690 = e1689 and exists ( e1691,e1692 : ( e1691+e1692 = e1690 && j' = e1691 && 1 = e1692 )) )) and exists ( e1693,e1694 : ( i = e1693 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1685,e1686 : ( k = e1685 && e1686 = e1685 and exists ( e1687,e1688 : ( e1687+e1688 = e1686 && k' = e1687 && 1 = e1688 )) )) and exists ( e1689,e1690 : ( j = e1689 && e1690 = e1689 and exists ( e1691,e1692 : ( e1691+e1692 = e1690 && j' = e1691 && 1 = e1692 )) )) and exists ( e1693,e1694 : ( i = e1693 && i' = e1694 && e1694 = e1693 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1695,e1696 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1695,e1696 : ( k = e1695 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1695,e1696 : ( k = e1695 and exists ( e1697,e1698 : ( e1697 = e1696+e1698 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1695,e1696 : ( k = e1695 and exists ( e1697,e1698 : ( e1697 = e1696+e1698 && k' = e1697 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1695,e1696 : ( k = e1695 && e1696 = e1695 and exists ( e1697,e1698 : ( e1697 = e1696+e1698 && k' = e1697 && 1 = e1698 )) )) and exists ( e1699,e1700 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1695,e1696 : ( k = e1695 && e1696 = e1695 and exists ( e1697,e1698 : ( e1697 = e1696+e1698 && k' = e1697 && 1 = e1698 )) )) and exists ( e1699,e1700 : ( j = e1699 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1695,e1696 : ( k = e1695 && e1696 = e1695 and exists ( e1697,e1698 : ( e1697 = e1696+e1698 && k' = e1697 && 1 = e1698 )) )) and exists ( e1699,e1700 : ( j = e1699 && j' = e1700 && e1700 = e1699 )) and exists ( e1701,e1702 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1695,e1696 : ( k = e1695 && e1696 = e1695 and exists ( e1697,e1698 : ( e1697 = e1696+e1698 && k' = e1697 && 1 = e1698 )) )) and exists ( e1699,e1700 : ( j = e1699 && j' = e1700 && e1700 = e1699 )) and exists ( e1701,e1702 : ( i = e1701 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1695,e1696 : ( k = e1695 && e1696 = e1695 and exists ( e1697,e1698 : ( e1697 = e1696+e1698 && k' = e1697 && 1 = e1698 )) )) and exists ( e1699,e1700 : ( j = e1699 && j' = e1700 && e1700 = e1699 )) and exists ( e1701,e1702 : ( i = e1701 and exists ( e1703,e1704 : ( e1703+e1704 = e1702 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1695,e1696 : ( k = e1695 && e1696 = e1695 and exists ( e1697,e1698 : ( e1697 = e1696+e1698 && k' = e1697 && 1 = e1698 )) )) and exists ( e1699,e1700 : ( j = e1699 && j' = e1700 && e1700 = e1699 )) and exists ( e1701,e1702 : ( i = e1701 and exists ( e1703,e1704 : ( e1703+e1704 = e1702 && i' = e1703 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1695,e1696 : ( k = e1695 && e1696 = e1695 and exists ( e1697,e1698 : ( e1697 = e1696+e1698 && k' = e1697 && 1 = e1698 )) )) and exists ( e1699,e1700 : ( j = e1699 && j' = e1700 && e1700 = e1699 )) and exists ( e1701,e1702 : ( i = e1701 && e1702 = e1701 and exists ( e1703,e1704 : ( e1703+e1704 = e1702 && i' = e1703 && 1 = e1704 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1705,e1706 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1705,e1706 : ( k = e1705 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1705,e1706 : ( k = e1705 && k' = e1706 && e1706 = e1705 )) and exists ( e1707,e1708 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1705,e1706 : ( k = e1705 && k' = e1706 && e1706 = e1705 )) and exists ( e1707,e1708 : ( j = e1707 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1705,e1706 : ( k = e1705 && k' = e1706 && e1706 = e1705 )) and exists ( e1707,e1708 : ( j = e1707 and exists ( e1709,e1710 : ( e1709 = e1708+e1710 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1705,e1706 : ( k = e1705 && k' = e1706 && e1706 = e1705 )) and exists ( e1707,e1708 : ( j = e1707 and exists ( e1709,e1710 : ( e1709 = e1708+e1710 && j' = e1709 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1705,e1706 : ( k = e1705 && k' = e1706 && e1706 = e1705 )) and exists ( e1707,e1708 : ( j = e1707 && e1708 = e1707 and exists ( e1709,e1710 : ( e1709 = e1708+e1710 && j' = e1709 && 1 = e1710 )) )) and exists ( e1711,e1712 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1705,e1706 : ( k = e1705 && k' = e1706 && e1706 = e1705 )) and exists ( e1707,e1708 : ( j = e1707 && e1708 = e1707 and exists ( e1709,e1710 : ( e1709 = e1708+e1710 && j' = e1709 && 1 = e1710 )) )) and exists ( e1711,e1712 : ( i = e1711 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1705,e1706 : ( k = e1705 && k' = e1706 && e1706 = e1705 )) and exists ( e1707,e1708 : ( j = e1707 && e1708 = e1707 and exists ( e1709,e1710 : ( e1709 = e1708+e1710 && j' = e1709 && 1 = e1710 )) )) and exists ( e1711,e1712 : ( i = e1711 and exists ( e1713,e1714 : ( e1713+e1714 = e1712 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1705,e1706 : ( k = e1705 && k' = e1706 && e1706 = e1705 )) and exists ( e1707,e1708 : ( j = e1707 && e1708 = e1707 and exists ( e1709,e1710 : ( e1709 = e1708+e1710 && j' = e1709 && 1 = e1710 )) )) and exists ( e1711,e1712 : ( i = e1711 and exists ( e1713,e1714 : ( e1713+e1714 = e1712 && i' = e1713 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1705,e1706 : ( k = e1705 && k' = e1706 && e1706 = e1705 )) and exists ( e1707,e1708 : ( j = e1707 && e1708 = e1707 and exists ( e1709,e1710 : ( e1709 = e1708+e1710 && j' = e1709 && 1 = e1710 )) )) and exists ( e1711,e1712 : ( i = e1711 && e1712 = e1711 and exists ( e1713,e1714 : ( e1713+e1714 = e1712 && i' = e1713 && 1 = e1714 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1715,e1716 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1715,e1716 : ( k = e1715 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1715,e1716 : ( k = e1715 && k' = e1716 && e1716 = e1715 )) and exists ( e1717,e1718 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1715,e1716 : ( k = e1715 && k' = e1716 && e1716 = e1715 )) and exists ( e1717,e1718 : ( j = e1717 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1715,e1716 : ( k = e1715 && k' = e1716 && e1716 = e1715 )) and exists ( e1717,e1718 : ( j = e1717 and exists ( e1719,e1720 : ( e1719+e1720 = e1718 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1715,e1716 : ( k = e1715 && k' = e1716 && e1716 = e1715 )) and exists ( e1717,e1718 : ( j = e1717 and exists ( e1719,e1720 : ( e1719+e1720 = e1718 && j' = e1719 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1715,e1716 : ( k = e1715 && k' = e1716 && e1716 = e1715 )) and exists ( e1717,e1718 : ( j = e1717 && e1718 = e1717 and exists ( e1719,e1720 : ( e1719+e1720 = e1718 && j' = e1719 && 1 = e1720 )) )) and exists ( e1721,e1722 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1715,e1716 : ( k = e1715 && k' = e1716 && e1716 = e1715 )) and exists ( e1717,e1718 : ( j = e1717 && e1718 = e1717 and exists ( e1719,e1720 : ( e1719+e1720 = e1718 && j' = e1719 && 1 = e1720 )) )) and exists ( e1721,e1722 : ( i = e1721 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1715,e1716 : ( k = e1715 && k' = e1716 && e1716 = e1715 )) and exists ( e1717,e1718 : ( j = e1717 && e1718 = e1717 and exists ( e1719,e1720 : ( e1719+e1720 = e1718 && j' = e1719 && 1 = e1720 )) )) and exists ( e1721,e1722 : ( i = e1721 and exists ( e1723,e1724 : ( e1723+e1724 = e1722 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1715,e1716 : ( k = e1715 && k' = e1716 && e1716 = e1715 )) and exists ( e1717,e1718 : ( j = e1717 && e1718 = e1717 and exists ( e1719,e1720 : ( e1719+e1720 = e1718 && j' = e1719 && 1 = e1720 )) )) and exists ( e1721,e1722 : ( i = e1721 and exists ( e1723,e1724 : ( e1723+e1724 = e1722 && i' = e1723 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1715,e1716 : ( k = e1715 && k' = e1716 && e1716 = e1715 )) and exists ( e1717,e1718 : ( j = e1717 && e1718 = e1717 and exists ( e1719,e1720 : ( e1719+e1720 = e1718 && j' = e1719 && 1 = e1720 )) )) and exists ( e1721,e1722 : ( i = e1721 && e1722 = e1721 and exists ( e1723,e1724 : ( e1723+e1724 = e1722 && i' = e1723 && 1 = e1724 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1725,e1726 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1725,e1726 : ( k = e1725 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1725,e1726 : ( k = e1725 and exists ( e1727,e1728 : ( e1727+e1728 = e1726 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1725,e1726 : ( k = e1725 and exists ( e1727,e1728 : ( e1727+e1728 = e1726 && k' = e1727 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1725,e1726 : ( k = e1725 && e1726 = e1725 and exists ( e1727,e1728 : ( e1727+e1728 = e1726 && k' = e1727 && 1 = e1728 )) )) and exists ( e1729,e1730 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1725,e1726 : ( k = e1725 && e1726 = e1725 and exists ( e1727,e1728 : ( e1727+e1728 = e1726 && k' = e1727 && 1 = e1728 )) )) and exists ( e1729,e1730 : ( j = e1729 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1725,e1726 : ( k = e1725 && e1726 = e1725 and exists ( e1727,e1728 : ( e1727+e1728 = e1726 && k' = e1727 && 1 = e1728 )) )) and exists ( e1729,e1730 : ( j = e1729 && j' = e1730 && e1730 = e1729 )) and exists ( e1731,e1732 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1725,e1726 : ( k = e1725 && e1726 = e1725 and exists ( e1727,e1728 : ( e1727+e1728 = e1726 && k' = e1727 && 1 = e1728 )) )) and exists ( e1729,e1730 : ( j = e1729 && j' = e1730 && e1730 = e1729 )) and exists ( e1731,e1732 : ( i = e1731 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1725,e1726 : ( k = e1725 && e1726 = e1725 and exists ( e1727,e1728 : ( e1727+e1728 = e1726 && k' = e1727 && 1 = e1728 )) )) and exists ( e1729,e1730 : ( j = e1729 && j' = e1730 && e1730 = e1729 )) and exists ( e1731,e1732 : ( i = e1731 and exists ( e1733,e1734 : ( e1733+e1734 = e1732 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1725,e1726 : ( k = e1725 && e1726 = e1725 and exists ( e1727,e1728 : ( e1727+e1728 = e1726 && k' = e1727 && 1 = e1728 )) )) and exists ( e1729,e1730 : ( j = e1729 && j' = e1730 && e1730 = e1729 )) and exists ( e1731,e1732 : ( i = e1731 and exists ( e1733,e1734 : ( e1733+e1734 = e1732 && i' = e1733 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1725,e1726 : ( k = e1725 && e1726 = e1725 and exists ( e1727,e1728 : ( e1727+e1728 = e1726 && k' = e1727 && 1 = e1728 )) )) and exists ( e1729,e1730 : ( j = e1729 && j' = e1730 && e1730 = e1729 )) and exists ( e1731,e1732 : ( i = e1731 && e1732 = e1731 and exists ( e1733,e1734 : ( e1733+e1734 = e1732 && i' = e1733 && 1 = e1734 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( k = e1735 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( k = e1735 and exists ( e1737,e1738 : ( e1737 = e1736+e1738 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( k = e1735 and exists ( e1737,e1738 : ( e1737 = e1736+e1738 && k' = e1737 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( k = e1735 && e1736 = e1735 and exists ( e1737,e1738 : ( e1737 = e1736+e1738 && k' = e1737 && 1 = e1738 )) )) and exists ( e1739,e1740 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( k = e1735 && e1736 = e1735 and exists ( e1737,e1738 : ( e1737 = e1736+e1738 && k' = e1737 && 1 = e1738 )) )) and exists ( e1739,e1740 : ( j = e1739 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( k = e1735 && e1736 = e1735 and exists ( e1737,e1738 : ( e1737 = e1736+e1738 && k' = e1737 && 1 = e1738 )) )) and exists ( e1739,e1740 : ( j = e1739 and exists ( e1741,e1742 : ( e1741 = e1740+e1742 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( k = e1735 && e1736 = e1735 and exists ( e1737,e1738 : ( e1737 = e1736+e1738 && k' = e1737 && 1 = e1738 )) )) and exists ( e1739,e1740 : ( j = e1739 and exists ( e1741,e1742 : ( e1741 = e1740+e1742 && j' = e1741 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( k = e1735 && e1736 = e1735 and exists ( e1737,e1738 : ( e1737 = e1736+e1738 && k' = e1737 && 1 = e1738 )) )) and exists ( e1739,e1740 : ( j = e1739 && e1740 = e1739 and exists ( e1741,e1742 : ( e1741 = e1740+e1742 && j' = e1741 && 1 = e1742 )) )) and exists ( e1743,e1744 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( k = e1735 && e1736 = e1735 and exists ( e1737,e1738 : ( e1737 = e1736+e1738 && k' = e1737 && 1 = e1738 )) )) and exists ( e1739,e1740 : ( j = e1739 && e1740 = e1739 and exists ( e1741,e1742 : ( e1741 = e1740+e1742 && j' = e1741 && 1 = e1742 )) )) and exists ( e1743,e1744 : ( i = e1743 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( k = e1735 && e1736 = e1735 and exists ( e1737,e1738 : ( e1737 = e1736+e1738 && k' = e1737 && 1 = e1738 )) )) and exists ( e1739,e1740 : ( j = e1739 && e1740 = e1739 and exists ( e1741,e1742 : ( e1741 = e1740+e1742 && j' = e1741 && 1 = e1742 )) )) and exists ( e1743,e1744 : ( i = e1743 and exists ( e1745,e1746 : ( e1745 = e1744+e1746 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( k = e1735 && e1736 = e1735 and exists ( e1737,e1738 : ( e1737 = e1736+e1738 && k' = e1737 && 1 = e1738 )) )) and exists ( e1739,e1740 : ( j = e1739 && e1740 = e1739 and exists ( e1741,e1742 : ( e1741 = e1740+e1742 && j' = e1741 && 1 = e1742 )) )) and exists ( e1743,e1744 : ( i = e1743 and exists ( e1745,e1746 : ( e1745 = e1744+e1746 && i' = e1745 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1735,e1736 : ( k = e1735 && e1736 = e1735 and exists ( e1737,e1738 : ( e1737 = e1736+e1738 && k' = e1737 && 1 = e1738 )) )) and exists ( e1739,e1740 : ( j = e1739 && e1740 = e1739 and exists ( e1741,e1742 : ( e1741 = e1740+e1742 && j' = e1741 && 1 = e1742 )) )) and exists ( e1743,e1744 : ( i = e1743 && e1744 = e1743 and exists ( e1745,e1746 : ( e1745 = e1744+e1746 && i' = e1745 && 1 = e1746 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( k = e1747 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( k = e1747 and exists ( e1749,e1750 : ( e1749 = e1748+e1750 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( k = e1747 and exists ( e1749,e1750 : ( e1749 = e1748+e1750 && k' = e1749 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( k = e1747 && e1748 = e1747 and exists ( e1749,e1750 : ( e1749 = e1748+e1750 && k' = e1749 && 1 = e1750 )) )) and exists ( e1751,e1752 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( k = e1747 && e1748 = e1747 and exists ( e1749,e1750 : ( e1749 = e1748+e1750 && k' = e1749 && 1 = e1750 )) )) and exists ( e1751,e1752 : ( j = e1751 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( k = e1747 && e1748 = e1747 and exists ( e1749,e1750 : ( e1749 = e1748+e1750 && k' = e1749 && 1 = e1750 )) )) and exists ( e1751,e1752 : ( j = e1751 and exists ( e1753,e1754 : ( e1753+e1754 = e1752 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( k = e1747 && e1748 = e1747 and exists ( e1749,e1750 : ( e1749 = e1748+e1750 && k' = e1749 && 1 = e1750 )) )) and exists ( e1751,e1752 : ( j = e1751 and exists ( e1753,e1754 : ( e1753+e1754 = e1752 && j' = e1753 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( k = e1747 && e1748 = e1747 and exists ( e1749,e1750 : ( e1749 = e1748+e1750 && k' = e1749 && 1 = e1750 )) )) and exists ( e1751,e1752 : ( j = e1751 && e1752 = e1751 and exists ( e1753,e1754 : ( e1753+e1754 = e1752 && j' = e1753 && 1 = e1754 )) )) and exists ( e1755,e1756 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( k = e1747 && e1748 = e1747 and exists ( e1749,e1750 : ( e1749 = e1748+e1750 && k' = e1749 && 1 = e1750 )) )) and exists ( e1751,e1752 : ( j = e1751 && e1752 = e1751 and exists ( e1753,e1754 : ( e1753+e1754 = e1752 && j' = e1753 && 1 = e1754 )) )) and exists ( e1755,e1756 : ( i = e1755 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( k = e1747 && e1748 = e1747 and exists ( e1749,e1750 : ( e1749 = e1748+e1750 && k' = e1749 && 1 = e1750 )) )) and exists ( e1751,e1752 : ( j = e1751 && e1752 = e1751 and exists ( e1753,e1754 : ( e1753+e1754 = e1752 && j' = e1753 && 1 = e1754 )) )) and exists ( e1755,e1756 : ( i = e1755 and exists ( e1757,e1758 : ( e1757 = e1756+e1758 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( k = e1747 && e1748 = e1747 and exists ( e1749,e1750 : ( e1749 = e1748+e1750 && k' = e1749 && 1 = e1750 )) )) and exists ( e1751,e1752 : ( j = e1751 && e1752 = e1751 and exists ( e1753,e1754 : ( e1753+e1754 = e1752 && j' = e1753 && 1 = e1754 )) )) and exists ( e1755,e1756 : ( i = e1755 and exists ( e1757,e1758 : ( e1757 = e1756+e1758 && i' = e1757 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1747,e1748 : ( k = e1747 && e1748 = e1747 and exists ( e1749,e1750 : ( e1749 = e1748+e1750 && k' = e1749 && 1 = e1750 )) )) and exists ( e1751,e1752 : ( j = e1751 && e1752 = e1751 and exists ( e1753,e1754 : ( e1753+e1754 = e1752 && j' = e1753 && 1 = e1754 )) )) and exists ( e1755,e1756 : ( i = e1755 && e1756 = e1755 and exists ( e1757,e1758 : ( e1757 = e1756+e1758 && i' = e1757 && 1 = e1758 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( k = e1759 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( k = e1759 and exists ( e1761,e1762 : ( e1761+e1762 = e1760 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( k = e1759 and exists ( e1761,e1762 : ( e1761+e1762 = e1760 && k' = e1761 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( k = e1759 && e1760 = e1759 and exists ( e1761,e1762 : ( e1761+e1762 = e1760 && k' = e1761 && 1 = e1762 )) )) and exists ( e1763,e1764 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( k = e1759 && e1760 = e1759 and exists ( e1761,e1762 : ( e1761+e1762 = e1760 && k' = e1761 && 1 = e1762 )) )) and exists ( e1763,e1764 : ( j = e1763 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( k = e1759 && e1760 = e1759 and exists ( e1761,e1762 : ( e1761+e1762 = e1760 && k' = e1761 && 1 = e1762 )) )) and exists ( e1763,e1764 : ( j = e1763 and exists ( e1765,e1766 : ( e1765 = e1764+e1766 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( k = e1759 && e1760 = e1759 and exists ( e1761,e1762 : ( e1761+e1762 = e1760 && k' = e1761 && 1 = e1762 )) )) and exists ( e1763,e1764 : ( j = e1763 and exists ( e1765,e1766 : ( e1765 = e1764+e1766 && j' = e1765 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( k = e1759 && e1760 = e1759 and exists ( e1761,e1762 : ( e1761+e1762 = e1760 && k' = e1761 && 1 = e1762 )) )) and exists ( e1763,e1764 : ( j = e1763 && e1764 = e1763 and exists ( e1765,e1766 : ( e1765 = e1764+e1766 && j' = e1765 && 1 = e1766 )) )) and exists ( e1767,e1768 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( k = e1759 && e1760 = e1759 and exists ( e1761,e1762 : ( e1761+e1762 = e1760 && k' = e1761 && 1 = e1762 )) )) and exists ( e1763,e1764 : ( j = e1763 && e1764 = e1763 and exists ( e1765,e1766 : ( e1765 = e1764+e1766 && j' = e1765 && 1 = e1766 )) )) and exists ( e1767,e1768 : ( i = e1767 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( k = e1759 && e1760 = e1759 and exists ( e1761,e1762 : ( e1761+e1762 = e1760 && k' = e1761 && 1 = e1762 )) )) and exists ( e1763,e1764 : ( j = e1763 && e1764 = e1763 and exists ( e1765,e1766 : ( e1765 = e1764+e1766 && j' = e1765 && 1 = e1766 )) )) and exists ( e1767,e1768 : ( i = e1767 and exists ( e1769,e1770 : ( e1769 = e1768+e1770 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( k = e1759 && e1760 = e1759 and exists ( e1761,e1762 : ( e1761+e1762 = e1760 && k' = e1761 && 1 = e1762 )) )) and exists ( e1763,e1764 : ( j = e1763 && e1764 = e1763 and exists ( e1765,e1766 : ( e1765 = e1764+e1766 && j' = e1765 && 1 = e1766 )) )) and exists ( e1767,e1768 : ( i = e1767 and exists ( e1769,e1770 : ( e1769 = e1768+e1770 && i' = e1769 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1759,e1760 : ( k = e1759 && e1760 = e1759 and exists ( e1761,e1762 : ( e1761+e1762 = e1760 && k' = e1761 && 1 = e1762 )) )) and exists ( e1763,e1764 : ( j = e1763 && e1764 = e1763 and exists ( e1765,e1766 : ( e1765 = e1764+e1766 && j' = e1765 && 1 = e1766 )) )) and exists ( e1767,e1768 : ( i = e1767 && e1768 = e1767 and exists ( e1769,e1770 : ( e1769 = e1768+e1770 && i' = e1769 && 1 = e1770 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( k = e1771 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( k = e1771 and exists ( e1773,e1774 : ( e1773+e1774 = e1772 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( k = e1771 and exists ( e1773,e1774 : ( e1773+e1774 = e1772 && k' = e1773 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( k = e1771 && e1772 = e1771 and exists ( e1773,e1774 : ( e1773+e1774 = e1772 && k' = e1773 && 1 = e1774 )) )) and exists ( e1775,e1776 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( k = e1771 && e1772 = e1771 and exists ( e1773,e1774 : ( e1773+e1774 = e1772 && k' = e1773 && 1 = e1774 )) )) and exists ( e1775,e1776 : ( j = e1775 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( k = e1771 && e1772 = e1771 and exists ( e1773,e1774 : ( e1773+e1774 = e1772 && k' = e1773 && 1 = e1774 )) )) and exists ( e1775,e1776 : ( j = e1775 and exists ( e1777,e1778 : ( e1777+e1778 = e1776 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( k = e1771 && e1772 = e1771 and exists ( e1773,e1774 : ( e1773+e1774 = e1772 && k' = e1773 && 1 = e1774 )) )) and exists ( e1775,e1776 : ( j = e1775 and exists ( e1777,e1778 : ( e1777+e1778 = e1776 && j' = e1777 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( k = e1771 && e1772 = e1771 and exists ( e1773,e1774 : ( e1773+e1774 = e1772 && k' = e1773 && 1 = e1774 )) )) and exists ( e1775,e1776 : ( j = e1775 && e1776 = e1775 and exists ( e1777,e1778 : ( e1777+e1778 = e1776 && j' = e1777 && 1 = e1778 )) )) and exists ( e1779,e1780 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( k = e1771 && e1772 = e1771 and exists ( e1773,e1774 : ( e1773+e1774 = e1772 && k' = e1773 && 1 = e1774 )) )) and exists ( e1775,e1776 : ( j = e1775 && e1776 = e1775 and exists ( e1777,e1778 : ( e1777+e1778 = e1776 && j' = e1777 && 1 = e1778 )) )) and exists ( e1779,e1780 : ( i = e1779 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( k = e1771 && e1772 = e1771 and exists ( e1773,e1774 : ( e1773+e1774 = e1772 && k' = e1773 && 1 = e1774 )) )) and exists ( e1775,e1776 : ( j = e1775 && e1776 = e1775 and exists ( e1777,e1778 : ( e1777+e1778 = e1776 && j' = e1777 && 1 = e1778 )) )) and exists ( e1779,e1780 : ( i = e1779 and exists ( e1781,e1782 : ( e1781 = e1780+e1782 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( k = e1771 && e1772 = e1771 and exists ( e1773,e1774 : ( e1773+e1774 = e1772 && k' = e1773 && 1 = e1774 )) )) and exists ( e1775,e1776 : ( j = e1775 && e1776 = e1775 and exists ( e1777,e1778 : ( e1777+e1778 = e1776 && j' = e1777 && 1 = e1778 )) )) and exists ( e1779,e1780 : ( i = e1779 and exists ( e1781,e1782 : ( e1781 = e1780+e1782 && i' = e1781 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1771,e1772 : ( k = e1771 && e1772 = e1771 and exists ( e1773,e1774 : ( e1773+e1774 = e1772 && k' = e1773 && 1 = e1774 )) )) and exists ( e1775,e1776 : ( j = e1775 && e1776 = e1775 and exists ( e1777,e1778 : ( e1777+e1778 = e1776 && j' = e1777 && 1 = e1778 )) )) and exists ( e1779,e1780 : ( i = e1779 && e1780 = e1779 and exists ( e1781,e1782 : ( e1781 = e1780+e1782 && i' = e1781 && 1 = e1782 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( k = e1783 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( k = e1783 and exists ( e1785,e1786 : ( e1785 = e1784+e1786 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( k = e1783 and exists ( e1785,e1786 : ( e1785 = e1784+e1786 && k' = e1785 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( k = e1783 && e1784 = e1783 and exists ( e1785,e1786 : ( e1785 = e1784+e1786 && k' = e1785 && 1 = e1786 )) )) and exists ( e1787,e1788 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( k = e1783 && e1784 = e1783 and exists ( e1785,e1786 : ( e1785 = e1784+e1786 && k' = e1785 && 1 = e1786 )) )) and exists ( e1787,e1788 : ( j = e1787 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( k = e1783 && e1784 = e1783 and exists ( e1785,e1786 : ( e1785 = e1784+e1786 && k' = e1785 && 1 = e1786 )) )) and exists ( e1787,e1788 : ( j = e1787 and exists ( e1789,e1790 : ( e1789 = e1788+e1790 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( k = e1783 && e1784 = e1783 and exists ( e1785,e1786 : ( e1785 = e1784+e1786 && k' = e1785 && 1 = e1786 )) )) and exists ( e1787,e1788 : ( j = e1787 and exists ( e1789,e1790 : ( e1789 = e1788+e1790 && j' = e1789 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( k = e1783 && e1784 = e1783 and exists ( e1785,e1786 : ( e1785 = e1784+e1786 && k' = e1785 && 1 = e1786 )) )) and exists ( e1787,e1788 : ( j = e1787 && e1788 = e1787 and exists ( e1789,e1790 : ( e1789 = e1788+e1790 && j' = e1789 && 1 = e1790 )) )) and exists ( e1791,e1792 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( k = e1783 && e1784 = e1783 and exists ( e1785,e1786 : ( e1785 = e1784+e1786 && k' = e1785 && 1 = e1786 )) )) and exists ( e1787,e1788 : ( j = e1787 && e1788 = e1787 and exists ( e1789,e1790 : ( e1789 = e1788+e1790 && j' = e1789 && 1 = e1790 )) )) and exists ( e1791,e1792 : ( i = e1791 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( k = e1783 && e1784 = e1783 and exists ( e1785,e1786 : ( e1785 = e1784+e1786 && k' = e1785 && 1 = e1786 )) )) and exists ( e1787,e1788 : ( j = e1787 && e1788 = e1787 and exists ( e1789,e1790 : ( e1789 = e1788+e1790 && j' = e1789 && 1 = e1790 )) )) and exists ( e1791,e1792 : ( i = e1791 and exists ( e1793,e1794 : ( e1793+e1794 = e1792 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( k = e1783 && e1784 = e1783 and exists ( e1785,e1786 : ( e1785 = e1784+e1786 && k' = e1785 && 1 = e1786 )) )) and exists ( e1787,e1788 : ( j = e1787 && e1788 = e1787 and exists ( e1789,e1790 : ( e1789 = e1788+e1790 && j' = e1789 && 1 = e1790 )) )) and exists ( e1791,e1792 : ( i = e1791 and exists ( e1793,e1794 : ( e1793+e1794 = e1792 && i' = e1793 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1783,e1784 : ( k = e1783 && e1784 = e1783 and exists ( e1785,e1786 : ( e1785 = e1784+e1786 && k' = e1785 && 1 = e1786 )) )) and exists ( e1787,e1788 : ( j = e1787 && e1788 = e1787 and exists ( e1789,e1790 : ( e1789 = e1788+e1790 && j' = e1789 && 1 = e1790 )) )) and exists ( e1791,e1792 : ( i = e1791 && e1792 = e1791 and exists ( e1793,e1794 : ( e1793+e1794 = e1792 && i' = e1793 && 1 = e1794 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( k = e1795 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( k = e1795 and exists ( e1797,e1798 : ( e1797 = e1796+e1798 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( k = e1795 and exists ( e1797,e1798 : ( e1797 = e1796+e1798 && k' = e1797 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( k = e1795 && e1796 = e1795 and exists ( e1797,e1798 : ( e1797 = e1796+e1798 && k' = e1797 && 1 = e1798 )) )) and exists ( e1799,e1800 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( k = e1795 && e1796 = e1795 and exists ( e1797,e1798 : ( e1797 = e1796+e1798 && k' = e1797 && 1 = e1798 )) )) and exists ( e1799,e1800 : ( j = e1799 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( k = e1795 && e1796 = e1795 and exists ( e1797,e1798 : ( e1797 = e1796+e1798 && k' = e1797 && 1 = e1798 )) )) and exists ( e1799,e1800 : ( j = e1799 and exists ( e1801,e1802 : ( e1801+e1802 = e1800 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( k = e1795 && e1796 = e1795 and exists ( e1797,e1798 : ( e1797 = e1796+e1798 && k' = e1797 && 1 = e1798 )) )) and exists ( e1799,e1800 : ( j = e1799 and exists ( e1801,e1802 : ( e1801+e1802 = e1800 && j' = e1801 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( k = e1795 && e1796 = e1795 and exists ( e1797,e1798 : ( e1797 = e1796+e1798 && k' = e1797 && 1 = e1798 )) )) and exists ( e1799,e1800 : ( j = e1799 && e1800 = e1799 and exists ( e1801,e1802 : ( e1801+e1802 = e1800 && j' = e1801 && 1 = e1802 )) )) and exists ( e1803,e1804 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( k = e1795 && e1796 = e1795 and exists ( e1797,e1798 : ( e1797 = e1796+e1798 && k' = e1797 && 1 = e1798 )) )) and exists ( e1799,e1800 : ( j = e1799 && e1800 = e1799 and exists ( e1801,e1802 : ( e1801+e1802 = e1800 && j' = e1801 && 1 = e1802 )) )) and exists ( e1803,e1804 : ( i = e1803 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( k = e1795 && e1796 = e1795 and exists ( e1797,e1798 : ( e1797 = e1796+e1798 && k' = e1797 && 1 = e1798 )) )) and exists ( e1799,e1800 : ( j = e1799 && e1800 = e1799 and exists ( e1801,e1802 : ( e1801+e1802 = e1800 && j' = e1801 && 1 = e1802 )) )) and exists ( e1803,e1804 : ( i = e1803 and exists ( e1805,e1806 : ( e1805+e1806 = e1804 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( k = e1795 && e1796 = e1795 and exists ( e1797,e1798 : ( e1797 = e1796+e1798 && k' = e1797 && 1 = e1798 )) )) and exists ( e1799,e1800 : ( j = e1799 && e1800 = e1799 and exists ( e1801,e1802 : ( e1801+e1802 = e1800 && j' = e1801 && 1 = e1802 )) )) and exists ( e1803,e1804 : ( i = e1803 and exists ( e1805,e1806 : ( e1805+e1806 = e1804 && i' = e1805 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1795,e1796 : ( k = e1795 && e1796 = e1795 and exists ( e1797,e1798 : ( e1797 = e1796+e1798 && k' = e1797 && 1 = e1798 )) )) and exists ( e1799,e1800 : ( j = e1799 && e1800 = e1799 and exists ( e1801,e1802 : ( e1801+e1802 = e1800 && j' = e1801 && 1 = e1802 )) )) and exists ( e1803,e1804 : ( i = e1803 && e1804 = e1803 and exists ( e1805,e1806 : ( e1805+e1806 = e1804 && i' = e1805 && 1 = e1806 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( k = e1807 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( k = e1807 and exists ( e1809,e1810 : ( e1809+e1810 = e1808 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( k = e1807 and exists ( e1809,e1810 : ( e1809+e1810 = e1808 && k' = e1809 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( k = e1807 && e1808 = e1807 and exists ( e1809,e1810 : ( e1809+e1810 = e1808 && k' = e1809 && 1 = e1810 )) )) and exists ( e1811,e1812 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j - 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( k = e1807 && e1808 = e1807 and exists ( e1809,e1810 : ( e1809+e1810 = e1808 && k' = e1809 && 1 = e1810 )) )) and exists ( e1811,e1812 : ( j = e1811 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( k = e1807 && e1808 = e1807 and exists ( e1809,e1810 : ( e1809+e1810 = e1808 && k' = e1809 && 1 = e1810 )) )) and exists ( e1811,e1812 : ( j = e1811 and exists ( e1813,e1814 : ( e1813 = e1812+e1814 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( k = e1807 && e1808 = e1807 and exists ( e1809,e1810 : ( e1809+e1810 = e1808 && k' = e1809 && 1 = e1810 )) )) and exists ( e1811,e1812 : ( j = e1811 and exists ( e1813,e1814 : ( e1813 = e1812+e1814 && j' = e1813 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( k = e1807 && e1808 = e1807 and exists ( e1809,e1810 : ( e1809+e1810 = e1808 && k' = e1809 && 1 = e1810 )) )) and exists ( e1811,e1812 : ( j = e1811 && e1812 = e1811 and exists ( e1813,e1814 : ( e1813 = e1812+e1814 && j' = e1813 && 1 = e1814 )) )) and exists ( e1815,e1816 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( k = e1807 && e1808 = e1807 and exists ( e1809,e1810 : ( e1809+e1810 = e1808 && k' = e1809 && 1 = e1810 )) )) and exists ( e1811,e1812 : ( j = e1811 && e1812 = e1811 and exists ( e1813,e1814 : ( e1813 = e1812+e1814 && j' = e1813 && 1 = e1814 )) )) and exists ( e1815,e1816 : ( i = e1815 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( k = e1807 && e1808 = e1807 and exists ( e1809,e1810 : ( e1809+e1810 = e1808 && k' = e1809 && 1 = e1810 )) )) and exists ( e1811,e1812 : ( j = e1811 && e1812 = e1811 and exists ( e1813,e1814 : ( e1813 = e1812+e1814 && j' = e1813 && 1 = e1814 )) )) and exists ( e1815,e1816 : ( i = e1815 and exists ( e1817,e1818 : ( e1817+e1818 = e1816 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( k = e1807 && e1808 = e1807 and exists ( e1809,e1810 : ( e1809+e1810 = e1808 && k' = e1809 && 1 = e1810 )) )) and exists ( e1811,e1812 : ( j = e1811 && e1812 = e1811 and exists ( e1813,e1814 : ( e1813 = e1812+e1814 && j' = e1813 && 1 = e1814 )) )) and exists ( e1815,e1816 : ( i = e1815 and exists ( e1817,e1818 : ( e1817+e1818 = e1816 && i' = e1817 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1807,e1808 : ( k = e1807 && e1808 = e1807 and exists ( e1809,e1810 : ( e1809+e1810 = e1808 && k' = e1809 && 1 = e1810 )) )) and exists ( e1811,e1812 : ( j = e1811 && e1812 = e1811 and exists ( e1813,e1814 : ( e1813 = e1812+e1814 && j' = e1813 && 1 = e1814 )) )) and exists ( e1815,e1816 : ( i = e1815 && e1816 = e1815 and exists ( e1817,e1818 : ( e1817+e1818 = e1816 && i' = e1817 && 1 = e1818 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( k = e1819 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( k = e1819 and exists ( e1821,e1822 : ( e1821+e1822 = e1820 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( k = e1819 and exists ( e1821,e1822 : ( e1821+e1822 = e1820 && k' = e1821 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( k = e1819 && e1820 = e1819 and exists ( e1821,e1822 : ( e1821+e1822 = e1820 && k' = e1821 && 1 = e1822 )) )) and exists ( e1823,e1824 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( k = e1819 && e1820 = e1819 and exists ( e1821,e1822 : ( e1821+e1822 = e1820 && k' = e1821 && 1 = e1822 )) )) and exists ( e1823,e1824 : ( j = e1823 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( k = e1819 && e1820 = e1819 and exists ( e1821,e1822 : ( e1821+e1822 = e1820 && k' = e1821 && 1 = e1822 )) )) and exists ( e1823,e1824 : ( j = e1823 and exists ( e1825,e1826 : ( e1825+e1826 = e1824 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( k = e1819 && e1820 = e1819 and exists ( e1821,e1822 : ( e1821+e1822 = e1820 && k' = e1821 && 1 = e1822 )) )) and exists ( e1823,e1824 : ( j = e1823 and exists ( e1825,e1826 : ( e1825+e1826 = e1824 && j' = e1825 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( k = e1819 && e1820 = e1819 and exists ( e1821,e1822 : ( e1821+e1822 = e1820 && k' = e1821 && 1 = e1822 )) )) and exists ( e1823,e1824 : ( j = e1823 && e1824 = e1823 and exists ( e1825,e1826 : ( e1825+e1826 = e1824 && j' = e1825 && 1 = e1826 )) )) and exists ( e1827,e1828 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i + 1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( k = e1819 && e1820 = e1819 and exists ( e1821,e1822 : ( e1821+e1822 = e1820 && k' = e1821 && 1 = e1822 )) )) and exists ( e1823,e1824 : ( j = e1823 && e1824 = e1823 and exists ( e1825,e1826 : ( e1825+e1826 = e1824 && j' = e1825 && 1 = e1826 )) )) and exists ( e1827,e1828 : ( i = e1827 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( k = e1819 && e1820 = e1819 and exists ( e1821,e1822 : ( e1821+e1822 = e1820 && k' = e1821 && 1 = e1822 )) )) and exists ( e1823,e1824 : ( j = e1823 && e1824 = e1823 and exists ( e1825,e1826 : ( e1825+e1826 = e1824 && j' = e1825 && 1 = e1826 )) )) and exists ( e1827,e1828 : ( i = e1827 and exists ( e1829,e1830 : ( e1829+e1830 = e1828 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  1
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( k = e1819 && e1820 = e1819 and exists ( e1821,e1822 : ( e1821+e1822 = e1820 && k' = e1821 && 1 = e1822 )) )) and exists ( e1823,e1824 : ( j = e1823 && e1824 = e1823 and exists ( e1825,e1826 : ( e1825+e1826 = e1824 && j' = e1825 && 1 = e1826 )) )) and exists ( e1827,e1828 : ( i = e1827 and exists ( e1829,e1830 : ( e1829+e1830 = e1828 && i' = e1829 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1819,e1820 : ( k = e1819 && e1820 = e1819 and exists ( e1821,e1822 : ( e1821+e1822 = e1820 && k' = e1821 && 1 = e1822 )) )) and exists ( e1823,e1824 : ( j = e1823 && e1824 = e1823 and exists ( e1825,e1826 : ( e1825+e1826 = e1824 && j' = e1825 && 1 = e1826 )) )) and exists ( e1827,e1828 : ( i = e1827 && e1828 = e1827 and exists ( e1829,e1830 : ( e1829+e1830 = e1828 && i' = e1829 && 1 = e1830 )) )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 1
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1831,e1832 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1831,e1832 : ( k = e1831 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1831,e1832 : ( k = e1831 && k' = e1832 && e1832 = e1831 )) and exists ( e1833,e1834 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1831,e1832 : ( k = e1831 && k' = e1832 && e1832 = e1831 )) and exists ( e1833,e1834 : ( j = e1833 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1831,e1832 : ( k = e1831 && k' = e1832 && e1832 = e1831 )) and exists ( e1833,e1834 : ( j = e1833 && j' = e1834 && e1834 = e1833 )) and exists ( e1835,e1836 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1831,e1832 : ( k = e1831 && k' = e1832 && e1832 = e1831 )) and exists ( e1833,e1834 : ( j = e1833 && j' = e1834 && e1834 = e1833 )) and exists ( e1835,e1836 : ( i = e1835 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1831,e1832 : ( k = e1831 && k' = e1832 && e1832 = e1831 )) and exists ( e1833,e1834 : ( j = e1833 && j' = e1834 && e1834 = e1833 )) and exists ( e1835,e1836 : ( i = e1835 && i' = e1836 && e1836 = e1835 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 2
i 3
i 4
LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0
j 4

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))
repr2   _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))

5 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _lambda is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_lambda' write 0

ref[3] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[4] _rhs is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_rhs' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))

3 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1837,e1838 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1837,e1838 : ( k = e1837 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1837,e1838 : ( k = e1837 && k' = e1838 && e1838 = e1837 )) and exists ( e1839,e1840 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1837,e1838 : ( k = e1837 && k' = e1838 && e1838 = e1837 )) and exists ( e1839,e1840 : ( j = e1839 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1837,e1838 : ( k = e1837 && k' = e1838 && e1838 = e1837 )) and exists ( e1839,e1840 : ( j = e1839 && j' = e1840 && e1840 = e1839 )) and exists ( e1841,e1842 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1837,e1838 : ( k = e1837 && k' = e1838 && e1838 = e1837 )) and exists ( e1839,e1840 : ( j = e1839 && j' = e1840 && e1840 = e1839 )) and exists ( e1841,e1842 : ( i = e1841 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1837,e1838 : ( k = e1837 && k' = e1838 && e1838 = e1837 )) and exists ( e1839,e1840 : ( j = e1839 && j' = e1840 && e1840 = e1839 )) and exists ( e1841,e1842 : ( i = e1841 && i' = e1842 && e1842 = e1841 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 1
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1843,e1844 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1843,e1844 : ( k = e1843 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1843,e1844 : ( k = e1843 && k' = e1844 && e1844 = e1843 )) and exists ( e1845,e1846 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1843,e1844 : ( k = e1843 && k' = e1844 && e1844 = e1843 )) and exists ( e1845,e1846 : ( j = e1845 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1843,e1844 : ( k = e1843 && k' = e1844 && e1844 = e1843 )) and exists ( e1845,e1846 : ( j = e1845 && j' = e1846 && e1846 = e1845 )) and exists ( e1847,e1848 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1843,e1844 : ( k = e1843 && k' = e1844 && e1844 = e1843 )) and exists ( e1845,e1846 : ( j = e1845 && j' = e1846 && e1846 = e1845 )) and exists ( e1847,e1848 : ( i = e1847 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1843,e1844 : ( k = e1843 && k' = e1844 && e1844 = e1843 )) and exists ( e1845,e1846 : ( j = e1845 && j' = e1846 && e1846 = e1845 )) and exists ( e1847,e1848 : ( i = e1847 && i' = e1848 && e1848 = e1847 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 2
i 3
i 4
LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0
j 5

irtools.cc test_data_dependences()  1 freevars
repr1   _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))
repr2   _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _out[k][j][i] = (_in[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_out[k][j][i] - _rhs[k][j][i])))

5 total refs 
ref[0] _out is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 1

ref[1] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[2] _lambda is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_lambda' write 0

ref[3] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[4] _rhs is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_rhs' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))

5 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _lambda is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_lambda' write 0

ref[3] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[4] _rhs is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_rhs' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1849,e1850 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1849,e1850 : ( k = e1849 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1849,e1850 : ( k = e1849 && k' = e1850 && e1850 = e1849 )) and exists ( e1851,e1852 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1849,e1850 : ( k = e1849 && k' = e1850 && e1850 = e1849 )) and exists ( e1851,e1852 : ( j = e1851 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1849,e1850 : ( k = e1849 && k' = e1850 && e1850 = e1849 )) and exists ( e1851,e1852 : ( j = e1851 && j' = e1852 && e1852 = e1851 )) and exists ( e1853,e1854 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1849,e1850 : ( k = e1849 && k' = e1850 && e1850 = e1849 )) and exists ( e1851,e1852 : ( j = e1851 && j' = e1852 && e1852 = e1851 )) and exists ( e1853,e1854 : ( i = e1853 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1849,e1850 : ( k = e1849 && k' = e1850 && e1850 = e1849 )) and exists ( e1851,e1852 : ( j = e1851 && j' = e1852 && e1852 = e1851 )) and exists ( e1853,e1854 : ( i = e1853 && i' = e1854 && e1854 = e1853 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 1
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1855,e1856 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1855,e1856 : ( k = e1855 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1855,e1856 : ( k = e1855 && k' = e1856 && e1856 = e1855 )) and exists ( e1857,e1858 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1855,e1856 : ( k = e1855 && k' = e1856 && e1856 = e1855 )) and exists ( e1857,e1858 : ( j = e1857 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1855,e1856 : ( k = e1855 && k' = e1856 && e1856 = e1855 )) and exists ( e1857,e1858 : ( j = e1857 && j' = e1858 && e1858 = e1857 )) and exists ( e1859,e1860 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1855,e1856 : ( k = e1855 && k' = e1856 && e1856 = e1855 )) and exists ( e1857,e1858 : ( j = e1857 && j' = e1858 && e1858 = e1857 )) and exists ( e1859,e1860 : ( i = e1859 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1855,e1856 : ( k = e1855 && k' = e1856 && e1856 = e1855 )) and exists ( e1857,e1858 : ( j = e1857 && j' = e1858 && e1858 = e1857 )) and exists ( e1859,e1860 : ( i = e1859 && i' = e1860 && e1860 = e1859 )) and exists ( alpha : s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
leaving relation2dependences, 0 and 0 dependences
i 2
i 3
i 4
LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0
i 3
j 3

irtools.cc test_data_dependences()  1 freevars
repr1   _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))
repr2   _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
repr1 == repr2
repr1->dump()
_in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))

28 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[3] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[4] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[5] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[6] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[7] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[8] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[9] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[10] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[11] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[12] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[13] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[14] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[15] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[16] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[17] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[18] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[19] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[20] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[21] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[22] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[23] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[24] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[25] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[26] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[27] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

access of size 28
WRITE  array access 0 = _in
       array access 1 = _out
       array access 2 = _out
       array access 3 = _out
       array access 4 = _out
       array access 5 = _out
       array access 6 = _out
       array access 7 = _out
       array access 8 = _out
       array access 9 = _out
       array access 10 = _out
       array access 11 = _out
       array access 12 = _out
       array access 13 = _out
       array access 14 = _out
       array access 15 = _out
       array access 16 = _out
       array access 17 = _out
       array access 18 = _out
       array access 19 = _out
       array access 20 = _out
       array access 21 = _out
       array access 22 = _out
       array access 23 = _out
       array access 24 = _out
       array access 25 = _out
       array access 26 = _out
       array access 27 = _out
that was the list


before mapRefstoStatements()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
after mapRefstoStatements()

i 0
sym_a = _in
irtools.cc j 0
sym_b = _in
irtools.cc ij 0 0
*sym_a == *sym_b
0 a->is_write()
0 b->is_write()

irtools.cc ij 0 0   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1861,e1862 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1861,e1862 : ( k = e1861 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1861,e1862 : ( k = e1861 && k' = e1862 && e1862 = e1861 )) and exists ( e1863,e1864 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1861,e1862 : ( k = e1861 && k' = e1862 && e1862 = e1861 )) and exists ( e1863,e1864 : ( j = e1863 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1861,e1862 : ( k = e1861 && k' = e1862 && e1862 = e1861 )) and exists ( e1863,e1864 : ( j = e1863 && j' = e1864 && e1864 = e1863 )) and exists ( e1865,e1866 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1861,e1862 : ( k = e1861 && k' = e1862 && e1862 = e1861 )) and exists ( e1863,e1864 : ( j = e1863 && j' = e1864 && e1864 = e1863 )) and exists ( e1865,e1866 : ( i = e1865 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1861,e1862 : ( k = e1861 && k' = e1862 && e1862 = e1861 )) and exists ( e1863,e1864 : ( j = e1863 && j' = e1864 && e1864 = e1863 )) and exists ( e1865,e1866 : ( i = e1865 && i' = e1866 && e1866 = e1865 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1861,e1862 : ( k = e1861 && k' = e1862 && e1862 = e1861 )) and exists ( e1863,e1864 : ( j = e1863 && j' = e1864 && e1864 = e1863 )) and exists ( e1865,e1866 : ( i = e1865 && i' = e1866 && e1866 = e1865 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
1
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
leaving relation2dependences, 0 and 0 dependences

irtools.cc ij 0 0 dv.first 0   dv.second 0
234irtools.cc j 1
sym_b = _out
irtools.cc ij 0 1
*sym_a NOT == *sym_b
0 a->is_write()
1 b->is_NOT_write()
irtools.cc j 2
sym_b = _out
irtools.cc ij 0 2
*sym_a NOT == *sym_b
0 a->is_write()
2 b->is_NOT_write()
irtools.cc j 3
sym_b = _out
irtools.cc ij 0 3
*sym_a NOT == *sym_b
0 a->is_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _out
irtools.cc ij 0 4
*sym_a NOT == *sym_b
0 a->is_write()
4 b->is_NOT_write()
irtools.cc j 5
sym_b = _out
irtools.cc ij 0 5
*sym_a NOT == *sym_b
0 a->is_write()
5 b->is_NOT_write()
irtools.cc j 6
sym_b = _out
irtools.cc ij 0 6
*sym_a NOT == *sym_b
0 a->is_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _out
irtools.cc ij 0 7
*sym_a NOT == *sym_b
0 a->is_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _out
irtools.cc ij 0 8
*sym_a NOT == *sym_b
0 a->is_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _out
irtools.cc ij 0 9
*sym_a NOT == *sym_b
0 a->is_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _out
irtools.cc ij 0 10
*sym_a NOT == *sym_b
0 a->is_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _out
irtools.cc ij 0 11
*sym_a NOT == *sym_b
0 a->is_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _out
irtools.cc ij 0 12
*sym_a NOT == *sym_b
0 a->is_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 0 13
*sym_a NOT == *sym_b
0 a->is_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 0 14
*sym_a NOT == *sym_b
0 a->is_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 0 15
*sym_a NOT == *sym_b
0 a->is_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 0 16
*sym_a NOT == *sym_b
0 a->is_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 0 17
*sym_a NOT == *sym_b
0 a->is_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 0 18
*sym_a NOT == *sym_b
0 a->is_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 0 19
*sym_a NOT == *sym_b
0 a->is_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 0 20
*sym_a NOT == *sym_b
0 a->is_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 0 21
*sym_a NOT == *sym_b
0 a->is_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 0 22
*sym_a NOT == *sym_b
0 a->is_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 0 23
*sym_a NOT == *sym_b
0 a->is_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 0 24
*sym_a NOT == *sym_b
0 a->is_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 0 25
*sym_a NOT == *sym_b
0 a->is_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 0 26
*sym_a NOT == *sym_b
0 a->is_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 0 27
*sym_a NOT == *sym_b
0 a->is_write()
27 b->is_NOT_write()
i 1
sym_a = _out
irtools.cc j 1
sym_b = _out
irtools.cc ij 1 1
*sym_a == *sym_b
1 a->is_NOT_write()
1 b->is_NOT_write()
irtools.cc j 2
sym_b = _out
irtools.cc ij 1 2
*sym_a == *sym_b
1 a->is_NOT_write()
2 b->is_NOT_write()
irtools.cc j 3
sym_b = _out
irtools.cc ij 1 3
*sym_a == *sym_b
1 a->is_NOT_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _out
irtools.cc ij 1 4
*sym_a == *sym_b
1 a->is_NOT_write()
4 b->is_NOT_write()
irtools.cc j 5
sym_b = _out
irtools.cc ij 1 5
*sym_a == *sym_b
1 a->is_NOT_write()
5 b->is_NOT_write()
irtools.cc j 6
sym_b = _out
irtools.cc ij 1 6
*sym_a == *sym_b
1 a->is_NOT_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _out
irtools.cc ij 1 7
*sym_a == *sym_b
1 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _out
irtools.cc ij 1 8
*sym_a == *sym_b
1 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _out
irtools.cc ij 1 9
*sym_a == *sym_b
1 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _out
irtools.cc ij 1 10
*sym_a == *sym_b
1 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _out
irtools.cc ij 1 11
*sym_a == *sym_b
1 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _out
irtools.cc ij 1 12
*sym_a == *sym_b
1 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 1 13
*sym_a == *sym_b
1 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 1 14
*sym_a == *sym_b
1 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 1 15
*sym_a == *sym_b
1 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 1 16
*sym_a == *sym_b
1 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 1 17
*sym_a == *sym_b
1 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 1 18
*sym_a == *sym_b
1 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 1 19
*sym_a == *sym_b
1 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 1 20
*sym_a == *sym_b
1 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 1 21
*sym_a == *sym_b
1 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 1 22
*sym_a == *sym_b
1 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 1 23
*sym_a == *sym_b
1 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 1 24
*sym_a == *sym_b
1 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 1 25
*sym_a == *sym_b
1 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 1 26
*sym_a == *sym_b
1 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 1 27
*sym_a == *sym_b
1 a->is_NOT_write()
27 b->is_NOT_write()
i 2
sym_a = _out
irtools.cc j 2
sym_b = _out
irtools.cc ij 2 2
*sym_a == *sym_b
2 a->is_NOT_write()
2 b->is_NOT_write()
irtools.cc j 3
sym_b = _out
irtools.cc ij 2 3
*sym_a == *sym_b
2 a->is_NOT_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _out
irtools.cc ij 2 4
*sym_a == *sym_b
2 a->is_NOT_write()
4 b->is_NOT_write()
irtools.cc j 5
sym_b = _out
irtools.cc ij 2 5
*sym_a == *sym_b
2 a->is_NOT_write()
5 b->is_NOT_write()
irtools.cc j 6
sym_b = _out
irtools.cc ij 2 6
*sym_a == *sym_b
2 a->is_NOT_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _out
irtools.cc ij 2 7
*sym_a == *sym_b
2 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _out
irtools.cc ij 2 8
*sym_a == *sym_b
2 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _out
irtools.cc ij 2 9
*sym_a == *sym_b
2 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _out
irtools.cc ij 2 10
*sym_a == *sym_b
2 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _out
irtools.cc ij 2 11
*sym_a == *sym_b
2 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _out
irtools.cc ij 2 12
*sym_a == *sym_b
2 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 2 13
*sym_a == *sym_b
2 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 2 14
*sym_a == *sym_b
2 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 2 15
*sym_a == *sym_b
2 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 2 16
*sym_a == *sym_b
2 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 2 17
*sym_a == *sym_b
2 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 2 18
*sym_a == *sym_b
2 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 2 19
*sym_a == *sym_b
2 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 2 20
*sym_a == *sym_b
2 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 2 21
*sym_a == *sym_b
2 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 2 22
*sym_a == *sym_b
2 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 2 23
*sym_a == *sym_b
2 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 2 24
*sym_a == *sym_b
2 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 2 25
*sym_a == *sym_b
2 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 2 26
*sym_a == *sym_b
2 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 2 27
*sym_a == *sym_b
2 a->is_NOT_write()
27 b->is_NOT_write()
i 3
sym_a = _out
irtools.cc j 3
sym_b = _out
irtools.cc ij 3 3
*sym_a == *sym_b
3 a->is_NOT_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _out
irtools.cc ij 3 4
*sym_a == *sym_b
3 a->is_NOT_write()
4 b->is_NOT_write()
irtools.cc j 5
sym_b = _out
irtools.cc ij 3 5
*sym_a == *sym_b
3 a->is_NOT_write()
5 b->is_NOT_write()
irtools.cc j 6
sym_b = _out
irtools.cc ij 3 6
*sym_a == *sym_b
3 a->is_NOT_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _out
irtools.cc ij 3 7
*sym_a == *sym_b
3 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _out
irtools.cc ij 3 8
*sym_a == *sym_b
3 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _out
irtools.cc ij 3 9
*sym_a == *sym_b
3 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _out
irtools.cc ij 3 10
*sym_a == *sym_b
3 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _out
irtools.cc ij 3 11
*sym_a == *sym_b
3 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _out
irtools.cc ij 3 12
*sym_a == *sym_b
3 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 3 13
*sym_a == *sym_b
3 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 3 14
*sym_a == *sym_b
3 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 3 15
*sym_a == *sym_b
3 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 3 16
*sym_a == *sym_b
3 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 3 17
*sym_a == *sym_b
3 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 3 18
*sym_a == *sym_b
3 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 3 19
*sym_a == *sym_b
3 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 3 20
*sym_a == *sym_b
3 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 3 21
*sym_a == *sym_b
3 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 3 22
*sym_a == *sym_b
3 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 3 23
*sym_a == *sym_b
3 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 3 24
*sym_a == *sym_b
3 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 3 25
*sym_a == *sym_b
3 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 3 26
*sym_a == *sym_b
3 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 3 27
*sym_a == *sym_b
3 a->is_NOT_write()
27 b->is_NOT_write()
i 4
sym_a = _out
irtools.cc j 4
sym_b = _out
irtools.cc ij 4 4
*sym_a == *sym_b
4 a->is_NOT_write()
4 b->is_NOT_write()
irtools.cc j 5
sym_b = _out
irtools.cc ij 4 5
*sym_a == *sym_b
4 a->is_NOT_write()
5 b->is_NOT_write()
irtools.cc j 6
sym_b = _out
irtools.cc ij 4 6
*sym_a == *sym_b
4 a->is_NOT_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _out
irtools.cc ij 4 7
*sym_a == *sym_b
4 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _out
irtools.cc ij 4 8
*sym_a == *sym_b
4 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _out
irtools.cc ij 4 9
*sym_a == *sym_b
4 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _out
irtools.cc ij 4 10
*sym_a == *sym_b
4 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _out
irtools.cc ij 4 11
*sym_a == *sym_b
4 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _out
irtools.cc ij 4 12
*sym_a == *sym_b
4 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 4 13
*sym_a == *sym_b
4 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 4 14
*sym_a == *sym_b
4 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 4 15
*sym_a == *sym_b
4 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 4 16
*sym_a == *sym_b
4 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 4 17
*sym_a == *sym_b
4 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 4 18
*sym_a == *sym_b
4 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 4 19
*sym_a == *sym_b
4 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 4 20
*sym_a == *sym_b
4 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 4 21
*sym_a == *sym_b
4 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 4 22
*sym_a == *sym_b
4 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 4 23
*sym_a == *sym_b
4 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 4 24
*sym_a == *sym_b
4 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 4 25
*sym_a == *sym_b
4 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 4 26
*sym_a == *sym_b
4 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 4 27
*sym_a == *sym_b
4 a->is_NOT_write()
27 b->is_NOT_write()
i 5
sym_a = _out
irtools.cc j 5
sym_b = _out
irtools.cc ij 5 5
*sym_a == *sym_b
5 a->is_NOT_write()
5 b->is_NOT_write()
irtools.cc j 6
sym_b = _out
irtools.cc ij 5 6
*sym_a == *sym_b
5 a->is_NOT_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _out
irtools.cc ij 5 7
*sym_a == *sym_b
5 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _out
irtools.cc ij 5 8
*sym_a == *sym_b
5 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _out
irtools.cc ij 5 9
*sym_a == *sym_b
5 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _out
irtools.cc ij 5 10
*sym_a == *sym_b
5 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _out
irtools.cc ij 5 11
*sym_a == *sym_b
5 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _out
irtools.cc ij 5 12
*sym_a == *sym_b
5 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 5 13
*sym_a == *sym_b
5 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 5 14
*sym_a == *sym_b
5 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 5 15
*sym_a == *sym_b
5 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 5 16
*sym_a == *sym_b
5 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 5 17
*sym_a == *sym_b
5 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 5 18
*sym_a == *sym_b
5 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 5 19
*sym_a == *sym_b
5 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 5 20
*sym_a == *sym_b
5 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 5 21
*sym_a == *sym_b
5 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 5 22
*sym_a == *sym_b
5 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 5 23
*sym_a == *sym_b
5 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 5 24
*sym_a == *sym_b
5 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 5 25
*sym_a == *sym_b
5 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 5 26
*sym_a == *sym_b
5 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 5 27
*sym_a == *sym_b
5 a->is_NOT_write()
27 b->is_NOT_write()
i 6
sym_a = _out
irtools.cc j 6
sym_b = _out
irtools.cc ij 6 6
*sym_a == *sym_b
6 a->is_NOT_write()
6 b->is_NOT_write()
irtools.cc j 7
sym_b = _out
irtools.cc ij 6 7
*sym_a == *sym_b
6 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _out
irtools.cc ij 6 8
*sym_a == *sym_b
6 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _out
irtools.cc ij 6 9
*sym_a == *sym_b
6 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _out
irtools.cc ij 6 10
*sym_a == *sym_b
6 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _out
irtools.cc ij 6 11
*sym_a == *sym_b
6 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _out
irtools.cc ij 6 12
*sym_a == *sym_b
6 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 6 13
*sym_a == *sym_b
6 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 6 14
*sym_a == *sym_b
6 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 6 15
*sym_a == *sym_b
6 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 6 16
*sym_a == *sym_b
6 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 6 17
*sym_a == *sym_b
6 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 6 18
*sym_a == *sym_b
6 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 6 19
*sym_a == *sym_b
6 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 6 20
*sym_a == *sym_b
6 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 6 21
*sym_a == *sym_b
6 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 6 22
*sym_a == *sym_b
6 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 6 23
*sym_a == *sym_b
6 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 6 24
*sym_a == *sym_b
6 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 6 25
*sym_a == *sym_b
6 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 6 26
*sym_a == *sym_b
6 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 6 27
*sym_a == *sym_b
6 a->is_NOT_write()
27 b->is_NOT_write()
i 7
sym_a = _out
irtools.cc j 7
sym_b = _out
irtools.cc ij 7 7
*sym_a == *sym_b
7 a->is_NOT_write()
7 b->is_NOT_write()
irtools.cc j 8
sym_b = _out
irtools.cc ij 7 8
*sym_a == *sym_b
7 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _out
irtools.cc ij 7 9
*sym_a == *sym_b
7 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _out
irtools.cc ij 7 10
*sym_a == *sym_b
7 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _out
irtools.cc ij 7 11
*sym_a == *sym_b
7 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _out
irtools.cc ij 7 12
*sym_a == *sym_b
7 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 7 13
*sym_a == *sym_b
7 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 7 14
*sym_a == *sym_b
7 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 7 15
*sym_a == *sym_b
7 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 7 16
*sym_a == *sym_b
7 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 7 17
*sym_a == *sym_b
7 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 7 18
*sym_a == *sym_b
7 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 7 19
*sym_a == *sym_b
7 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 7 20
*sym_a == *sym_b
7 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 7 21
*sym_a == *sym_b
7 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 7 22
*sym_a == *sym_b
7 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 7 23
*sym_a == *sym_b
7 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 7 24
*sym_a == *sym_b
7 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 7 25
*sym_a == *sym_b
7 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 7 26
*sym_a == *sym_b
7 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 7 27
*sym_a == *sym_b
7 a->is_NOT_write()
27 b->is_NOT_write()
i 8
sym_a = _out
irtools.cc j 8
sym_b = _out
irtools.cc ij 8 8
*sym_a == *sym_b
8 a->is_NOT_write()
8 b->is_NOT_write()
irtools.cc j 9
sym_b = _out
irtools.cc ij 8 9
*sym_a == *sym_b
8 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _out
irtools.cc ij 8 10
*sym_a == *sym_b
8 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _out
irtools.cc ij 8 11
*sym_a == *sym_b
8 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _out
irtools.cc ij 8 12
*sym_a == *sym_b
8 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 8 13
*sym_a == *sym_b
8 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 8 14
*sym_a == *sym_b
8 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 8 15
*sym_a == *sym_b
8 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 8 16
*sym_a == *sym_b
8 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 8 17
*sym_a == *sym_b
8 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 8 18
*sym_a == *sym_b
8 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 8 19
*sym_a == *sym_b
8 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 8 20
*sym_a == *sym_b
8 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 8 21
*sym_a == *sym_b
8 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 8 22
*sym_a == *sym_b
8 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 8 23
*sym_a == *sym_b
8 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 8 24
*sym_a == *sym_b
8 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 8 25
*sym_a == *sym_b
8 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 8 26
*sym_a == *sym_b
8 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 8 27
*sym_a == *sym_b
8 a->is_NOT_write()
27 b->is_NOT_write()
i 9
sym_a = _out
irtools.cc j 9
sym_b = _out
irtools.cc ij 9 9
*sym_a == *sym_b
9 a->is_NOT_write()
9 b->is_NOT_write()
irtools.cc j 10
sym_b = _out
irtools.cc ij 9 10
*sym_a == *sym_b
9 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _out
irtools.cc ij 9 11
*sym_a == *sym_b
9 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _out
irtools.cc ij 9 12
*sym_a == *sym_b
9 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 9 13
*sym_a == *sym_b
9 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 9 14
*sym_a == *sym_b
9 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 9 15
*sym_a == *sym_b
9 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 9 16
*sym_a == *sym_b
9 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 9 17
*sym_a == *sym_b
9 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 9 18
*sym_a == *sym_b
9 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 9 19
*sym_a == *sym_b
9 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 9 20
*sym_a == *sym_b
9 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 9 21
*sym_a == *sym_b
9 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 9 22
*sym_a == *sym_b
9 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 9 23
*sym_a == *sym_b
9 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 9 24
*sym_a == *sym_b
9 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 9 25
*sym_a == *sym_b
9 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 9 26
*sym_a == *sym_b
9 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 9 27
*sym_a == *sym_b
9 a->is_NOT_write()
27 b->is_NOT_write()
i 10
sym_a = _out
irtools.cc j 10
sym_b = _out
irtools.cc ij 10 10
*sym_a == *sym_b
10 a->is_NOT_write()
10 b->is_NOT_write()
irtools.cc j 11
sym_b = _out
irtools.cc ij 10 11
*sym_a == *sym_b
10 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _out
irtools.cc ij 10 12
*sym_a == *sym_b
10 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 10 13
*sym_a == *sym_b
10 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 10 14
*sym_a == *sym_b
10 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 10 15
*sym_a == *sym_b
10 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 10 16
*sym_a == *sym_b
10 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 10 17
*sym_a == *sym_b
10 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 10 18
*sym_a == *sym_b
10 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 10 19
*sym_a == *sym_b
10 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 10 20
*sym_a == *sym_b
10 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 10 21
*sym_a == *sym_b
10 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 10 22
*sym_a == *sym_b
10 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 10 23
*sym_a == *sym_b
10 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 10 24
*sym_a == *sym_b
10 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 10 25
*sym_a == *sym_b
10 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 10 26
*sym_a == *sym_b
10 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 10 27
*sym_a == *sym_b
10 a->is_NOT_write()
27 b->is_NOT_write()
i 11
sym_a = _out
irtools.cc j 11
sym_b = _out
irtools.cc ij 11 11
*sym_a == *sym_b
11 a->is_NOT_write()
11 b->is_NOT_write()
irtools.cc j 12
sym_b = _out
irtools.cc ij 11 12
*sym_a == *sym_b
11 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 11 13
*sym_a == *sym_b
11 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 11 14
*sym_a == *sym_b
11 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 11 15
*sym_a == *sym_b
11 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 11 16
*sym_a == *sym_b
11 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 11 17
*sym_a == *sym_b
11 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 11 18
*sym_a == *sym_b
11 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 11 19
*sym_a == *sym_b
11 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 11 20
*sym_a == *sym_b
11 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 11 21
*sym_a == *sym_b
11 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 11 22
*sym_a == *sym_b
11 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 11 23
*sym_a == *sym_b
11 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 11 24
*sym_a == *sym_b
11 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 11 25
*sym_a == *sym_b
11 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 11 26
*sym_a == *sym_b
11 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 11 27
*sym_a == *sym_b
11 a->is_NOT_write()
27 b->is_NOT_write()
i 12
sym_a = _out
irtools.cc j 12
sym_b = _out
irtools.cc ij 12 12
*sym_a == *sym_b
12 a->is_NOT_write()
12 b->is_NOT_write()
irtools.cc j 13
sym_b = _out
irtools.cc ij 12 13
*sym_a == *sym_b
12 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 12 14
*sym_a == *sym_b
12 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 12 15
*sym_a == *sym_b
12 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 12 16
*sym_a == *sym_b
12 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 12 17
*sym_a == *sym_b
12 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 12 18
*sym_a == *sym_b
12 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 12 19
*sym_a == *sym_b
12 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 12 20
*sym_a == *sym_b
12 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 12 21
*sym_a == *sym_b
12 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 12 22
*sym_a == *sym_b
12 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 12 23
*sym_a == *sym_b
12 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 12 24
*sym_a == *sym_b
12 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 12 25
*sym_a == *sym_b
12 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 12 26
*sym_a == *sym_b
12 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 12 27
*sym_a == *sym_b
12 a->is_NOT_write()
27 b->is_NOT_write()
i 13
sym_a = _out
irtools.cc j 13
sym_b = _out
irtools.cc ij 13 13
*sym_a == *sym_b
13 a->is_NOT_write()
13 b->is_NOT_write()
irtools.cc j 14
sym_b = _out
irtools.cc ij 13 14
*sym_a == *sym_b
13 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 13 15
*sym_a == *sym_b
13 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 13 16
*sym_a == *sym_b
13 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 13 17
*sym_a == *sym_b
13 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 13 18
*sym_a == *sym_b
13 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 13 19
*sym_a == *sym_b
13 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 13 20
*sym_a == *sym_b
13 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 13 21
*sym_a == *sym_b
13 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 13 22
*sym_a == *sym_b
13 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 13 23
*sym_a == *sym_b
13 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 13 24
*sym_a == *sym_b
13 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 13 25
*sym_a == *sym_b
13 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 13 26
*sym_a == *sym_b
13 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 13 27
*sym_a == *sym_b
13 a->is_NOT_write()
27 b->is_NOT_write()
i 14
sym_a = _out
irtools.cc j 14
sym_b = _out
irtools.cc ij 14 14
*sym_a == *sym_b
14 a->is_NOT_write()
14 b->is_NOT_write()
irtools.cc j 15
sym_b = _out
irtools.cc ij 14 15
*sym_a == *sym_b
14 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 14 16
*sym_a == *sym_b
14 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 14 17
*sym_a == *sym_b
14 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 14 18
*sym_a == *sym_b
14 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 14 19
*sym_a == *sym_b
14 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 14 20
*sym_a == *sym_b
14 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 14 21
*sym_a == *sym_b
14 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 14 22
*sym_a == *sym_b
14 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 14 23
*sym_a == *sym_b
14 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 14 24
*sym_a == *sym_b
14 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 14 25
*sym_a == *sym_b
14 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 14 26
*sym_a == *sym_b
14 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 14 27
*sym_a == *sym_b
14 a->is_NOT_write()
27 b->is_NOT_write()
i 15
sym_a = _out
irtools.cc j 15
sym_b = _out
irtools.cc ij 15 15
*sym_a == *sym_b
15 a->is_NOT_write()
15 b->is_NOT_write()
irtools.cc j 16
sym_b = _out
irtools.cc ij 15 16
*sym_a == *sym_b
15 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 15 17
*sym_a == *sym_b
15 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 15 18
*sym_a == *sym_b
15 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 15 19
*sym_a == *sym_b
15 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 15 20
*sym_a == *sym_b
15 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 15 21
*sym_a == *sym_b
15 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 15 22
*sym_a == *sym_b
15 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 15 23
*sym_a == *sym_b
15 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 15 24
*sym_a == *sym_b
15 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 15 25
*sym_a == *sym_b
15 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 15 26
*sym_a == *sym_b
15 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 15 27
*sym_a == *sym_b
15 a->is_NOT_write()
27 b->is_NOT_write()
i 16
sym_a = _out
irtools.cc j 16
sym_b = _out
irtools.cc ij 16 16
*sym_a == *sym_b
16 a->is_NOT_write()
16 b->is_NOT_write()
irtools.cc j 17
sym_b = _out
irtools.cc ij 16 17
*sym_a == *sym_b
16 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 16 18
*sym_a == *sym_b
16 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 16 19
*sym_a == *sym_b
16 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 16 20
*sym_a == *sym_b
16 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 16 21
*sym_a == *sym_b
16 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 16 22
*sym_a == *sym_b
16 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 16 23
*sym_a == *sym_b
16 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 16 24
*sym_a == *sym_b
16 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 16 25
*sym_a == *sym_b
16 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 16 26
*sym_a == *sym_b
16 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 16 27
*sym_a == *sym_b
16 a->is_NOT_write()
27 b->is_NOT_write()
i 17
sym_a = _out
irtools.cc j 17
sym_b = _out
irtools.cc ij 17 17
*sym_a == *sym_b
17 a->is_NOT_write()
17 b->is_NOT_write()
irtools.cc j 18
sym_b = _out
irtools.cc ij 17 18
*sym_a == *sym_b
17 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 17 19
*sym_a == *sym_b
17 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 17 20
*sym_a == *sym_b
17 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 17 21
*sym_a == *sym_b
17 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 17 22
*sym_a == *sym_b
17 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 17 23
*sym_a == *sym_b
17 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 17 24
*sym_a == *sym_b
17 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 17 25
*sym_a == *sym_b
17 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 17 26
*sym_a == *sym_b
17 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 17 27
*sym_a == *sym_b
17 a->is_NOT_write()
27 b->is_NOT_write()
i 18
sym_a = _out
irtools.cc j 18
sym_b = _out
irtools.cc ij 18 18
*sym_a == *sym_b
18 a->is_NOT_write()
18 b->is_NOT_write()
irtools.cc j 19
sym_b = _out
irtools.cc ij 18 19
*sym_a == *sym_b
18 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 18 20
*sym_a == *sym_b
18 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 18 21
*sym_a == *sym_b
18 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 18 22
*sym_a == *sym_b
18 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 18 23
*sym_a == *sym_b
18 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 18 24
*sym_a == *sym_b
18 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 18 25
*sym_a == *sym_b
18 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 18 26
*sym_a == *sym_b
18 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 18 27
*sym_a == *sym_b
18 a->is_NOT_write()
27 b->is_NOT_write()
i 19
sym_a = _out
irtools.cc j 19
sym_b = _out
irtools.cc ij 19 19
*sym_a == *sym_b
19 a->is_NOT_write()
19 b->is_NOT_write()
irtools.cc j 20
sym_b = _out
irtools.cc ij 19 20
*sym_a == *sym_b
19 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 19 21
*sym_a == *sym_b
19 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 19 22
*sym_a == *sym_b
19 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 19 23
*sym_a == *sym_b
19 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 19 24
*sym_a == *sym_b
19 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 19 25
*sym_a == *sym_b
19 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 19 26
*sym_a == *sym_b
19 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 19 27
*sym_a == *sym_b
19 a->is_NOT_write()
27 b->is_NOT_write()
i 20
sym_a = _out
irtools.cc j 20
sym_b = _out
irtools.cc ij 20 20
*sym_a == *sym_b
20 a->is_NOT_write()
20 b->is_NOT_write()
irtools.cc j 21
sym_b = _out
irtools.cc ij 20 21
*sym_a == *sym_b
20 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 20 22
*sym_a == *sym_b
20 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 20 23
*sym_a == *sym_b
20 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 20 24
*sym_a == *sym_b
20 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 20 25
*sym_a == *sym_b
20 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 20 26
*sym_a == *sym_b
20 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 20 27
*sym_a == *sym_b
20 a->is_NOT_write()
27 b->is_NOT_write()
i 21
sym_a = _out
irtools.cc j 21
sym_b = _out
irtools.cc ij 21 21
*sym_a == *sym_b
21 a->is_NOT_write()
21 b->is_NOT_write()
irtools.cc j 22
sym_b = _out
irtools.cc ij 21 22
*sym_a == *sym_b
21 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 21 23
*sym_a == *sym_b
21 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 21 24
*sym_a == *sym_b
21 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 21 25
*sym_a == *sym_b
21 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 21 26
*sym_a == *sym_b
21 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 21 27
*sym_a == *sym_b
21 a->is_NOT_write()
27 b->is_NOT_write()
i 22
sym_a = _out
irtools.cc j 22
sym_b = _out
irtools.cc ij 22 22
*sym_a == *sym_b
22 a->is_NOT_write()
22 b->is_NOT_write()
irtools.cc j 23
sym_b = _out
irtools.cc ij 22 23
*sym_a == *sym_b
22 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 22 24
*sym_a == *sym_b
22 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 22 25
*sym_a == *sym_b
22 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 22 26
*sym_a == *sym_b
22 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 22 27
*sym_a == *sym_b
22 a->is_NOT_write()
27 b->is_NOT_write()
i 23
sym_a = _out
irtools.cc j 23
sym_b = _out
irtools.cc ij 23 23
*sym_a == *sym_b
23 a->is_NOT_write()
23 b->is_NOT_write()
irtools.cc j 24
sym_b = _out
irtools.cc ij 23 24
*sym_a == *sym_b
23 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 23 25
*sym_a == *sym_b
23 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 23 26
*sym_a == *sym_b
23 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 23 27
*sym_a == *sym_b
23 a->is_NOT_write()
27 b->is_NOT_write()
i 24
sym_a = _out
irtools.cc j 24
sym_b = _out
irtools.cc ij 24 24
*sym_a == *sym_b
24 a->is_NOT_write()
24 b->is_NOT_write()
irtools.cc j 25
sym_b = _out
irtools.cc ij 24 25
*sym_a == *sym_b
24 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 24 26
*sym_a == *sym_b
24 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 24 27
*sym_a == *sym_b
24 a->is_NOT_write()
27 b->is_NOT_write()
i 25
sym_a = _out
irtools.cc j 25
sym_b = _out
irtools.cc ij 25 25
*sym_a == *sym_b
25 a->is_NOT_write()
25 b->is_NOT_write()
irtools.cc j 26
sym_b = _out
irtools.cc ij 25 26
*sym_a == *sym_b
25 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 25 27
*sym_a == *sym_b
25 a->is_NOT_write()
27 b->is_NOT_write()
i 26
sym_a = _out
irtools.cc j 26
sym_b = _out
irtools.cc ij 26 26
*sym_a == *sym_b
26 a->is_NOT_write()
26 b->is_NOT_write()
irtools.cc j 27
sym_b = _out
irtools.cc ij 26 27
*sym_a == *sym_b
26 a->is_NOT_write()
27 b->is_NOT_write()
i 27
sym_a = _out
irtools.cc j 27
sym_b = _out
irtools.cc ij 27 27
*sym_a == *sym_b
27 a->is_NOT_write()
27 b->is_NOT_write()
LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0
j 4

irtools.cc test_data_dependences()  1 freevars
repr1   _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))
repr2   _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))

28 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[3] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[4] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[5] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[6] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[7] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[8] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[9] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[10] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[11] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[12] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[13] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[14] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[15] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[16] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[17] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[18] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[19] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[20] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[21] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[22] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[23] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[24] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[25] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[26] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[27] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))

3 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1867,e1868 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1867,e1868 : ( k = e1867 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1867,e1868 : ( k = e1867 && k' = e1868 && e1868 = e1867 )) and exists ( e1869,e1870 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1867,e1868 : ( k = e1867 && k' = e1868 && e1868 = e1867 )) and exists ( e1869,e1870 : ( j = e1869 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1867,e1868 : ( k = e1867 && k' = e1868 && e1868 = e1867 )) and exists ( e1869,e1870 : ( j = e1869 && j' = e1870 && e1870 = e1869 )) and exists ( e1871,e1872 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1867,e1868 : ( k = e1867 && k' = e1868 && e1868 = e1867 )) and exists ( e1869,e1870 : ( j = e1869 && j' = e1870 && e1870 = e1869 )) and exists ( e1871,e1872 : ( i = e1871 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1867,e1868 : ( k = e1867 && k' = e1868 && e1868 = e1867 )) and exists ( e1869,e1870 : ( j = e1869 && j' = e1870 && e1870 = e1869 )) and exists ( e1871,e1872 : ( i = e1871 && i' = e1872 && e1872 = e1871 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _in  ADDING A DEPENDENCE OF TYPE DEP_W2W to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _in

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _in
symbol _in  HAS A left  DEPENDENCE OF TYPE DEP_W2W
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1873,e1874 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1873,e1874 : ( k = e1873 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1873,e1874 : ( k = e1873 && k' = e1874 && e1874 = e1873 )) and exists ( e1875,e1876 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1873,e1874 : ( k = e1873 && k' = e1874 && e1874 = e1873 )) and exists ( e1875,e1876 : ( j = e1875 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1873,e1874 : ( k = e1873 && k' = e1874 && e1874 = e1873 )) and exists ( e1875,e1876 : ( j = e1875 && j' = e1876 && e1876 = e1875 )) and exists ( e1877,e1878 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1873,e1874 : ( k = e1873 && k' = e1874 && e1874 = e1873 )) and exists ( e1875,e1876 : ( j = e1875 && j' = e1876 && e1876 = e1875 )) and exists ( e1877,e1878 : ( i = e1877 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1873,e1874 : ( k = e1873 && k' = e1874 && e1874 = e1873 )) and exists ( e1875,e1876 : ( j = e1875 && j' = e1876 && e1876 = e1875 )) and exists ( e1877,e1878 : ( i = e1877 && i' = e1878 && e1878 = e1877 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _in  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _in

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _in
symbol _in  HAS A left  DEPENDENCE OF TYPE DEP_W2R
i 1
i 2
i 3
i 4
i 5
i 6
i 7
i 8
i 9
i 10
i 11
i 12
i 13
i 14
i 15
i 16
i 17
i 18
i 19
i 20
i 21
i 22
i 23
i 24
i 25
i 26
i 27
LEAVING test_data_dependences()  first size 2    second size 0

dv.first.size() 2
k1 0
k1 1
j 5

irtools.cc test_data_dependences()  1 freevars
repr1   _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))
repr2   _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))

28 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[3] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[4] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[5] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[6] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[7] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[8] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[9] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[10] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[11] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[12] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[13] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[14] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[15] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[16] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[17] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[18] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[19] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[20] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[21] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[22] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[23] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[24] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[25] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[26] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[27] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))

5 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _lambda is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_lambda' write 0

ref[3] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[4] _rhs is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_rhs' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1879,e1880 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1879,e1880 : ( k = e1879 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1879,e1880 : ( k = e1879 && k' = e1880 && e1880 = e1879 )) and exists ( e1881,e1882 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1879,e1880 : ( k = e1879 && k' = e1880 && e1880 = e1879 )) and exists ( e1881,e1882 : ( j = e1881 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1879,e1880 : ( k = e1879 && k' = e1880 && e1880 = e1879 )) and exists ( e1881,e1882 : ( j = e1881 && j' = e1882 && e1882 = e1881 )) and exists ( e1883,e1884 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1879,e1880 : ( k = e1879 && k' = e1880 && e1880 = e1879 )) and exists ( e1881,e1882 : ( j = e1881 && j' = e1882 && e1882 = e1881 )) and exists ( e1883,e1884 : ( i = e1883 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1879,e1880 : ( k = e1879 && k' = e1880 && e1880 = e1879 )) and exists ( e1881,e1882 : ( j = e1881 && j' = e1882 && e1882 = e1881 )) and exists ( e1883,e1884 : ( i = e1883 && i' = e1884 && e1884 = e1883 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _in  ADDING A DEPENDENCE OF TYPE DEP_W2W to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _in

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _in
symbol _in  HAS A left  DEPENDENCE OF TYPE DEP_W2W
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1885,e1886 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1885,e1886 : ( k = e1885 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1885,e1886 : ( k = e1885 && k' = e1886 && e1886 = e1885 )) and exists ( e1887,e1888 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1885,e1886 : ( k = e1885 && k' = e1886 && e1886 = e1885 )) and exists ( e1887,e1888 : ( j = e1887 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1885,e1886 : ( k = e1885 && k' = e1886 && e1886 = e1885 )) and exists ( e1887,e1888 : ( j = e1887 && j' = e1888 && e1888 = e1887 )) and exists ( e1889,e1890 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1885,e1886 : ( k = e1885 && k' = e1886 && e1886 = e1885 )) and exists ( e1887,e1888 : ( j = e1887 && j' = e1888 && e1888 = e1887 )) and exists ( e1889,e1890 : ( i = e1889 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1885,e1886 : ( k = e1885 && k' = e1886 && e1886 = e1885 )) and exists ( e1887,e1888 : ( j = e1887 && j' = e1888 && e1888 = e1887 )) and exists ( e1889,e1890 : ( i = e1889 && i' = e1890 && e1890 = e1889 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _in  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _in

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _in
symbol _in  HAS A left  DEPENDENCE OF TYPE DEP_W2R
i 1
i 2
i 3
i 4
i 5
i 6
i 7
i 8
i 9
i 10
i 11
i 12
i 13
i 14
i 15
i 16
i 17
i 18
i 19
i 20
i 21
i 22
i 23
i 24
i 25
i 26
i 27
LEAVING test_data_dependences()  first size 2    second size 0

dv.first.size() 2
k1 0
k1 1
i 4
j 4

irtools.cc test_data_dependences()  1 freevars
repr1   _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))
repr2   _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
repr1 == repr2
repr1->dump()
_in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))

3 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

access of size 3
WRITE  array access 0 = _in
       array access 1 = _out
       array access 2 = _in
that was the list


before mapRefstoStatements()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
after mapRefstoStatements()

i 0
sym_a = _in
irtools.cc j 0
sym_b = _in
irtools.cc ij 0 0
*sym_a == *sym_b
0 a->is_write()
0 b->is_write()

irtools.cc ij 0 0   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1891,e1892 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1891,e1892 : ( k = e1891 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1891,e1892 : ( k = e1891 && k' = e1892 && e1892 = e1891 )) and exists ( e1893,e1894 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1891,e1892 : ( k = e1891 && k' = e1892 && e1892 = e1891 )) and exists ( e1893,e1894 : ( j = e1893 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1891,e1892 : ( k = e1891 && k' = e1892 && e1892 = e1891 )) and exists ( e1893,e1894 : ( j = e1893 && j' = e1894 && e1894 = e1893 )) and exists ( e1895,e1896 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1891,e1892 : ( k = e1891 && k' = e1892 && e1892 = e1891 )) and exists ( e1893,e1894 : ( j = e1893 && j' = e1894 && e1894 = e1893 )) and exists ( e1895,e1896 : ( i = e1895 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1891,e1892 : ( k = e1891 && k' = e1892 && e1892 = e1891 )) and exists ( e1893,e1894 : ( j = e1893 && j' = e1894 && e1894 = e1893 )) and exists ( e1895,e1896 : ( i = e1895 && i' = e1896 && e1896 = e1895 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1891,e1892 : ( k = e1891 && k' = e1892 && e1892 = e1891 )) and exists ( e1893,e1894 : ( j = e1893 && j' = e1894 && e1894 = e1893 )) and exists ( e1895,e1896 : ( i = e1895 && i' = e1896 && e1896 = e1895 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
1
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
leaving relation2dependences, 0 and 0 dependences

irtools.cc ij 0 0 dv.first 0   dv.second 0
234irtools.cc j 1
sym_b = _out
irtools.cc ij 0 1
*sym_a NOT == *sym_b
0 a->is_write()
1 b->is_NOT_write()
irtools.cc j 2
sym_b = _in
irtools.cc ij 0 2
*sym_a == *sym_b
0 a->is_write()
2 b->is_NOT_write()

irtools.cc ij 0 2   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1897,e1898 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1897,e1898 : ( k = e1897 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1897,e1898 : ( k = e1897 && k' = e1898 && e1898 = e1897 )) and exists ( e1899,e1900 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1897,e1898 : ( k = e1897 && k' = e1898 && e1898 = e1897 )) and exists ( e1899,e1900 : ( j = e1899 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1897,e1898 : ( k = e1897 && k' = e1898 && e1898 = e1897 )) and exists ( e1899,e1900 : ( j = e1899 && j' = e1900 && e1900 = e1899 )) and exists ( e1901,e1902 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1897,e1898 : ( k = e1897 && k' = e1898 && e1898 = e1897 )) and exists ( e1899,e1900 : ( j = e1899 && j' = e1900 && e1900 = e1899 )) and exists ( e1901,e1902 : ( i = e1901 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1897,e1898 : ( k = e1897 && k' = e1898 && e1898 = e1897 )) and exists ( e1899,e1900 : ( j = e1899 && j' = e1900 && e1900 = e1899 )) and exists ( e1901,e1902 : ( i = e1901 && i' = e1902 && e1902 = e1901 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1897,e1898 : ( k = e1897 && k' = e1898 && e1898 = e1897 )) and exists ( e1899,e1900 : ( j = e1899 && j' = e1900 && e1900 = e1899 )) and exists ( e1901,e1902 : ( i = e1901 && i' = e1902 && e1902 = e1901 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
1
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _in  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _in

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _in
symbol _in  HAS A left  DEPENDENCE OF TYPE DEP_W2R

irtools.cc ij 0 2 dv.first 1   dv.second 0
234i 1
sym_a = _out
irtools.cc j 1
sym_b = _out
irtools.cc ij 1 1
*sym_a == *sym_b
1 a->is_NOT_write()
1 b->is_NOT_write()
irtools.cc j 2
sym_b = _in
irtools.cc ij 1 2
*sym_a NOT == *sym_b
1 a->is_NOT_write()
2 b->is_NOT_write()
i 2
sym_a = _in
irtools.cc j 2
sym_b = _in
irtools.cc ij 2 2
*sym_a == *sym_b
2 a->is_NOT_write()
2 b->is_NOT_write()
LEAVING test_data_dependences()  first size 2    second size 0

dv.first.size() 2
k1 0
k1 1
j 5

irtools.cc test_data_dependences()  1 freevars
repr1   _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))
repr2   _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }

repr1 != repr2
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (x * _out[k][j][i] - ((y * h2inv) * _in[k][j][i]))

3 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))

5 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _lambda is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_lambda' write 0

ref[3] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[4] _rhs is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_rhs' write 0

i 0
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1903,e1904 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1903,e1904 : ( k = e1903 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1903,e1904 : ( k = e1903 && k' = e1904 && e1904 = e1903 )) and exists ( e1905,e1906 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1903,e1904 : ( k = e1903 && k' = e1904 && e1904 = e1903 )) and exists ( e1905,e1906 : ( j = e1905 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1903,e1904 : ( k = e1903 && k' = e1904 && e1904 = e1903 )) and exists ( e1905,e1906 : ( j = e1905 && j' = e1906 && e1906 = e1905 )) and exists ( e1907,e1908 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1903,e1904 : ( k = e1903 && k' = e1904 && e1904 = e1903 )) and exists ( e1905,e1906 : ( j = e1905 && j' = e1906 && e1906 = e1905 )) and exists ( e1907,e1908 : ( i = e1907 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1903,e1904 : ( k = e1903 && k' = e1904 && e1904 = e1903 )) and exists ( e1905,e1906 : ( j = e1905 && j' = e1906 && e1906 = e1905 )) and exists ( e1907,e1908 : ( i = e1907 && i' = e1908 && e1908 = e1907 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _in  ADDING A DEPENDENCE OF TYPE DEP_W2W to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _in

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _in
symbol _in  HAS A left  DEPENDENCE OF TYPE DEP_W2W
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1909,e1910 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1909,e1910 : ( k = e1909 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1909,e1910 : ( k = e1909 && k' = e1910 && e1910 = e1909 )) and exists ( e1911,e1912 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1909,e1910 : ( k = e1909 && k' = e1910 && e1910 = e1909 )) and exists ( e1911,e1912 : ( j = e1911 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1909,e1910 : ( k = e1909 && k' = e1910 && e1910 = e1909 )) and exists ( e1911,e1912 : ( j = e1911 && j' = e1912 && e1912 = e1911 )) and exists ( e1913,e1914 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1909,e1910 : ( k = e1909 && k' = e1910 && e1910 = e1909 )) and exists ( e1911,e1912 : ( j = e1911 && j' = e1912 && e1912 = e1911 )) and exists ( e1913,e1914 : ( i = e1913 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1909,e1910 : ( k = e1909 && k' = e1910 && e1910 = e1909 )) and exists ( e1911,e1912 : ( j = e1911 && j' = e1912 && e1912 = e1911 )) and exists ( e1913,e1914 : ( i = e1913 && i' = e1914 && e1914 = e1913 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _in  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _in

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _in
symbol _in  HAS A left  DEPENDENCE OF TYPE DEP_W2R
i 1
i 2
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1915,e1916 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1915,e1916 : ( k = e1915 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1915,e1916 : ( k = e1915 && k' = e1916 && e1916 = e1915 )) and exists ( e1917,e1918 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1915,e1916 : ( k = e1915 && k' = e1916 && e1916 = e1915 )) and exists ( e1917,e1918 : ( j = e1917 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1915,e1916 : ( k = e1915 && k' = e1916 && e1916 = e1915 )) and exists ( e1917,e1918 : ( j = e1917 && j' = e1918 && e1918 = e1917 )) and exists ( e1919,e1920 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1915,e1916 : ( k = e1915 && k' = e1916 && e1916 = e1915 )) and exists ( e1917,e1918 : ( j = e1917 && j' = e1918 && e1918 = e1917 )) and exists ( e1919,e1920 : ( i = e1919 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1915,e1916 : ( k = e1915 && k' = e1916 && e1916 = e1915 )) and exists ( e1917,e1918 : ( j = e1917 && j' = e1918 && e1918 = e1917 )) and exists ( e1919,e1920 : ( i = e1919 && i' = e1920 && e1920 = e1919 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _in  ADDING A DEPENDENCE OF TYPE DEP_R2W to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _in

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _in
symbol _in  HAS A left  DEPENDENCE OF TYPE DEP_R2W
LEAVING test_data_dependences()  first size 3    second size 0

dv.first.size() 3
k1 0
k1 1
k1 2
i 5
j 5

irtools.cc test_data_dependences()  1 freevars
repr1   _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))
repr2   _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))
index 0 t
index 1 k
index 2 j
index 3 i
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
repr1 == repr2
repr1->dump()
_in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr
chillstatement 0 = _in[k][j][i] = (_out[k][j][i] - ((TwoThirds * _lambda[k][j][i]) * (_in[k][j][i] - _rhs[k][j][i])))

5 total refs 
ref[0] _in is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 1

ref[1] _out is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_out' write 0

ref[2] _lambda is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_lambda' write 0

ref[3] _in is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_in' write 0

ref[4] _rhs is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() '_rhs' write 0

access of size 5
WRITE  array access 0 = _in
       array access 1 = _out
       array access 2 = _lambda
       array access 3 = _in
       array access 4 = _rhs
that was the list


before mapRefstoStatements()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
 IR_roseCode::FromSameStmt()
after mapRefstoStatements()

i 0
sym_a = _in
irtools.cc j 0
sym_b = _in
irtools.cc ij 0 0
*sym_a == *sym_b
0 a->is_write()
0 b->is_write()

irtools.cc ij 0 0   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1921,e1922 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1921,e1922 : ( k = e1921 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1921,e1922 : ( k = e1921 && k' = e1922 && e1922 = e1921 )) and exists ( e1923,e1924 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1921,e1922 : ( k = e1921 && k' = e1922 && e1922 = e1921 )) and exists ( e1923,e1924 : ( j = e1923 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1921,e1922 : ( k = e1921 && k' = e1922 && e1922 = e1921 )) and exists ( e1923,e1924 : ( j = e1923 && j' = e1924 && e1924 = e1923 )) and exists ( e1925,e1926 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1921,e1922 : ( k = e1921 && k' = e1922 && e1922 = e1921 )) and exists ( e1923,e1924 : ( j = e1923 && j' = e1924 && e1924 = e1923 )) and exists ( e1925,e1926 : ( i = e1925 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1921,e1922 : ( k = e1921 && k' = e1922 && e1922 = e1921 )) and exists ( e1923,e1924 : ( j = e1923 && j' = e1924 && e1924 = e1923 )) and exists ( e1925,e1926 : ( i = e1925 && i' = e1926 && e1926 = e1925 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1921,e1922 : ( k = e1921 && k' = e1922 && e1922 = e1921 )) and exists ( e1923,e1924 : ( j = e1923 && j' = e1924 && e1924 = e1923 )) and exists ( e1925,e1926 : ( i = e1925 && i' = e1926 && e1926 = e1925 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
1
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
leaving relation2dependences, 0 and 0 dependences

irtools.cc ij 0 0 dv.first 0   dv.second 0
234irtools.cc j 1
sym_b = _out
irtools.cc ij 0 1
*sym_a NOT == *sym_b
0 a->is_write()
1 b->is_NOT_write()
irtools.cc j 2
sym_b = _lambda
irtools.cc ij 0 2
*sym_a NOT == *sym_b
0 a->is_write()
2 b->is_NOT_write()
irtools.cc j 3
sym_b = _in
irtools.cc ij 0 3
*sym_a == *sym_b
0 a->is_write()
3 b->is_NOT_write()

irtools.cc ij 0 3   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
1 freevars
freevar 0 s
IS1  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
IS2  { Sym=[s] [t,k,j,i] : exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) }
r    {[In_1,In_2,In_3,In_4] -> [Out_1,Out_2,Out_3,Out_4] : FALSE }
omegatools.cc sym_src
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArraySymbol::n_dim() 3
omegatools.cc ref_src->n_dim() 3
IR_roseArraySymbol::n_dim() 3
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1927,e1928 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k

*** exp2formula()
repr  k
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1927,e1928 : ( k = e1927 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  k
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     k
making ROSE scalar symbol k
s k
IR_roseArraySymbol::n_dim() 3
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1927,e1928 : ( k = e1927 && k' = e1928 && e1928 = e1927 )) and exists ( e1929,e1930 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j

*** exp2formula()
repr  j
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1927,e1928 : ( k = e1927 && k' = e1928 && e1928 = e1927 )) and exists ( e1929,e1930 : ( j = e1929 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  j
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     j
making ROSE scalar symbol j
s j
IR_roseArraySymbol::n_dim() 3
arrays2 i 2
IR_roseArrayRef::index( 2 )  
IR_roseArrayRef::index( 2 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1927,e1928 : ( k = e1927 && k' = e1928 && e1928 = e1927 )) and exists ( e1929,e1930 : ( j = e1929 && j' = e1930 && e1930 = e1929 )) and exists ( e1931,e1932 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i

*** exp2formula()
repr  i
{[t,k,j,i] -> [t',k',j',i'] : exists ( e1927,e1928 : ( k = e1927 && k' = e1928 && e1928 = e1927 )) and exists ( e1929,e1930 : ( j = e1929 && j' = e1930 && e1930 = e1929 )) and exists ( e1931,e1932 : ( i = e1931 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making ROSE scalar symbol i
s i
IR_roseArraySymbol::n_dim() 3
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1927,e1928 : ( k = e1927 && k' = e1928 && e1928 = e1927 )) and exists ( e1929,e1930 : ( j = e1929 && j' = e1930 && e1930 = e1929 )) and exists ( e1931,e1932 : ( i = e1931 && i' = e1932 && e1932 = e1931 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
leaving arrays2relation
r    { Sym=[s] [t,k,j,i] -> [t',k',j',i'] : exists ( e1927,e1928 : ( k = e1927 && k' = e1928 && e1928 = e1927 )) and exists ( e1929,e1930 : ( j = e1929 && j' = e1930 && e1930 = e1929 )) and exists ( e1931,e1932 : ( i = e1931 && i' = e1932 && e1932 = e1931 )) and exists ( alpha : 1+s+2alpha = 0 && t = 0 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) and exists ( alpha : 1+s+2alpha = 0 && t' = 0 && 0 <= i' <= 63 && 0 <= j' <= 63 && 0 <= k' <= 63) }
1
relation2dependences()
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && t = 0 && t' = 0 && k' = k && j' = j && i' = i && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && k = k' && j = j' && i = i' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i' <= 63 && 0 <= k' <= 63 && 0 <= j' <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && j' = j && i' = i && k' = k && t' = 0 && t = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= i <= 63 && 0 <= j <= 63 && 0 <= k <= 63) )) }
{ Sym=[s] [In_1,In_2,In_3,In_4] : exists ( t,k,j,i,t',k',j',i' : ( exists ( alpha : 1+s+2alpha = 0 && i = i' && k = k' && j = j' && t = 0 && t' = 0 && t' = t+In_1 && k' = k+In_2 && j' = j+In_3 && i' = i+In_4 && 0 <= j' <= 63 && 0 <= i' <= 63 && 0 <= k' <= 63) )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
symbol _in  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol _in

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol _in
symbol _in  HAS A left  DEPENDENCE OF TYPE DEP_W2R

irtools.cc ij 0 3 dv.first 1   dv.second 0
234irtools.cc j 4
sym_b = _rhs
irtools.cc ij 0 4
*sym_a NOT == *sym_b
0 a->is_write()
4 b->is_NOT_write()
i 1
sym_a = _out
irtools.cc j 1
sym_b = _out
irtools.cc ij 1 1
*sym_a == *sym_b
1 a->is_NOT_write()
1 b->is_NOT_write()
irtools.cc j 2
sym_b = _lambda
irtools.cc ij 1 2
*sym_a NOT == *sym_b
1 a->is_NOT_write()
2 b->is_NOT_write()
irtools.cc j 3
sym_b = _in
irtools.cc ij 1 3
*sym_a NOT == *sym_b
1 a->is_NOT_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _rhs
irtools.cc ij 1 4
*sym_a NOT == *sym_b
1 a->is_NOT_write()
4 b->is_NOT_write()
i 2
sym_a = _lambda
irtools.cc j 2
sym_b = _lambda
irtools.cc ij 2 2
*sym_a == *sym_b
2 a->is_NOT_write()
2 b->is_NOT_write()
irtools.cc j 3
sym_b = _in
irtools.cc ij 2 3
*sym_a NOT == *sym_b
2 a->is_NOT_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _rhs
irtools.cc ij 2 4
*sym_a NOT == *sym_b
2 a->is_NOT_write()
4 b->is_NOT_write()
i 3
sym_a = _in
irtools.cc j 3
sym_b = _in
irtools.cc ij 3 3
*sym_a == *sym_b
3 a->is_NOT_write()
3 b->is_NOT_write()
irtools.cc j 4
sym_b = _rhs
irtools.cc ij 3 4
*sym_a NOT == *sym_b
3 a->is_NOT_write()
4 b->is_NOT_write()
i 4
sym_a = _rhs
irtools.cc j 4
sym_b = _rhs
irtools.cc ij 4 4
*sym_a == *sym_b
4 a->is_NOT_write()
4 b->is_NOT_write()
LEAVING test_data_dependences()  first size 2    second size 0

dv.first.size() 2
k1 0
k1 1


*** LOTS OF REDUCTIONS ***


i range 6
i 0
i 1
dep.hasEdge(1, 1)
tdv size 2
ij 1 0
ij 1 1
i 2
dep.hasEdge(2, 2)
tdv size 2
ij 2 0
ij 2 1
i 3
i 4
dep.hasEdge(4, 4)
tdv size 2
ij 4 0
ij 4 1
i 5
dep.hasEdge(5, 5)
tdv size 2
ij 5 0
ij 5 1
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
init dumb transformation relations
done with dumb
                                                  at bottom of Loop::Loop, printCode

parse.yy  L 559, made a new loop

(start dump of loop I'm about to change )
s1: 0(dim:0) 0(dim:1) 0(dim:2) 0(dim:3) 0
s2: 0(dim:0) 0(dim:1) 0(dim:2) 0(dim:3) 0
s3: 0(dim:0) 0(dim:1) 0(dim:2) 0(dim:3) 0
s4: 0(dim:0) 0(dim:1) 0(dim:2) 0(dim:3) 0
s5: 0(dim:0) 0(dim:1) 0(dim:2) 0(dim:3) 0
s6: 0(dim:0) 0(dim:1) 0(dim:2) 0(dim:3) 0
(end dump)

(start printcode)

*** parser: print
CodeGen::CodeGen() sanity checking
num_stmt 6  6 xforms
codegen.cc loopIdxNames.size() 0
here goes
here goes
here goes
here goes
here goes
here goes
CodeGen::CodeGen() DONE
CG.cc line 164, CG_result::printString()
stmts.size() 6
CG_loop::printRepr() w assigned_on_the_fly

*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
output_guard()
CG_loop::printRepr() w assigned_on_the_fly

*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
output_guard()
CG_loop::printRepr() w assigned_on_the_fly

*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
output_guard()
CG_loop::printRepr() w assigned_on_the_fly

*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
output_guard()
CG_loop::printRepr() w assigned_on_the_fly

*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
output_guard()
CG_loop::printRepr() w assigned_on_the_fly

*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
output_guard()
CG_loop::printRepr() w assigned_on_the_fly

*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
output_guard()
CG_split::printRepr()
loop_print_repr()  guard_repr NULL
then_cond  { Sym=[s] [t1,t2,t3,t4,t5,t6,t7,t8,t9] : exists ( alpha : s+2alpha = 0) }
output_guard()
EQ ??
CG_utils.cc loop_print_repr recursive 5
loop_print_repr()  guard_repr NULL

*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
CG_split::printRepr()
loop_print_repr()  guard_repr NULL

*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
v Out_1
v Out_1
v Out_1
CG_utils.cc  output_substitutions()          DONE


*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
v Out_1
v Out_1
v Out_1
CG_utils.cc  output_substitutions()          DONE


*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
v Out_1
v Out_1
v Out_1
CG_utils.cc  output_substitutions()          DONE

CG_utils.cc loop_print_repr recursive
loop_print_repr()  guard_repr NULL
CG_utils.cc loop_print_repr recursive
loop_print_repr()  guard_repr NULL
CG_utils.cc loop_print_repr recursive 6
loop_print_repr()  guard_repr NULL

*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
CG_split::printRepr()
loop_print_repr()  guard_repr NULL

*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
v Out_1
v Out_1
v Out_1
CG_utils.cc  output_substitutions()          DONE


*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
v Out_1
v Out_1
v Out_1
CG_utils.cc  output_substitutions()          DONE


*** CG.cc  CG_loop printrepr with more arguments
assigned on the fly  18
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
v Out_1
v Out_1
v Out_1
CG_utils.cc  output_substitutions()          DONE

CG_utils.cc loop_print_repr recursive
loop_print_repr()  guard_repr NULL
CG_utils.cc loop_print_repr recursive
loop_print_repr()  guard_repr NULL
CG_utils.cc loop_print_repr() CreateIf() 3
CG_utils.cc loop_print_repr recursive 7
loop_print_repr()  guard_repr NULL
for(t4 = 0; t4 <= 63; t4++) {
  for(t6 = 0; t6 <= 63; t6++) {
    if (intMod(s,2) == 0) {
      for(t8 = 0; t8 <= 63; t8++) {
        s0(0,t4,t6,t8);
        s1(0,t4,t6,t8);
        s2(0,t4,t6,t8);
      }
    }
    else {
      for(t8 = 0; t8 <= 63; t8++) {
        s3(0,t4,t6,t8);
        s4(0,t4,t6,t8);
        s5(0,t4,t6,t8);
      }
    }
  }
}



*** parser: find stencil shape
Loop::find_stencil_shape( 3 )
chill gathering statements
1 chill gathered statements

statement 0
_in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))


stencil.cc  stencil()
_in[k][j][i] = (((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1]))


*** 1 statements ***

processing statement 0
OK, it's an assignment statement, as expected


output array variable is (VarDecl "'double' '_in' '[66][66][66]'"  n_dim 3  )  vardef (nil)
typedefinition (nil)
NOT PARAMETER



((ALPHA * _out[k][j][i] + BETA * (((((_out[k - 1][j][i] + _out[k][j - 1][i]) + _out[k][j + 1][i]) + _out[k + 1][j][i]) + _out[k][j][i - 1]) + _out[k][j][i + 1])) + GAMMA * (((((((((((_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]) + _out[k][j + 1][i - 1]) + _out[k + 1][j][i - 1]) + _out[k - 1][j - 1][i]) + _out[k - 1][j + 1][i]) + _out[k + 1][j - 1][i]) + _out[k + 1][j + 1][i]) + _out[k - 1][j][i + 1]) + _out[k][j - 1][i + 1]) + _out[k][j + 1][i + 1]) + _out[k + 1][j][i + 1])) + DELTA * (((((((_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]) + _out[k + 1][j - 1][i - 1]) + _out[k + 1][j + 1][i - 1]) + _out[k - 1][j - 1][i + 1]) + _out[k - 1][j + 1][i + 1] * DELTA) + _out[k + 1][j - 1][i + 1]) + _out[k + 1][j + 1][i + 1])

destination array : _in
source array      : _out
dimensions        : 3

Dimension  Variable  MinOffset  MaxOffset  Width
---------  --------  ---------  ---------  -----
    0         k         -1         1         3
    1         j         -1         1         3
    2         i         -1         1         3

    k    j    i   coefficient
 ---- ---- ----   -----------
    0    0    0    ALPHA
   -1    0    0    BETA
    0   -1    0    BETA
    0    1    0    BETA
    1    0    0    BETA
    0    0   -1    BETA
    0    0    1    BETA
   -1    0   -1    GAMMA
    0   -1   -1    GAMMA
    0    1   -1    GAMMA
    1    0   -1    GAMMA
   -1   -1    0    GAMMA
   -1    1    0    GAMMA
    1   -1    0    GAMMA
    1    1    0    GAMMA
   -1    0    1    GAMMA
    0   -1    1    GAMMA
    0    1    1    GAMMA
    1    0    1    GAMMA
   -1   -1   -1    DELTA
   -1    1   -1    DELTA
    1   -1   -1    DELTA
    1    1   -1    DELTA
   -1   -1    1    DELTA
   -1    1    1    DELTA * DELTA
    1   -1    1    DELTA
    1    1    1    DELTA

stencil.cc stencil() DONE


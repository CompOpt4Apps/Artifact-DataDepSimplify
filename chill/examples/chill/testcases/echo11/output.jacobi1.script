source: jacobi1.c
procedure is main
format: rose
format rose
LOOP ':' NUMBER   parse the file because we haven't yet
CIT_ROSE
LOOP  ir_code = new IR_roseCode(source_filename, procedure_name);
IR_roseCode::IR_roseCode( file_name jacobi1.c, proc_name main )
IR_roseCode::IR_roseCode  actually parsing jacobi1.c using rose?
IR_roseCode::IR_roseCode()  project defined. file parsed by Rose
creating chillAST from Rose AST
ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart  )
2name i numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'i' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int t   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name t, arraypart  )
2name t numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 't' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'float [512UL][512UL]'
vartype = 'float '
arraypart = '[512][512]'
float  a   arraypart = '[512][512]'
2chillAST_VarDecl::chillAST_VarDecl( type float , name a, arraypart [512][512] )
2name a numdimensions 2
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'float ' 'a' '[512][512]'"  n_dim 2  )

ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float [512][512]' Var  'a' )

ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (a) 'float' rvalue
  (DeclRefExpr 'float [512][512]' Var  'a' )
  (DeclRefExpr 'int' Var  't' )
)

ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float [512][512]' Var  'a' )

ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (a) 'float' rvalue
  (DeclRefExpr 'float [512][512]' Var  'a' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  't' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float [512][512]' Var  'a' )

ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (a) 'float' rvalue
  (DeclRefExpr 'float [512][512]' Var  'a' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  't' )
    (IntegerLiteral 'int' 1)
  )
)

ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float [512][512]' Var  'a' )

ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (a) 'float' rvalue
  (DeclRefExpr 'float [512][512]' Var  'a' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  't' )
    (IntegerLiteral 'int' 1)
  )
)

chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
unhandled top node 422/428 of type SgSymbolTable
unhandled top node 423/428 of type SgTypeTable
topnode 424 of 428, first == NULL??  blurb numeric_label
unhandled top node 425/428 of type Sg_File_Info
unhandled top node 426/428 of type Sg_File_Info
unhandled top node 427/428 of type SgSourceFile
found the procedure named main
local Function Definition 0x3212e60

int main(  )
{
  int i;
  int t;
  float  a[512][512];
  for (t = 2; t <= 100; t++) {
    for (i = 2; i <= (512 - 1); i++) 
      a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);
  }
  return(0);

}


printing whole file


// sourcefile has 1 children
they are
FunctionDecl

// this source derived from CHILL AST originally from file 'jacobi1.c' as parsed by frontend compiler rose


int main(  )
{
  int i;
  int t;
  float  a[512][512];
  for (t = 2; t <= 100; t++) {
    for (i = 2; i <= (512 - 1); i++) 
      a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);
  }
  return(0);

}

//CHILL AST originally from file 'jacobi1.c'

(FunctionDecl int main()
  (CompoundStmt 
    (VarDecl "'int' 'i' ''"  n_dim 0  )
    (VarDecl "'int' 't' ''"  n_dim 0  )
    (VarDecl "'float ' 'a' '[512][512]'"  n_dim 2  )
    (ForStmt 
      (BinaryOperator '='
        (DeclRefExpr 'int' Var  't' )
        (IntegerLiteral 'int' 2)
      )
      (BinaryOperator '<='
        (DeclRefExpr 'int' Var  't' )
        (IntegerLiteral 'int' 100)
      )
      (UnaryOperator postfix ++
        (DeclRefExpr 'int' Var  't' )
      )
      (CompoundStmt 
        (ForStmt 
          (BinaryOperator '='
            (DeclRefExpr 'int' Var  'i' )
            (IntegerLiteral 'int' 2)
          )
          (BinaryOperator '<='
            (DeclRefExpr 'int' Var  'i' )
            (BinaryOperator '-'
              (IntegerLiteral 'int' 512)
              (IntegerLiteral 'int' 1)
            )
          )
          (UnaryOperator postfix ++
            (DeclRefExpr 'int' Var  'i' )
          )
          (CompoundStmt 
            (BinaryOperator '='
              (ArraySubscriptExpr (a) 'float' lvalue
                (ArraySubscriptExpr (a) 'float' rvalue
                  (DeclRefExpr 'float [512][512]' Var  'a' )
                  (DeclRefExpr 'int' Var  't' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (BinaryOperator '+'
                (BinaryOperator '+'
                  (ArraySubscriptExpr (a) 'float' rvalue
                    (ArraySubscriptExpr (a) 'float' rvalue
                      (DeclRefExpr 'float [512][512]' Var  'a' )
                      (BinaryOperator '-'
                        (DeclRefExpr 'int' Var  't' )
                        (IntegerLiteral 'int' 1)
                      )
                    )
                    (BinaryOperator '-'
                      (DeclRefExpr 'int' Var  'i' )
                      (IntegerLiteral 'int' 1)
                    )
                  )
                  (ArraySubscriptExpr (a) 'float' rvalue
                    (ArraySubscriptExpr (a) 'float' rvalue
                      (DeclRefExpr 'float [512][512]' Var  'a' )
                      (BinaryOperator '-'
                        (DeclRefExpr 'int' Var  't' )
                        (IntegerLiteral 'int' 1)
                      )
                    )
                    (DeclRefExpr 'int' Var  'i' )
                  )
                )
                (ArraySubscriptExpr (a) 'float' rvalue
                  (ArraySubscriptExpr (a) 'float' rvalue
                    (DeclRefExpr 'float [512][512]' Var  'a' )
                    (BinaryOperator '-'
                      (DeclRefExpr 'int' Var  't' )
                      (IntegerLiteral 'int' 1)
                    )
                  )
                  (BinaryOperator '+'
                    (DeclRefExpr 'int' Var  'i' )
                    (IntegerLiteral 'int' 1)
                  )
                )
              )
            )
          )
        )
      )
    )
    (ReturnStmt
      (IntegerLiteral 'int' 0)
    )
  )
)
need to create symbol tables?
LOOP RETURN ir_code = new IR_roseCode(source_filename, procedure_name);
yyparse  block = ir_code->GetCode();
IR_roseCode::GetCode()
chillfunc 0x3212e60
chillast body of func is 0x3212f10
making a new IR_roseBlock with chillAST

int main(  )
{
  int i;
  int t;
  float  a[512][512];
  for (t = 2; t <= 100; t++) {
    for (i = 2; i <= (512 - 1); i++) 
      a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);
  }
  return(0);

}

in yyparse, IR_Block block 0x320fb50

IR_roseCode::FindOneLevelControlStructure()
basic block is:
block ast of type FunctionDecl

int main(  )
{
  int i;
  int t;
  float  a[512][512];
  for (t = 2; t <= 100; t++) {
    for (i = 2; i <= (512 - 1); i++) 
      a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);
  }
  return(0);

}



*** block is a compoundstatement or a function decl or NULL

*** block is a compoundstatement or a function decl
basic block has 5 statements
making a new IR_roseBlock with NO chillAST (nil)
child 0/5 is of type VarDecl
straight line code adding to basicblock that had 0
child 0/5 = int i
child 0 is part of a basic block
now basicblock has 1 statements
child 1/5 is of type VarDecl
straight line code adding to basicblock that had 1
child 1/5 = int t
child 1 is part of a basic block
now basicblock has 2 statements
child 2/5 is of type VarDecl
straight line code adding to basicblock that had 2
child 2/5 = float  a[512][512]
child 2 is part of a basic block
now basicblock has 3 statements
child 3/5 is of type ForStmt
found a For statement (Loop) at 3/5 within a Basic Block
pushing a run of statements 0 to 2 as a block
making a new IR_roseBlock with NO chillAST (nil)
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (t = 2; t <= 100; t++) {
  for (i = 2; i <= (512 - 1); i++) 
    a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (i = 2; i <= (512 - 1); i++) 
  a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
child 4/5 is of type ReturnStmt
straight line code adding to basicblock that had 0
child 4/5 = return(0)
child 4 is part of a basic block
now basicblock has 1 statements
ns 1  numchildren 5
end of body ends the run of 1 statements in the Basic Block

*** block is a compoundstatement or a function decl  END 
returning vector of 3 controls
(parser.yy) I found 1 loops in the procedure

parse.yy  L 505 making a new myloop loop num start 0

***                                                   ROSE (parser.yy) making a new myloop

Loop::Loop(const IR_Control *control)
control type is 0   IR_CONTROL_LOOP
in Loop::Loop, calling  build_ir_tree()

loop.cc, Loop::Loop() about to clone control
IR_roseLoop::clone()
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (t = 2; t <= 100; t++) {
  for (i = 2; i <= (512 - 1); i++) 
    a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (i = 2; i <= (512 - 1); i++) 
  a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
case IR_CONTROL_LOOP
recursing. build_ir_tree() of CONTROL_LOOP creating children  L122
IR_roseLoop::body()
making a new IR_roseBlock with chillAST
for (i = 2; i <= (512 - 1); i++) 
  a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);

irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure()
basic block is:
block ast of type CompoundStmt
for (i = 2; i <= (512 - 1); i++) 
  a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);



*** block is a compoundstatement or a function decl or NULL

*** block is a compoundstatement or a function decl
found a top level Basic Block Compound Statement
basic block has 1 statements
making a new IR_roseBlock with NO chillAST (nil)
child 0/1 is of type ForStmt
found a For statement (Loop)
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (i = 2; i <= (512 - 1); i++) 
  a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);

IR_roseLoop::IR_roseLoop()    chillbody
body is:
a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
ns 0  numchildren 1

*** block is a compoundstatement or a function decl  END 
returning vector of 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock with chillAST
a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);

irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure()
basic block is:
block ast of type CompoundStmt
a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]);



*** block is a compoundstatement or a function decl or NULL

*** block is a compoundstatement or a function decl
found a top level Basic Block Compound Statement
basic block has 1 statements
making a new IR_roseBlock with NO chillAST (nil)
child 0/1 is of type BinaryOperator
straight line code adding to basicblock that had 0
child 0/1 = a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
child 0 is part of a basic block
now basicblock has 1 statements
ns 1  numchildren 1
NOT sending straightline run of statements, because it would be the entire block. There are no control statements in the block

*** block is a compoundstatement or a function decl  END 
returning vector of 0 controls
irtools.cc BACK FROM FindOneLevelControlStructure()
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
recursing. build_ir_tree() of CONTROL_LOOP creating children DONE
build_ir_tree()  vector result has 1 parts
in Loop::Loop. ir_tree has 1 parts
before init_loops, 0 freevar
dammit 0

                                                  Loop::init_loop()
extract
nesting level stmt size = 1
1 statements?
i 0
stmt_nesting_level[0] = 2
in init_loop, made 1 stmts
max nesting level 2 at location 0
itn = stmt[0]
parent
IR_CONTROL_LOOP  cur_dim 1
making scalar symbol i
index[1] = 'i'
parent
IR_CONTROL_LOOP  cur_dim 0
making scalar symbol t
index[0] = 't'
align loops by names,

set relation variable names                      ****
Relation r(2)
it's a loop.  temp_depth 1
r.name_set_var( 2, i )
it's a loop.  temp_depth 0
r.name_set_var( 1, t )
Relation r   {[t,i] : TRUE }
extract information from loop/if structures
IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
loop.cc, got the lower bound. it is:
2

exp2formula()
{[t,i] : TRUE }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
512 - 1

IR_roseLoop::stop_cond()
exp2formula()
{[t,i] : 2 <= i }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[t,i] : 2 <= i and exists ( e1,e2 : ( i+e2 <= e1 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[t,i] : 2 <= i and exists ( e1,e2 : ( 512 = e1 && i+e2 <= e1 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
IR_roseCode::QueryExpOperation()
abs(c)
IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
loop.cc, got the lower bound. it is:
2

exp2formula()
{[t,i] : 2 <= i and exists ( e1,e2 : ( 512 = e1 && 1 = e2 && i+e2 <= e1 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
100

IR_roseLoop::stop_cond()
exp2formula()
{[t,i] : 2 <= i && 2 <= t and exists ( e1,e2 : ( 512 = e1 && 1 = e2 && i+e2 <= e1 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
IR_roseCode::QueryExpOperation()
abs(c)
add information for missing loops   n_dim(2)
loop.cc L441 insert the statement
loop.cc before extract
IR_roseBlock::extract()
block has chillAST of type CompoundStmt
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
code =  ocg->CreateSubstitutedStmt(...)


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
0 vars and 0 substitutions
1 nodes in old code. was:
stmt(0) = a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])

nosubs old code was:
stmt = a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
stmt
for int i < n_dim(2)
whew
                                        loop.cc   Loop::init_loop() END

after init_loops, 0 freevar
loop.cc 1 statements
this really REALLY needs some comments
i 0
j 0

irtools.cc test_data_dependences()  0 freevars
repr1   a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
repr2   a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
index 0 t
index 1 i
IS1  {[t,i] : 2 <= i <= 511 && 2 <= t <= 100 }
IS2  {[t,i] : 2 <= i <= 511 && 2 <= t <= 100 }
repr1 == repr2
repr1->dump()
a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr

chillstatement 0 = a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
chillAST_ArraySubscriptExpr::gatherArrayRefs setting imwrittento 1 for a[t]
chillAST_ArraySubscriptExpr::gatherArrayRefs setting imwrittento 0 for a[t - 1]
a
a
chillAST_ArraySubscriptExpr::gatherArrayRefs setting imwrittento 0 for a[t - 1]
a
a
a
chillAST_ArraySubscriptExpr::gatherArrayRefs setting imwrittento 0 for a[t - 1]
a
a
a
a
a
a
a
a
a
a
a
a
4 total refs 
ref[0] a is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() 'a' write 1
ref[1] a is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() 'a' write 0
ref[2] a is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() 'a' write 0
ref[3] a is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() 'a' write 0
access of size 4
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
WRITE  array access 0 = a
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
       array access 1 = a
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
       array access 2 = a
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
       array access 3 = a
that was the list


before mapRefstoStatements()
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
 IR_roseCode::FromSameStmt()
a[t][i]
a[t][i]
trivially true because they are exactly the same statement
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
 IR_roseCode::FromSameStmt()
a[t][i]
a[t - 1][i - 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
a[t][i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
a[t - 1][i - 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
a[t - 1][i - 1] + a[t - 1][i]
a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
a[t - 1][i - 1] + a[t - 1][i]
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
 IR_roseCode::FromSameStmt()
a[t][i]
a[t - 1][i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
a[t][i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
a[t - 1][i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
a[t - 1][i - 1] + a[t - 1][i]
a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
a[t - 1][i - 1] + a[t - 1][i]
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
 IR_roseCode::FromSameStmt()
a[t][i]
a[t - 1][i + 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
a[t][i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
a[t - 1][i + 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
(a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]
a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
(a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
 IR_roseCode::FromSameStmt()
a[t - 1][i - 1]
a[t - 1][i - 1]
trivially true because they are exactly the same statement
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
 IR_roseCode::FromSameStmt()
a[t - 1][i - 1]
a[t - 1][i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
a[t - 1][i - 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
a[t - 1][i - 1] + a[t - 1][i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
a[t - 1][i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
a[t - 1][i - 1] + a[t - 1][i]
a[t - 1][i - 1] + a[t - 1][i]
a[t - 1][i - 1] + a[t - 1][i]
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
 IR_roseCode::FromSameStmt()
a[t - 1][i - 1]
a[t - 1][i + 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
a[t - 1][i - 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
a[t - 1][i - 1] + a[t - 1][i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
a[t - 1][i + 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
(a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]
a[t - 1][i - 1] + a[t - 1][i]
(a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
 IR_roseCode::FromSameStmt()
a[t - 1][i]
a[t - 1][i]
trivially true because they are exactly the same statement
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
 IR_roseCode::FromSameStmt()
a[t - 1][i]
a[t - 1][i + 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
a[t - 1][i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
a[t - 1][i - 1] + a[t - 1][i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
a[t - 1][i + 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
(a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]
a[t - 1][i - 1] + a[t - 1][i]
(a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
 IR_roseCode::FromSameStmt()
a[t - 1][i + 1]
a[t - 1][i + 1]
trivially true because they are exactly the same statement
after mapRefstoStatements()

i 0
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_a = a
j 0
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_b = a
irtools.cc ij 0 0
*sym_a == *sym_b
0 a->is_write()
0 b->is_write()

irtools.cc ij 0 0   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[t,i] : 2 <= i <= 511 && 2 <= t <= 100 }
IS2  {[t,i] : 2 <= i <= 511 && 2 <= t <= 100 }
r    {[In_1,In_2] -> [Out_1,Out_2] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
omegatools.cc ref_src->n_dim() 2
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[t,i] -> [t',i'] : exists ( e3,e4 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making scalar symbol t
s t
exp2formula()
{[t,i] -> [t',i'] : exists ( e3,e4 : ( t = e3 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making scalar symbol t
s t
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[t,i] -> [t',i'] : exists ( e3,e4 : ( t = e3 && t' = e4 && e4 = e3 )) and exists ( e5,e6 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[t,i] -> [t',i'] : exists ( e3,e4 : ( t = e3 && t' = e4 && e4 = e3 )) and exists ( e5,e6 : ( i = e5 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
r    {[t,i] -> [t',i'] : exists ( e3,e4 : ( t = e3 && t' = e4 && e4 = e3 )) and exists ( e5,e6 : ( i = e5 && i' = e6 && e6 = e5 )) and 2 <= i <= 511 && 2 <= t <= 100 and 2 <= i' <= 511 && 2 <= t' <= 100 }
leaving arrays2relation
r    {[t,i] -> [t',i'] : exists ( e3,e4 : ( t = e3 && t' = e4 && e4 = e3 )) and exists ( e5,e6 : ( i = e5 && i' = e6 && e6 = e5 )) and 2 <= i <= 511 && 2 <= t <= 100 and 2 <= i' <= 511 && 2 <= t' <= 100 }
1
relation2dependences()
{[In_1,In_2] : exists ( t,i,t',i' : ( t' = t && i' = i && t' = t+In_1 && i' = i+In_2 && 2 <= i <= 511 && 2 <= t <= 100 )) }
{[In_1,In_2] : exists ( t,i,t',i' : ( i = i' && t = t' && t' = t+In_1 && i' = i+In_2 && 2 <= i' <= 511 && 2 <= t' <= 100 )) }

dv created in if                                         ***
leaving relation2dependences, 0 and 0 dependences

irtools.cc ij 0 0 dv.first 0   dv.second 0
234j 1
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_b = a
irtools.cc ij 0 1
*sym_a == *sym_b
0 a->is_write()
1 b->is_NOT_write()

irtools.cc ij 0 1   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[t,i] : 2 <= i <= 511 && 2 <= t <= 100 }
IS2  {[t,i] : 2 <= i <= 511 && 2 <= t <= 100 }
r    {[In_1,In_2] -> [Out_1,Out_2] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
omegatools.cc ref_src->n_dim() 2
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[t,i] -> [t',i'] : exists ( e7,e8 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making scalar symbol t
s t
exp2formula()
{[t,i] -> [t',i'] : exists ( e7,e8 : ( t = e7 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[t,i] -> [t',i'] : exists ( e7,e8 : ( t = e7 and exists ( e9,e10 : ( e9 = e8+e10 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making scalar symbol t
s t
exp2formula()
{[t,i] -> [t',i'] : exists ( e7,e8 : ( t = e7 and exists ( e9,e10 : ( e9 = e8+e10 && t' = e9 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[t,i] -> [t',i'] : exists ( e7,e8 : ( t = e7 && e8 = e7 and exists ( e9,e10 : ( e9 = e8+e10 && t' = e9 && 1 = e10 )) )) and exists ( e11,e12 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[t,i] -> [t',i'] : exists ( e7,e8 : ( t = e7 && e8 = e7 and exists ( e9,e10 : ( e9 = e8+e10 && t' = e9 && 1 = e10 )) )) and exists ( e11,e12 : ( i = e11 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[t,i] -> [t',i'] : exists ( e7,e8 : ( t = e7 && e8 = e7 and exists ( e9,e10 : ( e9 = e8+e10 && t' = e9 && 1 = e10 )) )) and exists ( e11,e12 : ( i = e11 and exists ( e13,e14 : ( e13 = e12+e14 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[t,i] -> [t',i'] : exists ( e7,e8 : ( t = e7 && e8 = e7 and exists ( e9,e10 : ( e9 = e8+e10 && t' = e9 && 1 = e10 )) )) and exists ( e11,e12 : ( i = e11 and exists ( e13,e14 : ( e13 = e12+e14 && i' = e13 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
r    {[t,i] -> [t',i'] : exists ( e7,e8 : ( t = e7 && e8 = e7 and exists ( e9,e10 : ( e9 = e8+e10 && t' = e9 && 1 = e10 )) )) and exists ( e11,e12 : ( i = e11 && e12 = e11 and exists ( e13,e14 : ( e13 = e12+e14 && i' = e13 && 1 = e14 )) )) and 2 <= i <= 511 && 2 <= t <= 100 and 2 <= i' <= 511 && 2 <= t' <= 100 }
leaving arrays2relation
r    {[t,i] -> [t',i'] : exists ( e7,e8 : ( t = e7 && e8 = e7 and exists ( e9,e10 : ( e9 = e8+e10 && t' = e9 && 1 = e10 )) )) and exists ( e11,e12 : ( i = e11 && e12 = e11 and exists ( e13,e14 : ( e13 = e12+e14 && i' = e13 && 1 = e14 )) )) and 2 <= i <= 511 && 2 <= t <= 100 and 2 <= i' <= 511 && 2 <= t' <= 100 }
1
relation2dependences()
{[In_1,In_2] : exists ( t,i,t',i' : ( t' = 1+t && i' = 1+i && t' = t+In_1 && i' = i+In_2 && 2 <= i <= 510 && 2 <= t <= 99 )) }
{[In_1,In_2] : exists ( t,i,t',i' : ( t' = 1+t && i' = 1+i && t' = t+In_1 && i' = i+In_2 && 2 <= i <= 510 && 2 <= t <= 99 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
symbol a  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (a)
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol a

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol a
symbol a  HAS A left  DEPENDENCE OF TYPE DEP_W2R
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)

irtools.cc ij 0 1 dv.first 1   dv.second 0
2IR_roseArraySymbol::IR_roseArraySymbol (a)
34IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
j 2
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_b = a
irtools.cc ij 0 2
*sym_a == *sym_b
0 a->is_write()
2 b->is_NOT_write()

irtools.cc ij 0 2   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[t,i] : 2 <= i <= 511 && 2 <= t <= 100 }
IS2  {[t,i] : 2 <= i <= 511 && 2 <= t <= 100 }
r    {[In_1,In_2] -> [Out_1,Out_2] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
omegatools.cc ref_src->n_dim() 2
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[t,i] -> [t',i'] : exists ( e15,e16 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making scalar symbol t
s t
exp2formula()
{[t,i] -> [t',i'] : exists ( e15,e16 : ( t = e15 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[t,i] -> [t',i'] : exists ( e15,e16 : ( t = e15 and exists ( e17,e18 : ( e17 = e16+e18 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making scalar symbol t
s t
exp2formula()
{[t,i] -> [t',i'] : exists ( e15,e16 : ( t = e15 and exists ( e17,e18 : ( e17 = e16+e18 && t' = e17 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[t,i] -> [t',i'] : exists ( e15,e16 : ( t = e15 && e16 = e15 and exists ( e17,e18 : ( e17 = e16+e18 && t' = e17 && 1 = e18 )) )) and exists ( e19,e20 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[t,i] -> [t',i'] : exists ( e15,e16 : ( t = e15 && e16 = e15 and exists ( e17,e18 : ( e17 = e16+e18 && t' = e17 && 1 = e18 )) )) and exists ( e19,e20 : ( i = e19 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
r    {[t,i] -> [t',i'] : exists ( e15,e16 : ( t = e15 && e16 = e15 and exists ( e17,e18 : ( e17 = e16+e18 && t' = e17 && 1 = e18 )) )) and exists ( e19,e20 : ( i = e19 && i' = e20 && e20 = e19 )) and 2 <= i <= 511 && 2 <= t <= 100 and 2 <= i' <= 511 && 2 <= t' <= 100 }
leaving arrays2relation
r    {[t,i] -> [t',i'] : exists ( e15,e16 : ( t = e15 && e16 = e15 and exists ( e17,e18 : ( e17 = e16+e18 && t' = e17 && 1 = e18 )) )) and exists ( e19,e20 : ( i = e19 && i' = e20 && e20 = e19 )) and 2 <= i <= 511 && 2 <= t <= 100 and 2 <= i' <= 511 && 2 <= t' <= 100 }
1
relation2dependences()
{[In_1,In_2] : exists ( t,i,t',i' : ( t' = 1+t && i' = i && t' = t+In_1 && i' = i+In_2 && 2 <= i <= 511 && 2 <= t <= 99 )) }
{[In_1,In_2] : exists ( t,i,t',i' : ( t' = 1+t && i' = i && t' = t+In_1 && i' = i+In_2 && 2 <= i <= 511 && 2 <= t <= 99 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
symbol a  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (a)
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol a

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol a
symbol a  HAS A left  DEPENDENCE OF TYPE DEP_W2R
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)

irtools.cc ij 0 2 dv.first 1   dv.second 0
2IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
34IR_roseArraySymbol::IR_roseArraySymbol (a)
j 3
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_b = a
irtools.cc ij 0 3
*sym_a == *sym_b
0 a->is_write()
3 b->is_NOT_write()

irtools.cc ij 0 3   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[t,i] : 2 <= i <= 511 && 2 <= t <= 100 }
IS2  {[t,i] : 2 <= i <= 511 && 2 <= t <= 100 }
r    {[In_1,In_2] -> [Out_1,Out_2] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
omegatools.cc ref_src->n_dim() 2
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[t,i] -> [t',i'] : exists ( e21,e22 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making scalar symbol t
s t
exp2formula()
{[t,i] -> [t',i'] : exists ( e21,e22 : ( t = e21 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[t,i] -> [t',i'] : exists ( e21,e22 : ( t = e21 and exists ( e23,e24 : ( e23 = e22+e24 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  t
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     t
making scalar symbol t
s t
exp2formula()
{[t,i] -> [t',i'] : exists ( e21,e22 : ( t = e21 and exists ( e23,e24 : ( e23 = e22+e24 && t' = e23 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
arrays2 i 1
IR_roseArrayRef::index( 1 )  
IR_roseArrayRef::index( 1 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[t,i] -> [t',i'] : exists ( e21,e22 : ( t = e21 && e22 = e21 and exists ( e23,e24 : ( e23 = e22+e24 && t' = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[t,i] -> [t',i'] : exists ( e21,e22 : ( t = e21 && e22 = e21 and exists ( e23,e24 : ( e23 = e22+e24 && t' = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( i = e25 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[t,i] -> [t',i'] : exists ( e21,e22 : ( t = e21 && e22 = e21 and exists ( e23,e24 : ( e23 = e22+e24 && t' = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( i = e25 and exists ( e27,e28 : ( e27+e28 = e26 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[t,i] -> [t',i'] : exists ( e21,e22 : ( t = e21 && e22 = e21 and exists ( e23,e24 : ( e23 = e22+e24 && t' = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( i = e25 and exists ( e27,e28 : ( e27+e28 = e26 && i' = e27 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::n_dim() 2
r    {[t,i] -> [t',i'] : exists ( e21,e22 : ( t = e21 && e22 = e21 and exists ( e23,e24 : ( e23 = e22+e24 && t' = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( i = e25 && e26 = e25 and exists ( e27,e28 : ( e27+e28 = e26 && i' = e27 && 1 = e28 )) )) and 2 <= i <= 511 && 2 <= t <= 100 and 2 <= i' <= 511 && 2 <= t' <= 100 }
leaving arrays2relation
r    {[t,i] -> [t',i'] : exists ( e21,e22 : ( t = e21 && e22 = e21 and exists ( e23,e24 : ( e23 = e22+e24 && t' = e23 && 1 = e24 )) )) and exists ( e25,e26 : ( i = e25 && e26 = e25 and exists ( e27,e28 : ( e27+e28 = e26 && i' = e27 && 1 = e28 )) )) and 2 <= i <= 511 && 2 <= t <= 100 and 2 <= i' <= 511 && 2 <= t' <= 100 }
1
relation2dependences()
{[In_1,In_2] : exists ( t,i,t',i' : ( t' = 1+t && 1+i' = i && t' = t+In_1 && i' = i+In_2 && 3 <= i <= 511 && 2 <= t <= 99 )) }
{[In_1,In_2] : exists ( t,i,t',i' : ( t' = 1+t && 1+i' = i && t' = t+In_1 && i' = i+In_2 && 3 <= i <= 511 && 2 <= t <= 99 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
symbol a  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (a)
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol a

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol a
symbol a  HAS A left  DEPENDENCE OF TYPE DEP_W2R
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)

irtools.cc ij 0 3 dv.first 1   dv.second 0
2IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
34IR_roseArraySymbol::IR_roseArraySymbol (a)
i 1
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_a = a
j 1
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_b = a
irtools.cc ij 1 1
*sym_a == *sym_b
1 a->is_NOT_write()
1 b->is_NOT_write()
j 2
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_b = a
irtools.cc ij 1 2
*sym_a == *sym_b
1 a->is_NOT_write()
2 b->is_NOT_write()
j 3
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_b = a
irtools.cc ij 1 3
*sym_a == *sym_b
1 a->is_NOT_write()
3 b->is_NOT_write()
i 2
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_a = a
j 2
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_b = a
irtools.cc ij 2 2
*sym_a == *sym_b
2 a->is_NOT_write()
2 b->is_NOT_write()
j 3
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_b = a
irtools.cc ij 2 3
*sym_a == *sym_b
2 a->is_NOT_write()
3 b->is_NOT_write()
i 3
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_a = a
j 3
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArrayRef::symbol()
base a
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( a )
IR_roseArraySymbol::IR_roseArraySymbol (a)
sym_b = a
irtools.cc ij 3 3
*sym_a == *sym_b
3 a->is_NOT_write()
3 b->is_NOT_write()
LEAVING test_data_dependences()  first size 6    second size 0

dv.first.size() 6
k1 0
IR_roseArraySymbol::IR_roseArraySymbol (a)
k1 1
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
k1 2
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
k1 3
IR_roseArraySymbol::IR_roseArraySymbol (a)
k1 4
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
k1 5
IR_roseArraySymbol::IR_roseArraySymbol (a)


*** LOTS OF REDUCTIONS ***


i range 1
i 0
dep.hasEdge(0, 0)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
tdv size 6
ij 0 0
ij 0 1
ij 0 2
ij 0 3
ij 0 4
ij 0 5
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
init dumb transformation relations
                                                  at bottom of Loop::Loop, printCode
dependence graph:
1->1: a:flow(1, 1) a:flow(1, 1) a:flow(1, 0) a:flow(1, 0) a:flow(1, -1) a:flow(1, -1)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
TILE (3)
apply_xform( 0 )
loop.cc apply_xform( set )

{[t,i] -> [chill_t1,chill_t2] : chill_t1+i = chill_t2 && t = chill_t1 }
FIX THIS rose in generic loop.cc
loop vars 0 t
loop vars 1 i
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreateIdent( chill_t1 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t1, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t1' )
CG_chillBuilder::CreatePlus()
v Out_1
CG_chillBuilder::CreateIdent( chill_t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t2' )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateIdent( chill_t1 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t1, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t1' )
CG_chillBuilder::CreateMinus()
CG_utils.cc  output_substitutions()          DONE



*** gonna die  *i = 0
1 uninterpreted symbols
loop vars 0 t
loop vars 1 i
CG_utils.cc  output_substitutions()
v Out_1
v Out_1
CG_utils.cc  output_substitutions()          DONE

loop.cc stmt[*i].code =


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
2 vars and 2 substitutions
1 nodes in old code. was:
stmt(0) = a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
sub 0  chill_t1
sub 1  chill_t2 - chill_t1

subbing chill_t1
for  t
subbing chill_t2 - chill_t1
for  i

SubABinaryOperator() subbing old variable t in 
a[t][i] = ((a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1])
op =   rhs type BinaryOperator
(BinaryOperator '+'
  (BinaryOperator '+'
    (ArraySubscriptExpr (a) 'float' rvalue
      (ArraySubscriptExpr (a) 'float' rvalue
        (DeclRefExpr 'float [512][512]' Var  'a' )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  't' )
          (IntegerLiteral 'int' 1)
        )
      )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'i' )
        (IntegerLiteral 'int' 1)
      )
    )
    (ArraySubscriptExpr (a) 'float' rvalue
      (ArraySubscriptExpr (a) 'float' rvalue
        (DeclRefExpr 'float [512][512]' Var  'a' )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  't' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
  (ArraySubscriptExpr (a) 'float' rvalue
    (ArraySubscriptExpr (a) 'float' rvalue
      (DeclRefExpr 'float [512][512]' Var  'a' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  't' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'i' )
      (IntegerLiteral 'int' 1)
    )
  )
)

SubABinaryOperator() subbing old variable t in 
(a[t - 1][i - 1] + a[t - 1][i]) + a[t - 1][i + 1]
op +   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (a) 'float' rvalue
  (ArraySubscriptExpr (a) 'float' rvalue
    (DeclRefExpr 'float [512][512]' Var  'a' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  't' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable t in 
a[t - 1][i - 1] + a[t - 1][i]
op +   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (a) 'float' rvalue
  (ArraySubscriptExpr (a) 'float' rvalue
    (DeclRefExpr 'float [512][512]' Var  'a' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  't' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable t in 
t - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable t in 
i - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable t in 
t - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable t in 
t - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable t in 
i + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
a[chill_t1][i] = ((a[chill_t1 - 1][i - 1] + a[chill_t1 - 1][i]) + a[chill_t1 - 1][i + 1])
op =   rhs type BinaryOperator
(BinaryOperator '+'
  (BinaryOperator '+'
    (ArraySubscriptExpr (a) 'float' rvalue
      (ArraySubscriptExpr (a) 'float' rvalue
        (DeclRefExpr 'float [512][512]' Var  'a' )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  'chill_t1' )
          (IntegerLiteral 'int' 1)
        )
      )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'i' )
        (IntegerLiteral 'int' 1)
      )
    )
    (ArraySubscriptExpr (a) 'float' rvalue
      (ArraySubscriptExpr (a) 'float' rvalue
        (DeclRefExpr 'float [512][512]' Var  'a' )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  'chill_t1' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
  (ArraySubscriptExpr (a) 'float' rvalue
    (ArraySubscriptExpr (a) 'float' rvalue
      (DeclRefExpr 'float [512][512]' Var  'a' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'chill_t1' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'i' )
      (IntegerLiteral 'int' 1)
    )
  )
)

SubABinaryOperator() subbing old variable i in 
(a[chill_t1 - 1][i - 1] + a[chill_t1 - 1][i]) + a[chill_t1 - 1][i + 1]
op +   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (a) 'float' rvalue
  (ArraySubscriptExpr (a) 'float' rvalue
    (DeclRefExpr 'float [512][512]' Var  'a' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'chill_t1' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable i in 
a[chill_t1 - 1][i - 1] + a[chill_t1 - 1][i]
op +   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (a) 'float' rvalue
  (ArraySubscriptExpr (a) 'float' rvalue
    (DeclRefExpr 'float [512][512]' Var  'a' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'chill_t1' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable i in 
chill_t1 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
i - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
chill_t1 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
chill_t1 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
i + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

loop.cc LEAVING apply_xform( set )

IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
IR_roseArraySymbol::IR_roseArraySymbol (a)
dependence graph:
1->1: a:flow(1, 2) a:flow(1, 2) a:flow(1, 1) a:flow(1, 1) a:flow(1, 0) a:flow(1, 0)
CodeGen::CodeGen() sanity checking
num_stmt 1  1 xforms
here goes
CodeGen::CodeGen() DONE
CG.cc line 164, CG_result::printString()
stmts.size() 1

CG_result::printRepr(ocg, stmts) 
DYINGHERE
s 0/1
result: t4 = Out_1, 0
result: t6 = Out_1, 0
return printRepr( ... )
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_utils.cc output_loop() createInvoke( max )
CG_utils.cc output_loop() createInvoke( min )
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_utils.cc output_loop() createInvoke( max )
CG_utils.cc output_loop() createInvoke( min )
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
v Out_1
CG_utils.cc  output_substitutions()          DONE


for(t2 = 4; t2 <= 580; t2 += 64) {
  for(t4 = max(2,t2-511); t4 <= min(100,t2+61); t4++) {
    for(t6 = max(t4+2,t2); t6 <= min(t2+63,t4+511); t6++) {
      s0(t4,t6);
    }
  }
}

script success!
parser.yy almost done
1 loop?   (loop_num_start == loop_num_end)

Loop::getCode( 1 )

CG_result::printRepr(ocg, stmts) 
DYINGHERE
s 0/1
result: t4 = Out_1, 0
CG_chillBuilder::CreateIdent( t4 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t4, arraypart  parent )
made a new chillRepr from 
(DeclRefExpr 'int' Var  't4' )
CG_chillBuilder::CreatePlus()
result: t6 = Out_1, 0
CG_chillBuilder::CreateIdent( t6 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t6, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't6' )
CG_chillBuilder::CreatePlus()
return printRepr( ... )
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 4 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 580 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 64 )
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )

CG_chillBuilder::CreateInductive()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 2 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 100 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 61 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 511 )
CG_chillBuilder::CreateMinus()
CG_utils.cc output_loop() createInvoke( max )
CG_roseBuilder::CreateInvoke( fname max, ...)  NEEDS WORK
max( 2, t2 - 511 )
CG_utils.cc output_loop() createInvoke( min )
CG_roseBuilder::CreateInvoke( fname min, ...)  NEEDS WORK
min( 100, t2 + 61 )
CG_chillBuilder::CreateInt( 1 )
CG_chillBuilder::CreateIdent( t4 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t4, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't4' )

CG_chillBuilder::CreateInductive()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateIdent( t4 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t4, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't4' )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 2 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 63 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateIdent( t4 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t4, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't4' )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 511 )
CG_chillBuilder::CreatePlus()
CG_utils.cc output_loop() createInvoke( max )
CG_roseBuilder::CreateInvoke( fname max, ...)  NEEDS WORK
max( t4 + 2, t2 )
CG_utils.cc output_loop() createInvoke( min )
CG_roseBuilder::CreateInvoke( fname min, ...)  NEEDS WORK
min( t2 + 63, t4 + 511 )
CG_chillBuilder::CreateInt( 1 )
CG_chillBuilder::CreateIdent( t6 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t6, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't6' )

CG_chillBuilder::CreateInductive()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreateIdent( t4 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t4, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't4' )
CG_chillBuilder::CreatePlus()
v Out_1
CG_chillBuilder::CreateIdent( t6 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t6, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't6' )
CG_chillBuilder::CreatePlus()
CG_utils.cc  output_substitutions()          DONE

chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
2 vars and 2 substitutions
1 nodes in old code. was:
stmt(0) = a[chill_t1][chill_t2 - chill_t1] = ((a[chill_t1 - 1][(chill_t2 - chill_t1) - 1] + a[chill_t1 - 1][chill_t2 - chill_t1]) + a[chill_t1 - 1][(chill_t2 - chill_t1) + 1])
sub 0  t4
sub 1  t6

subbing t4
for  chill_t1
subbing t6
for  chill_t2

SubABinaryOperator() subbing old variable chill_t1 in 
a[chill_t1][chill_t2 - chill_t1] = ((a[chill_t1 - 1][(chill_t2 - chill_t1) - 1] + a[chill_t1 - 1][chill_t2 - chill_t1]) + a[chill_t1 - 1][(chill_t2 - chill_t1) + 1])
op =   rhs type BinaryOperator
(BinaryOperator '+'
  (BinaryOperator '+'
    (ArraySubscriptExpr (a) 'float' rvalue
      (ArraySubscriptExpr (a) 'float' rvalue
        (DeclRefExpr 'float [512][512]' Var  'a' )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  'chill_t1' )
          (IntegerLiteral 'int' 1)
        )
      )
      (BinaryOperator '-'
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  'chill_t2' )
          (DeclRefExpr 'int' Var  'chill_t1' )
        )
        (IntegerLiteral 'int' 1)
      )
    )
    (ArraySubscriptExpr (a) 'float' rvalue
      (ArraySubscriptExpr (a) 'float' rvalue
        (DeclRefExpr 'float [512][512]' Var  'a' )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  'chill_t1' )
          (IntegerLiteral 'int' 1)
        )
      )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'chill_t2' )
        (DeclRefExpr 'int' Var  'chill_t1' )
      )
    )
  )
  (ArraySubscriptExpr (a) 'float' rvalue
    (ArraySubscriptExpr (a) 'float' rvalue
      (DeclRefExpr 'float [512][512]' Var  'a' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'chill_t1' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'chill_t2' )
        (DeclRefExpr 'int' Var  'chill_t1' )
      )
      (IntegerLiteral 'int' 1)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t1 in 
chill_t2 - chill_t1
op -   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  'chill_t1' )

SubABinaryOperator() subbing old variable chill_t1 in 
(a[chill_t1 - 1][(chill_t2 - chill_t1) - 1] + a[chill_t1 - 1][chill_t2 - chill_t1]) + a[chill_t1 - 1][(chill_t2 - chill_t1) + 1]
op +   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (a) 'float' rvalue
  (ArraySubscriptExpr (a) 'float' rvalue
    (DeclRefExpr 'float [512][512]' Var  'a' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'chill_t1' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'chill_t2' )
      (DeclRefExpr 'int' Var  'chill_t1' )
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t1 in 
a[chill_t1 - 1][(chill_t2 - chill_t1) - 1] + a[chill_t1 - 1][chill_t2 - chill_t1]
op +   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (a) 'float' rvalue
  (ArraySubscriptExpr (a) 'float' rvalue
    (DeclRefExpr 'float [512][512]' Var  'a' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'chill_t1' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t2' )
    (DeclRefExpr 'int' Var  'chill_t1' )
  )
)

SubABinaryOperator() subbing old variable chill_t1 in 
chill_t1 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t1 in 
(chill_t2 - chill_t1) - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t1 in 
chill_t2 - chill_t1
op -   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  'chill_t1' )

SubABinaryOperator() subbing old variable chill_t1 in 
chill_t1 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t1 in 
chill_t2 - chill_t1
op -   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  'chill_t1' )

SubABinaryOperator() subbing old variable chill_t1 in 
chill_t1 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t1 in 
(chill_t2 - chill_t1) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t1 in 
chill_t2 - chill_t1
op -   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  'chill_t1' )

SubABinaryOperator() subbing old variable chill_t2 in 
a[t4][chill_t2 - t4] = ((a[t4 - 1][(chill_t2 - t4) - 1] + a[t4 - 1][chill_t2 - t4]) + a[t4 - 1][(chill_t2 - t4) + 1])
op =   rhs type BinaryOperator
(BinaryOperator '+'
  (BinaryOperator '+'
    (ArraySubscriptExpr (a) 'float' rvalue
      (ArraySubscriptExpr (a) 'float' rvalue
        (DeclRefExpr 'float [512][512]' Var  'a' )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  't4' )
          (IntegerLiteral 'int' 1)
        )
      )
      (BinaryOperator '-'
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  'chill_t2' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (IntegerLiteral 'int' 1)
      )
    )
    (ArraySubscriptExpr (a) 'float' rvalue
      (ArraySubscriptExpr (a) 'float' rvalue
        (DeclRefExpr 'float [512][512]' Var  'a' )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  't4' )
          (IntegerLiteral 'int' 1)
        )
      )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'chill_t2' )
        (DeclRefExpr 'int' Var  't4' )
      )
    )
  )
  (ArraySubscriptExpr (a) 'float' rvalue
    (ArraySubscriptExpr (a) 'float' rvalue
      (DeclRefExpr 'float [512][512]' Var  'a' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  't4' )
        (IntegerLiteral 'int' 1)
      )
    )
    (BinaryOperator '+'
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'chill_t2' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (IntegerLiteral 'int' 1)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t2 in 
chill_t2 - t4
op -   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  't4' )

SubABinaryOperator() subbing old variable chill_t2 in 
(a[t4 - 1][(chill_t2 - t4) - 1] + a[t4 - 1][chill_t2 - t4]) + a[t4 - 1][(chill_t2 - t4) + 1]
op +   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (a) 'float' rvalue
  (ArraySubscriptExpr (a) 'float' rvalue
    (DeclRefExpr 'float [512][512]' Var  'a' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  't4' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '+'
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'chill_t2' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t2 in 
a[t4 - 1][(chill_t2 - t4) - 1] + a[t4 - 1][chill_t2 - t4]
op +   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (a) 'float' rvalue
  (ArraySubscriptExpr (a) 'float' rvalue
    (DeclRefExpr 'float [512][512]' Var  'a' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  't4' )
      (IntegerLiteral 'int' 1)
    )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t2' )
    (DeclRefExpr 'int' Var  't4' )
  )
)

SubABinaryOperator() subbing old variable chill_t2 in 
t4 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t2 in 
(chill_t2 - t4) - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t2 in 
chill_t2 - t4
op -   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  't4' )

SubABinaryOperator() subbing old variable chill_t2 in 
t4 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t2 in 
chill_t2 - t4
op -   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  't4' )

SubABinaryOperator() subbing old variable chill_t2 in 
t4 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t2 in 
(chill_t2 - t4) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t2 in 
chill_t2 - t4
op -   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  't4' )

IR_roseCode::ReplaceCode( old, *repr)
old was
for (t = 2; t <= 100; t++) {
  for (i = 2; i <= (512 - 1); i++) 
    a[chill_t1][chill_t2 - chill_t1] = ((a[chill_t1 - 1][(chill_t2 - chill_t1) - 1] + a[chill_t1 - 1][chill_t2 - chill_t1]) + a[chill_t1 - 1][(chill_t2 - chill_t1) + 1]);
}


old parent was

{
int t6;
int t4;
int t2;
int i;
int t;
float  a[512][512];
for (t = 2; t <= 100; t++) {
  for (i = 2; i <= (512 - 1); i++) 
    a[chill_t1][chill_t2 - chill_t1] = ((a[chill_t1 - 1][(chill_t2 - chill_t1) - 1] + a[chill_t1 - 1][chill_t2 - chill_t1]) + a[chill_t1 - 1][(chill_t2 - chill_t1) + 1]);
}
return(0);


}

new parent2 is

{
int t6;
int t4;
int t2;
int i;
int t;
float  a[512][512];
for (t2 = 4; t2 <= 580; t2 += 64) {
  for (t4 = (((2) < (t2 - 511)?(2):(t2 - 511))); t4 <= (((100) < (t2 + 61)?(100):(t2 + 61))); t4 += 1) {
    for (t6 = (((t4 + 2) < (t2)?(t4 + 2):(t2))); t6 <= (((t2 + 63) < (t4 + 511)?(t2 + 63):(t4 + 511))); t6 += 1) 
      a[t4][t6 - t4] = ((a[t4 - 1][(t6 - t4) - 1] + a[t4 - 1][t6 - t4]) + a[t4 - 1][(t6 - t4) + 1]);
  }
}
;
return(0);
}
deleting varDecl i
deleting varDecl t
// sourcefile has 1 children
they are
FunctionDecl
IR_chillCode::~IR_chillCode()
output happening as part of the destructor !!

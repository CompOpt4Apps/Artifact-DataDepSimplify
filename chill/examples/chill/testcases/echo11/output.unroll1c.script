source: unroll1.c
dest: unroll1c.c
procedure is foo
format: rose
format rose
LOOP ':' NUMBER   parse the file because we haven't yet
CIT_ROSE
LOOP  ir_code = new IR_roseCode(source_filename, procedure_name);
IR_roseCode::IR_roseCode( file_name unroll1.c, proc_name foo )
IR_roseCode::IR_roseCode  actually parsing unroll1.c using rose?
IR_roseCode::IR_roseCode()  project defined. file parsed by Rose
creating chillAST from Rose AST
ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int n   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name n, arraypart  )
2name n numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'n' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'float *'
vartype = 'float *'
arraypart = ''
float * x   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type float *, name x, arraypart  )
2name x numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'float *' 'x' ''"  n_dim 1  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart  )
2name i numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'i' ''"  n_dim 0  )

ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float *' ParmVar  'x' )

ConvertXXXXXRefExpr()
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
ConvertXXXXVarDecl()
original vartype 'float [15UL]'
vartype = 'float '
arraypart = '[15]'
float  x   arraypart = '[15]'
2chillAST_VarDecl::chillAST_VarDecl( type float , name x, arraypart [15] )
2name x numdimensions 1
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'float ' 'x' '[15]'"  n_dim 1  )

ConvertXXXXXRefExpr()
unhandled top node 423/429 of type SgSymbolTable
unhandled top node 424/429 of type SgTypeTable
topnode 425 of 429, first == NULL??  blurb numeric_label
unhandled top node 426/429 of type Sg_File_Info
unhandled top node 427/429 of type Sg_File_Info
unhandled top node 428/429 of type SgSourceFile
found the procedure named foo
local Function Definition 0x1d94bb0

void foo( int n, float *x )
{
  int i;
  for (i = 1; i <= 15; i++) 
    x[i] = (2.0f * ((float) i));

}


printing whole file


// sourcefile has 2 children
they are
FunctionDecl
FunctionDecl

// this source derived from CHILL AST originally from file 'unroll1.c' as parsed by frontend compiler rose


void foo( int n, float *x )
{
  int i;
  for (i = 1; i <= 15; i++) 
    x[i] = (2.0f * ((float) i));

}

int main(  )
{
  float  x[15];
  foo(15, x);
  return(0);

}

//CHILL AST originally from file 'unroll1.c'

(FunctionDecl void foo(int n, float *x)
  (CompoundStmt 
    (VarDecl "'int' 'i' ''"  n_dim 0  )
    (ForStmt 
      (BinaryOperator '='
        (DeclRefExpr 'int' Var  'i' )
        (IntegerLiteral 'int' 1)
      )
      (BinaryOperator '<='
        (DeclRefExpr 'int' Var  'i' )
        (IntegerLiteral 'int' 15)
      )
      (UnaryOperator postfix ++
        (DeclRefExpr 'int' Var  'i' )
      )
      (CompoundStmt 
        (BinaryOperator '='
          (ArraySubscriptExpr (x) 'float' lvalue
            (DeclRefExpr 'float *' ParmVar  'x' )
            (DeclRefExpr 'int' Var  'i' )
          )
          (BinaryOperator '*'
            (FloatingLiteral 'float' 2.000000)
            (CStyleCastExpr  (float) 
              (DeclRefExpr 'int' Var  'i' )
            )
          )
        )
      )
    )
  )
)

(FunctionDecl int main()
  (CompoundStmt 
    (VarDecl "'float ' 'x' '[15]'"  n_dim 1  )
    (CallExpr void
      (DeclRefExpr 'void' 'foo' ( int n, float *x ))
      (VarDecl "'int' 'n' ''"  n_dim 0  )
      (VarDecl "'float *' 'x' ''"  n_dim 1  )
    )
    (ReturnStmt
      (IntegerLiteral 'int' 0)
    )
  )
)
need to create symbol tables?
LOOP RETURN ir_code = new IR_roseCode(source_filename, procedure_name);
yyparse  block = ir_code->GetCode();
IR_roseCode::GetCode()
chillfunc 0x1d94bb0
chillast body of func is 0x1d94de0
making a new IR_roseBlock with chillAST

void foo( int n, float *x )
{
  int i;
  for (i = 1; i <= 15; i++) 
    x[i] = (2.0f * ((float) i));

}

in yyparse, IR_Block block 0x1d95d40

IR_roseCode::FindOneLevelControlStructure()
basic block is:
block ast of type FunctionDecl

void foo( int n, float *x )
{
  int i;
  for (i = 1; i <= 15; i++) 
    x[i] = (2.0f * ((float) i));

}



*** block is a compoundstatement or a function decl or NULL

*** block is a compoundstatement or a function decl
basic block has 2 statements
making a new IR_roseBlock with NO chillAST (nil)
child 0/2 is of type VarDecl
straight line code adding to basicblock that had 0
child 0/2 = int i
child 0 is part of a basic block
now basicblock has 1 statements
child 1/2 is of type ForStmt
found a For statement (Loop) at 1/2 within a Basic Block
pushing a run of statements 0 to 0 as a block
making a new IR_roseBlock with NO chillAST (nil)
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (i = 1; i <= 15; i++) 
  x[i] = (2.0f * ((float) i));

IR_roseLoop::IR_roseLoop()    chillbody
body is:
x[i] = (2.0f * ((float) i));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
ns 0  numchildren 2

*** block is a compoundstatement or a function decl  END 
returning vector of 2 controls
(parser.yy) I found 1 loops in the procedure

parse.yy  L 505 making a new myloop loop num start 0

***                                                   ROSE (parser.yy) making a new myloop

Loop::Loop(const IR_Control *control)
control type is 0   IR_CONTROL_LOOP
in Loop::Loop, calling  build_ir_tree()

loop.cc, Loop::Loop() about to clone control
IR_roseLoop::clone()
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (i = 1; i <= 15; i++) 
  x[i] = (2.0f * ((float) i));

IR_roseLoop::IR_roseLoop()    chillbody
body is:
x[i] = (2.0f * ((float) i));


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
case IR_CONTROL_LOOP
recursing. build_ir_tree() of CONTROL_LOOP creating children  L122
IR_roseLoop::body()
making a new IR_roseBlock with chillAST
x[i] = (2.0f * ((float) i));

irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure()
basic block is:
block ast of type CompoundStmt
x[i] = (2.0f * ((float) i));



*** block is a compoundstatement or a function decl or NULL

*** block is a compoundstatement or a function decl
found a top level Basic Block Compound Statement
basic block has 1 statements
making a new IR_roseBlock with NO chillAST (nil)
child 0/1 is of type BinaryOperator
straight line code adding to basicblock that had 0
child 0/1 = x[i] = (2.0f * ((float) i))
child 0 is part of a basic block
now basicblock has 1 statements
ns 1  numchildren 1
NOT sending straightline run of statements, because it would be the entire block. There are no control statements in the block

*** block is a compoundstatement or a function decl  END 
returning vector of 0 controls
irtools.cc BACK FROM FindOneLevelControlStructure()
controls.size() == 0
build_ir_tree()  vector result has 1 parts
recursing. build_ir_tree() of CONTROL_LOOP creating children DONE
build_ir_tree()  vector result has 1 parts
in Loop::Loop. ir_tree has 1 parts
before init_loops, 0 freevar
dammit 0

                                                  Loop::init_loop()
extract
nesting level stmt size = 1
1 statements?
i 0
stmt_nesting_level[0] = 1
in init_loop, made 1 stmts
max nesting level 1 at location 0
itn = stmt[0]
parent
IR_CONTROL_LOOP  cur_dim 0
making scalar symbol i
index[0] = 'i'
align loops by names,

set relation variable names                      ****
Relation r(1)
it's a loop.  temp_depth 0
r.name_set_var( 1, i )
Relation r   {[i] : TRUE }
extract information from loop/if structures
IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
loop.cc, got the lower bound. it is:
1

exp2formula()
{[i] : TRUE }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
15

IR_roseLoop::stop_cond()
exp2formula()
{[i] : 1 <= i }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
IR_roseCode::QueryExpOperation()
abs(c)
add information for missing loops   n_dim(1)
loop.cc L441 insert the statement
loop.cc before extract
IR_roseBlock::extract()
block has chillAST of type CompoundStmt
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
code =  ocg->CreateSubstitutedStmt(...)


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
0 vars and 0 substitutions
1 nodes in old code. was:
stmt(0) = x[i] = (2.0f * ((float) i))

nosubs old code was:
stmt = x[i] = (2.0f * ((float) i))
stmt
for int i < n_dim(1)
whew
                                        loop.cc   Loop::init_loop() END

after init_loops, 0 freevar
loop.cc 1 statements
this really REALLY needs some comments
i 0
j 0

irtools.cc test_data_dependences()  0 freevars
repr1   x[i] = (2.0f * ((float) i))
repr2   x[i] = (2.0f * ((float) i))
index 0 i
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
repr1 == repr2
repr1->dump()
x[i] = (2.0f * ((float) i))
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr

chillstatement 0 = x[i] = (2.0f * ((float) i))
chillAST_ArraySubscriptExpr::gatherArrayRefs setting imwrittento 1 for x
x
x
1 total refs 
ref[0] x is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() 'x' write 1
access of size 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
WRITE  array access 0 = x
that was the list


before mapRefstoStatements()
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i]
trivially true because they are exactly the same statement
after mapRefstoStatements()

i 0
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_a = x
j 0
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 0 0
*sym_a == *sym_b
0 a->is_write()
0 b->is_write()

irtools.cc ij 0 0   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e1,e2 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e1,e2 : ( i = e1 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e1,e2 : ( i = e1 && i' = e2 && e2 = e1 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e1,e2 : ( i = e1 && i' = e2 && e2 = e1 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( i' = i && i' = i+In_1 && 1 <= i <= 15 )) }

dv created in if                                         ***
leaving relation2dependences, 0 and 0 dependences

irtools.cc ij 0 0 dv.first 0   dv.second 0
234LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0


*** LOTS OF REDUCTIONS ***


i range 1
i 0
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
init dumb transformation relations
                                                  at bottom of Loop::Loop, printCode


                             parser 1          unroll( a,b,c )
loop.cc apply_xform( set )
{[i] -> [chill_t1] : i = chill_t1 }
FIX THIS rose in generic loop.cc
loop vars 0 i
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreateIdent( chill_t1 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t1, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t1' )
CG_chillBuilder::CreatePlus()
CG_utils.cc  output_substitutions()          DONE



*** gonna die  *i = 0
1 uninterpreted symbols
loop vars 0 i
CG_utils.cc  output_substitutions()
v Out_1
CG_utils.cc  output_substitutions()          DONE

loop.cc stmt[*i].code =


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[i] = (2.0f * ((float) i))
sub 0  chill_t1

subbing chill_t1
for  i

SubABinaryOperator() subbing old variable i in 
x[i] = (2.0f * ((float) i))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable i in 
2.0f * ((float) i)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'i' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
loop.cc LEAVING apply_xform( set )

loop.cc apply_xform( set )
{[chill_t1] -> [chill_t2] : chill_t1 = chill_t2 }
FIX THIS rose in generic loop.cc
loop vars 0 chill_t1
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreateIdent( chill_t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t2' )
CG_chillBuilder::CreatePlus()
CG_utils.cc  output_substitutions()          DONE



*** gonna die  *i = 0
1 uninterpreted symbols
loop vars 0 chill_t1
CG_utils.cc  output_substitutions()
v Out_1
CG_utils.cc  output_substitutions()          DONE

loop.cc stmt[*i].code =


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t1] = (2.0f * ((float) chill_t1))
sub 0  chill_t2

subbing chill_t2
for  chill_t1

SubABinaryOperator() subbing old variable chill_t1 in 
x[chill_t1] = (2.0f * ((float) chill_t1))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t1' )
  )
)

SubABinaryOperator() subbing old variable chill_t1 in 
2.0f * ((float) chill_t1)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t1' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
loop.cc LEAVING apply_xform( set )

loop.cc apply_xform( set )
{[chill_t2] -> [chill_t3] : chill_t2 = chill_t3 }
FIX THIS rose in generic loop.cc
loop vars 0 chill_t2
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
CG_utils.cc  output_substitutions()          DONE



*** gonna die  *i = 0
1 uninterpreted symbols
loop vars 0 chill_t2
CG_utils.cc  output_substitutions()
v Out_1
CG_utils.cc  output_substitutions()          DONE

loop.cc stmt[*i].code =


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t2] = (2.0f * ((float) chill_t2))
sub 0  chill_t3

subbing chill_t3
for  chill_t2

SubABinaryOperator() subbing old variable chill_t2 in 
x[chill_t2] = (2.0f * ((float) chill_t2))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t2' )
  )
)

SubABinaryOperator() subbing old variable chill_t2 in 
2.0f * ((float) chill_t2)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t2' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
loop.cc LEAVING apply_xform( set )

loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+1' ??
CG_chillBuilder::CreateInt( 1 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 1

subbing chill_t3 + 1
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+2' ??
CG_chillBuilder::CreateInt( 2 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 2

subbing chill_t3 + 2
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+3' ??
CG_chillBuilder::CreateInt( 3 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 3

subbing chill_t3 + 3
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+4' ??
CG_chillBuilder::CreateInt( 4 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 4

subbing chill_t3 + 4
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+5' ??
CG_chillBuilder::CreateInt( 5 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 5

subbing chill_t3 + 5
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+6' ??
CG_chillBuilder::CreateInt( 6 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 6

subbing chill_t3 + 6
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 6] = (2.0f * ((float) chill_t3 + 6))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
x[chill_t3 + 6] = (2.0f * ((float) chill_t3 + 6))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+7' ??
CG_chillBuilder::CreateInt( 7 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 7

subbing chill_t3 + 7
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 7] = (2.0f * ((float) chill_t3 + 7))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
x[chill_t3 + 6] = (2.0f * ((float) chill_t3 + 6))
x[chill_t3 + 7] = (2.0f * ((float) chill_t3 + 7))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+8' ??
CG_chillBuilder::CreateInt( 8 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 8

subbing chill_t3 + 8
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 8] = (2.0f * ((float) chill_t3 + 8))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
x[chill_t3 + 6] = (2.0f * ((float) chill_t3 + 6))
x[chill_t3 + 7] = (2.0f * ((float) chill_t3 + 7))
x[chill_t3 + 8] = (2.0f * ((float) chill_t3 + 8))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+9' ??
CG_chillBuilder::CreateInt( 9 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 9

subbing chill_t3 + 9
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 9] = (2.0f * ((float) chill_t3 + 9))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
x[chill_t3 + 6] = (2.0f * ((float) chill_t3 + 6))
x[chill_t3 + 7] = (2.0f * ((float) chill_t3 + 7))
x[chill_t3 + 8] = (2.0f * ((float) chill_t3 + 8))
x[chill_t3 + 9] = (2.0f * ((float) chill_t3 + 9))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+10' ??
CG_chillBuilder::CreateInt( 10 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 10

subbing chill_t3 + 10
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 10] = (2.0f * ((float) chill_t3 + 10))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
x[chill_t3 + 6] = (2.0f * ((float) chill_t3 + 6))
x[chill_t3 + 7] = (2.0f * ((float) chill_t3 + 7))
x[chill_t3 + 8] = (2.0f * ((float) chill_t3 + 8))
x[chill_t3 + 9] = (2.0f * ((float) chill_t3 + 9))
x[chill_t3 + 10] = (2.0f * ((float) chill_t3 + 10))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+11' ??
CG_chillBuilder::CreateInt( 11 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 11

subbing chill_t3 + 11
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 11] = (2.0f * ((float) chill_t3 + 11))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
x[chill_t3 + 6] = (2.0f * ((float) chill_t3 + 6))
x[chill_t3 + 7] = (2.0f * ((float) chill_t3 + 7))
x[chill_t3 + 8] = (2.0f * ((float) chill_t3 + 8))
x[chill_t3 + 9] = (2.0f * ((float) chill_t3 + 9))
x[chill_t3 + 10] = (2.0f * ((float) chill_t3 + 10))
x[chill_t3 + 11] = (2.0f * ((float) chill_t3 + 11))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+12' ??
CG_chillBuilder::CreateInt( 12 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 12

subbing chill_t3 + 12
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 12] = (2.0f * ((float) chill_t3 + 12))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
x[chill_t3 + 6] = (2.0f * ((float) chill_t3 + 6))
x[chill_t3 + 7] = (2.0f * ((float) chill_t3 + 7))
x[chill_t3 + 8] = (2.0f * ((float) chill_t3 + 8))
x[chill_t3 + 9] = (2.0f * ((float) chill_t3 + 9))
x[chill_t3 + 10] = (2.0f * ((float) chill_t3 + 10))
x[chill_t3 + 11] = (2.0f * ((float) chill_t3 + 11))
x[chill_t3 + 12] = (2.0f * ((float) chill_t3 + 12))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+13' ??
CG_chillBuilder::CreateInt( 13 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 13

subbing chill_t3 + 13
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 13] = (2.0f * ((float) chill_t3 + 13))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
x[chill_t3 + 6] = (2.0f * ((float) chill_t3 + 6))
x[chill_t3 + 7] = (2.0f * ((float) chill_t3 + 7))
x[chill_t3 + 8] = (2.0f * ((float) chill_t3 + 8))
x[chill_t3 + 9] = (2.0f * ((float) chill_t3 + 9))
x[chill_t3 + 10] = (2.0f * ((float) chill_t3 + 10))
x[chill_t3 + 11] = (2.0f * ((float) chill_t3 + 11))
x[chill_t3 + 12] = (2.0f * ((float) chill_t3 + 12))
x[chill_t3 + 13] = (2.0f * ((float) chill_t3 + 13))
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+14' ??
CG_chillBuilder::CreateInt( 14 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * ((float) chill_t3))
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  chill_t3 + 14

subbing chill_t3 + 14
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
old src is =
x[chill_t3] = (2.0f * ((float) chill_t3))
substituted copy is =
x[chill_t3 + 14] = (2.0f * ((float) chill_t3 + 14))
appended code =
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
x[chill_t3 + 6] = (2.0f * ((float) chill_t3 + 6))
x[chill_t3 + 7] = (2.0f * ((float) chill_t3 + 7))
x[chill_t3 + 8] = (2.0f * ((float) chill_t3 + 8))
x[chill_t3 + 9] = (2.0f * ((float) chill_t3 + 9))
x[chill_t3 + 10] = (2.0f * ((float) chill_t3 + 10))
x[chill_t3 + 11] = (2.0f * ((float) chill_t3 + 11))
x[chill_t3 + 12] = (2.0f * ((float) chill_t3 + 12))
x[chill_t3 + 13] = (2.0f * ((float) chill_t3 + 13))
x[chill_t3 + 14] = (2.0f * ((float) chill_t3 + 14))
new_stmt.IS = 
update dependence graph
                                                  loop_unroll.cc returning new_stmts
CodeGen::CodeGen() sanity checking
num_stmt 2  2 xforms
here goes
here goes
CodeGen::CodeGen() DONE
CG.cc line 164, CG_result::printString()
stmts.size() 2

CG_result::printRepr(ocg, stmts) 
DYINGHERE
s 0/2
result: t2 = Out_1, 0
s 1/2
result: t2 = Out_1, 0
return printRepr( ... )
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_split::printRepr()
loop_print_repr()  guard_repr NULL
CG.cc  CG_loop printrepr with more arguments
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
CG_utils.cc  output_substitutions()          DONE

CG.cc  CG_loop printrepr with more arguments
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
CG_utils.cc  output_substitutions()          DONE

CG_utils.cc loop_print_repr recursive
loop_print_repr()  guard_repr NULL
s0(1);
s1(1);

script success!
parser.yy almost done
1 loop?   (loop_num_start == loop_num_end)

Loop::getCode( 1 )

CG_result::printRepr(ocg, stmts) 
DYINGHERE
s 0/2
result: t2 = Out_1, 0
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from 
s0: {[t1,t2,t3] : t1 = 0 && t3 = 0 && t2 = 1 }
s1: {[t1,t2,t3] : t3 = 1 && t1 = 0 && t2 = 1 }

(DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
s 1/2
result: t2 = Out_1, 0
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
return printRepr( ... )
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 1 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateAnd()
CG_split::printRepr()
loop_print_repr()  guard_repr NULL
CG.cc  CG_loop printrepr with more arguments
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreatePlus()
CG_utils.cc  output_substitutions()          DONE

chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
1 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * ((float) chill_t3))
sub 0  1

subbing 1
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * ((float) chill_t3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (DeclRefExpr 'int' Var  'chill_t3' )
)

sub in FL
SubCStyleCastExpr()  subexpr is type DeclRefExpr
CG.cc  CG_loop printrepr with more arguments
CG_chillBuilder::CreateInt( 1 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateAnd()
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreatePlus()
CG_utils.cc  output_substitutions()          DONE

chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_FloatingLiteral::clone()  allthedigits (nil) 
chillAST_FloatingLiteral::chillAST_FloatingLiteral( old ) allthedigits (nil)
2.0f  2.0f
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
14 nodes in old code. was:
stmt(0) = x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
stmt(1) = x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
stmt(2) = x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
stmt(3) = x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
stmt(4) = x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
stmt(5) = x[chill_t3 + 6] = (2.0f * ((float) chill_t3 + 6))
stmt(6) = x[chill_t3 + 7] = (2.0f * ((float) chill_t3 + 7))
stmt(7) = x[chill_t3 + 8] = (2.0f * ((float) chill_t3 + 8))
stmt(8) = x[chill_t3 + 9] = (2.0f * ((float) chill_t3 + 9))
stmt(9) = x[chill_t3 + 10] = (2.0f * ((float) chill_t3 + 10))
stmt(10) = x[chill_t3 + 11] = (2.0f * ((float) chill_t3 + 11))
stmt(11) = x[chill_t3 + 12] = (2.0f * ((float) chill_t3 + 12))
stmt(12) = x[chill_t3 + 13] = (2.0f * ((float) chill_t3 + 13))
stmt(13) = x[chill_t3 + 14] = (2.0f * ((float) chill_t3 + 14))
sub 0  1

subbing 1
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = (2.0f * ((float) chill_t3 + 1))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 1)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 1)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = (2.0f * ((float) chill_t3 + 2))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 2)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 2)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 2)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 3] = (2.0f * ((float) chill_t3 + 3))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 3)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 3
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 3)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 3)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 3)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 3
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 3)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 4] = (2.0f * ((float) chill_t3 + 4))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 4)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 4
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 4)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 4)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 4)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 4
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 4)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 5] = (2.0f * ((float) chill_t3 + 5))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 5)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 5
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 5)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 5)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 5)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 5
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 5)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 6] = (2.0f * ((float) chill_t3 + 6))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 6)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 6
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 6)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 6)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 6)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 6
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 6)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 7] = (2.0f * ((float) chill_t3 + 7))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 7)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 7
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 7)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 7)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 7)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 7
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 7)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 8] = (2.0f * ((float) chill_t3 + 8))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 8)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 8
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 8)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 8)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 8)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 8
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 8)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 9] = (2.0f * ((float) chill_t3 + 9))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 9)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 9
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 9)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 9)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 9)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 9
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 9)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 10] = (2.0f * ((float) chill_t3 + 10))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 10)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 10
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 10)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 10)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 10)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 10
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 10)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 11] = (2.0f * ((float) chill_t3 + 11))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 11)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 11
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 11)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 11)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 11)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 11
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 11)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 12] = (2.0f * ((float) chill_t3 + 12))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 12)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 12
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 12)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 12)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 12)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 12
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 12)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 13] = (2.0f * ((float) chill_t3 + 13))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 13)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 13
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 13)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 13)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 13)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 13
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 13)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 14] = (2.0f * ((float) chill_t3 + 14))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (FloatingLiteral 'float' 2.000000)
  (CStyleCastExpr  (float) 
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 14)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 14
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 14)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * ((float) chill_t3 + 14)
op *   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 14)
  )
)

sub in FL
SubCStyleCastExpr()  subexpr is type BinaryOperator
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 14
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 14)

CG_utils.cc loop_print_repr recursive
loop_print_repr()  guard_repr NULL
IR_roseCode::ReplaceCode( old, *repr)
old was
for (i = 1; i <= 15; i++) 
  x[chill_t3] = (2.0f * ((float) chill_t3));


old parent was

{
int i;
for (i = 1; i <= 15; i++) 
  x[chill_t3] = (2.0f * ((float) chill_t3));


}
inserting x[1 + 1] = (2.0f * ((float) 1 + 1))
inserting x[1 + 2] = (2.0f * ((float) 1 + 2))
inserting x[1 + 3] = (2.0f * ((float) 1 + 3))
inserting x[1 + 4] = (2.0f * ((float) 1 + 4))
inserting x[1 + 5] = (2.0f * ((float) 1 + 5))
inserting x[1 + 6] = (2.0f * ((float) 1 + 6))
inserting x[1 + 7] = (2.0f * ((float) 1 + 7))
inserting x[1 + 8] = (2.0f * ((float) 1 + 8))
inserting x[1 + 9] = (2.0f * ((float) 1 + 9))
inserting x[1 + 10] = (2.0f * ((float) 1 + 10))
inserting x[1 + 11] = (2.0f * ((float) 1 + 11))
inserting x[1 + 12] = (2.0f * ((float) 1 + 12))
inserting x[1 + 13] = (2.0f * ((float) 1 + 13))
inserting x[1 + 14] = (2.0f * ((float) 1 + 14))

new parent2 is

{
int i;
x[1] = (2.0f * 1.0f);
x[1 + 1] = (2.0f * ((float) 1 + 1));
x[1 + 2] = (2.0f * ((float) 1 + 2));
x[1 + 3] = (2.0f * ((float) 1 + 3));
x[1 + 4] = (2.0f * ((float) 1 + 4));
x[1 + 5] = (2.0f * ((float) 1 + 5));
x[1 + 6] = (2.0f * ((float) 1 + 6));
x[1 + 7] = (2.0f * ((float) 1 + 7));
x[1 + 8] = (2.0f * ((float) 1 + 8));
x[1 + 9] = (2.0f * ((float) 1 + 9));
x[1 + 10] = (2.0f * ((float) 1 + 10));
x[1 + 11] = (2.0f * ((float) 1 + 11));
x[1 + 12] = (2.0f * ((float) 1 + 12));
x[1 + 13] = (2.0f * ((float) 1 + 13));
x[1 + 14] = (2.0f * ((float) 1 + 14));
}
deleting varDecl i
// sourcefile has 2 children
they are
FunctionDecl
FunctionDecl
IR_chillCode::~IR_chillCode()
output happening as part of the destructor !!

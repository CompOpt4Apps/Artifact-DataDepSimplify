source: hack.c
procedure is main
format: rose
format rose
LOOP ':' NUMBER   parse the file because we haven't yet
CIT_ROSE
LOOP  ir_code = new IR_roseCode(source_filename, procedure_name);
IR_roseCode::IR_roseCode( file_name hack.c, proc_name main )
IR_roseCode::IR_roseCode  actually parsing hack.c using rose?
IR_roseCode::IR_roseCode()  project defined. file parsed by Rose
creating chillAST from Rose AST
430 top nodes





ConvertXXXXVarDecl()
original vartype 'box_type *'
vartype = 'box_type *'
arraypart = ''
box_type * box   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type box_type *, name box, arraypart  )
2name box numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'box_type *' 'box' ''"  n_dim 1  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int phi_id   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name phi_id, arraypart  )
2name phi_id numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'phi_id' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int rhs_id   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name rhs_id, arraypart  )
2name rhs_id numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'rhs_id' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int temp_phi_id   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name temp_phi_id, arraypart  )
2name temp_phi_id numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'temp_phi_id' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'double'
vartype = 'double'
arraypart = ''
double a   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type double, name a, arraypart  )
2name a numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'double' 'a' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'double'
vartype = 'double'
arraypart = ''
double b   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type double, name b, arraypart  )
2name b numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'double' 'b' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'double'
vartype = 'double'
arraypart = ''
double h   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type double, name h, arraypart  )
2name h numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'double' 'h' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int sweep   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name sweep, arraypart  )
2name sweep numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'sweep' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart  )
2name i numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'i' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart  )
2name j numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'j' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int k   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name k, arraypart  )
2name k numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'k' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int s   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name s, arraypart  )
2name s numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 's' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int I   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name I, arraypart  )
2name I numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'I' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int J   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name J, arraypart  )
2name J numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'J' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int K   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name K, arraypart  )
2name K numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'K' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int ghosts   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name ghosts, arraypart  )
2name ghosts numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'ghosts' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'double'
vartype = 'double'
arraypart = ''
double h2inv   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type double, name h2inv, arraypart  )
2name h2inv numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'double' 'h2inv' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'double [64 + 8][64 + 8][64 + 8]'
vartype = 'double '
arraypart = '[72][72][72]'
double  _phi   arraypart = '[72][72][72]'
2chillAST_VarDecl::chillAST_VarDecl( type double , name _phi, arraypart [72][72][72] )
2name _phi numdimensions 3
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'double ' '_phi' '[72][72][72]'"  n_dim 3  )

ConvertXXXXVarDecl()
original vartype 'double [64 + 8][64 + 8][64 + 8]'
vartype = 'double '
arraypart = '[72][72][72]'
double  _rhs   arraypart = '[72][72][72]'
2chillAST_VarDecl::chillAST_VarDecl( type double , name _rhs, arraypart [72][72][72] )
2name _rhs numdimensions 3
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'double ' '_rhs' '[72][72][72]'"  n_dim 3  )

ConvertXXXXVarDecl()
original vartype 'double [64 + 8][64 + 8][64 + 8]'
vartype = 'double '
arraypart = '[72][72][72]'
double  _alpha   arraypart = '[72][72][72]'
2chillAST_VarDecl::chillAST_VarDecl( type double , name _alpha, arraypart [72][72][72] )
2name _alpha numdimensions 3
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'double ' '_alpha' '[72][72][72]'"  n_dim 3  )

ConvertXXXXVarDecl()
original vartype 'double [64 + 8][64 + 8][64 + 8]'
vartype = 'double '
arraypart = '[72][72][72]'
double  _beta_i   arraypart = '[72][72][72]'
2chillAST_VarDecl::chillAST_VarDecl( type double , name _beta_i, arraypart [72][72][72] )
2name _beta_i numdimensions 3
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'double ' '_beta_i' '[72][72][72]'"  n_dim 3  )

ConvertXXXXVarDecl()
original vartype 'double [64 + 8][64 + 8][64 + 8]'
vartype = 'double '
arraypart = '[72][72][72]'
double  _beta_j   arraypart = '[72][72][72]'
2chillAST_VarDecl::chillAST_VarDecl( type double , name _beta_j, arraypart [72][72][72] )
2name _beta_j numdimensions 3
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'double ' '_beta_j' '[72][72][72]'"  n_dim 3  )

ConvertXXXXVarDecl()
original vartype 'double [64 + 8][64 + 8][64 + 8]'
vartype = 'double '
arraypart = '[72][72][72]'
double  _beta_k   arraypart = '[72][72][72]'
2chillAST_VarDecl::chillAST_VarDecl( type double , name _beta_k, arraypart [72][72][72] )
2name _beta_k numdimensions 3
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'double ' '_beta_k' '[72][72][72]'"  n_dim 3  )

ConvertXXXXVarDecl()
original vartype 'double [64 + 8][64 + 8][64 + 8]'
vartype = 'double '
arraypart = '[72][72][72]'
double  _lambda   arraypart = '[72][72][72]'
2chillAST_VarDecl::chillAST_VarDecl( type double , name _lambda, arraypart [72][72][72] )
2name _lambda numdimensions 3
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'double ' '_lambda' '[72][72][72]'"  n_dim 3  )

ConvertXXXXVarDecl()
original vartype 'double [64 + 8][64 + 8][64 + 8]'
vartype = 'double '
arraypart = '[72][72][72]'
double  _temp   arraypart = '[72][72][72]'
2chillAST_VarDecl::chillAST_VarDecl( type double , name _temp, arraypart [72][72][72] )
2name _temp numdimensions 3
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'double ' '_temp' '[72][72][72]'"  n_dim 3  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int color   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name color, arraypart  )
2name color numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'color' ''"  n_dim 0  )

ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_temp) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_temp) 'double' rvalue
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_beta_i) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_beta_i) 'double' rvalue
  (ArraySubscriptExpr (_beta_i) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_beta_i) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_beta_i) 'double' rvalue
  (ArraySubscriptExpr (_beta_i) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_beta_j) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_beta_j) 'double' rvalue
  (ArraySubscriptExpr (_beta_j) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_beta_j) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_beta_j) 'double' rvalue
  (ArraySubscriptExpr (_beta_j) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'j' )
    (IntegerLiteral 'int' 1)
  )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_beta_k) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_beta_k) 'double' rvalue
  (ArraySubscriptExpr (_beta_k) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_beta_k) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_beta_k) 'double' rvalue
  (ArraySubscriptExpr (_beta_k) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'k' )
    (IntegerLiteral 'int' 1)
  )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'k' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_temp) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_temp) 'double' rvalue
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_alpha' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_alpha) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_alpha' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_alpha) 'double' rvalue
  (ArraySubscriptExpr (_alpha) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_alpha' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_temp) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_temp) 'double' rvalue
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_lambda' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_lambda) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_lambda' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_lambda) 'double' rvalue
  (ArraySubscriptExpr (_lambda) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_lambda' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_temp) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_temp) 'double' rvalue
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_rhs) 'double' rvalue
  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
  (DeclRefExpr 'int' Var  'k' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (ArraySubscriptExpr (_rhs) 'double' rvalue
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
    (DeclRefExpr 'int' Var  'k' )
  )
  (DeclRefExpr 'int' Var  'j' )
)


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 1
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
unhandled top node 424/430 of type SgSymbolTable
unhandled top node 425/430 of type SgTypeTable
topnode 426 of 430, first == NULL??  blurb numeric_label
unhandled top node 427/430 of type Sg_File_Info
unhandled top node 428/430 of type Sg_File_Info
unhandled top node 429/430 of type SgSourceFile
found the procedure named main
local Function Definition 0x1df2790

int main( box_type *box, int phi_id, int rhs_id, int temp_phi_id, double a, double b, double h, int sweep )
{
  int i;
  int j;
  int k;
  int s;
  int I;
  int J;
  int K;
  int ghosts;
  double h2inv;
  double  _phi[72][72][72];
  double  _rhs[72][72][72];
  double  _alpha[72][72][72];
  double  _beta_i[72][72][72];
  double  _beta_j[72][72][72];
  double  _beta_k[72][72][72];
  double  _lambda[72][72][72];
  double  _temp[72][72][72];
  int color;
  color = sweep;
  for (s = 0; s < ghosts; s++) {
    for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
      for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
        for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
          if (((((i + j) + k) + (color + s)) % 2) == 0) {
            _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
            _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
            _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

          }      }
    }
  }

}


printing whole file


FunctionDecl

// this source derived from CHILL AST originally from file 'hack.c' as parsed by frontend compiler rose


int main( box_type *box, int phi_id, int rhs_id, int temp_phi_id, double a, double b, double h, int sweep )
{
  int i;
  int j;
  int k;
  int s;
  int I;
  int J;
  int K;
  int ghosts;
  double h2inv;
  double  _phi[72][72][72];
  double  _rhs[72][72][72];
  double  _alpha[72][72][72];
  double  _beta_i[72][72][72];
  double  _beta_j[72][72][72];
  double  _beta_k[72][72][72];
  double  _lambda[72][72][72];
  double  _temp[72][72][72];
  int color;
  color = sweep;
  for (s = 0; s < ghosts; s++) {
    for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
      for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
        for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
          if (((((i + j) + k) + (color + s)) % 2) == 0) {
            _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
            _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
            _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

          }      }
    }
  }

}

//CHILL AST originally from file 'hack.c'

(FunctionDecl int main(box_type *box, int phi_id, int rhs_id, int temp_phi_id, double a, double b, double h, int sweep)
  (CompoundStmt 
    (VarDecl "'int' 'i' ''"  n_dim 0  )
    (VarDecl "'int' 'j' ''"  n_dim 0  )
    (VarDecl "'int' 'k' ''"  n_dim 0  )
    (VarDecl "'int' 's' ''"  n_dim 0  )
    (VarDecl "'int' 'I' ''"  n_dim 0  )
    (VarDecl "'int' 'J' ''"  n_dim 0  )
    (VarDecl "'int' 'K' ''"  n_dim 0  )
    (VarDecl "'int' 'ghosts' ''"  n_dim 0  )
    (VarDecl "'double' 'h2inv' ''"  n_dim 0  )
    (VarDecl "'double ' '_phi' '[72][72][72]'"  n_dim 3  )
    (VarDecl "'double ' '_rhs' '[72][72][72]'"  n_dim 3  )
    (VarDecl "'double ' '_alpha' '[72][72][72]'"  n_dim 3  )
    (VarDecl "'double ' '_beta_i' '[72][72][72]'"  n_dim 3  )
    (VarDecl "'double ' '_beta_j' '[72][72][72]'"  n_dim 3  )
    (VarDecl "'double ' '_beta_k' '[72][72][72]'"  n_dim 3  )
    (VarDecl "'double ' '_lambda' '[72][72][72]'"  n_dim 3  )
    (VarDecl "'double ' '_temp' '[72][72][72]'"  n_dim 3  )
    (VarDecl "'int' 'color' ''"  n_dim 0  )
    (BinaryOperator '='
      (DeclRefExpr 'int' Var  'color' )
      (DeclRefExpr 'int' ParmVar  'sweep' )
    )
    (ForStmt 
      (BinaryOperator '='
        (DeclRefExpr 'int' Var  's' )
        (IntegerLiteral 'int' 0)
      )
      (BinaryOperator '<'
        (DeclRefExpr 'int' Var  's' )
        (DeclRefExpr 'int' Var  'ghosts' )
      )
      (UnaryOperator postfix ++
        (DeclRefExpr 'int' Var  's' )
      )
      (CompoundStmt 
        (ForStmt 
          (BinaryOperator '='
            (DeclRefExpr 'int' Var  'k' )
            (BinaryOperator '+'
              (BinaryOperator '-'
                (DeclRefExpr 'int' Var  's' )
                (DeclRefExpr 'int' Var  'ghosts' )
              )
              (IntegerLiteral 'int' 1)
            )
          )
          (BinaryOperator '<'
            (DeclRefExpr 'int' Var  'k' )
            (BinaryOperator '+'
              (DeclRefExpr 'int' Var  'K' )
              (BinaryOperator '-'
                (BinaryOperator '-'
                  (DeclRefExpr 'int' Var  'ghosts' )
                  (DeclRefExpr 'int' Var  's' )
                )
                (IntegerLiteral 'int' 1)
              )
            )
          )
          (UnaryOperator postfix ++
            (DeclRefExpr 'int' Var  'k' )
          )
          (CompoundStmt 
            (ForStmt 
              (BinaryOperator '='
                (DeclRefExpr 'int' Var  'j' )
                (BinaryOperator '+'
                  (BinaryOperator '-'
                    (DeclRefExpr 'int' Var  's' )
                    (DeclRefExpr 'int' Var  'ghosts' )
                  )
                  (IntegerLiteral 'int' 1)
                )
              )
              (BinaryOperator '<'
                (DeclRefExpr 'int' Var  'j' )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'J' )
                  (BinaryOperator '-'
                    (BinaryOperator '-'
                      (DeclRefExpr 'int' Var  'ghosts' )
                      (DeclRefExpr 'int' Var  's' )
                    )
                    (IntegerLiteral 'int' 1)
                  )
                )
              )
              (UnaryOperator postfix ++
                (DeclRefExpr 'int' Var  'j' )
              )
              (CompoundStmt 
                (ForStmt 
                  (BinaryOperator '='
                    (DeclRefExpr 'int' Var  'i' )
                    (BinaryOperator '+'
                      (BinaryOperator '-'
                        (DeclRefExpr 'int' Var  's' )
                        (DeclRefExpr 'int' Var  'ghosts' )
                      )
                      (IntegerLiteral 'int' 1)
                    )
                  )
                  (BinaryOperator '<'
                    (DeclRefExpr 'int' Var  'i' )
                    (BinaryOperator '+'
                      (DeclRefExpr 'int' Var  'I' )
                      (BinaryOperator '-'
                        (BinaryOperator '-'
                          (DeclRefExpr 'int' Var  'ghosts' )
                          (DeclRefExpr 'int' Var  's' )
                        )
                        (IntegerLiteral 'int' 1)
                      )
                    )
                  )
                  (UnaryOperator postfix ++
                    (DeclRefExpr 'int' Var  'i' )
                  )
                  (CompoundStmt 
(IfStmt) forgot to implement dump()
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)
need to create symbol tables?
LOOP RETURN ir_code = new IR_roseCode(source_filename, procedure_name);
yyparse  block = ir_code->GetCode();
IR_roseCode::GetCode()
chillfunc 0x1df2790
chillast body of func is 0x1df3700
making a new IR_roseBlock with chillAST

int main( box_type *box, int phi_id, int rhs_id, int temp_phi_id, double a, double b, double h, int sweep )
{
  int i;
  int j;
  int k;
  int s;
  int I;
  int J;
  int K;
  int ghosts;
  double h2inv;
  double  _phi[72][72][72];
  double  _rhs[72][72][72];
  double  _alpha[72][72][72];
  double  _beta_i[72][72][72];
  double  _beta_j[72][72][72];
  double  _beta_k[72][72][72];
  double  _lambda[72][72][72];
  double  _temp[72][72][72];
  int color;
  color = sweep;
  for (s = 0; s < ghosts; s++) {
    for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
      for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
        for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
          if (((((i + j) + k) + (color + s)) % 2) == 0) {
            _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
            _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
            _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

          }      }
    }
  }

}

in yyparse, IR_Block block 0x1df3650

IR_roseCode::FindOneLevelControlStructure()
basic block is:
block ast of type FunctionDecl

int main( box_type *box, int phi_id, int rhs_id, int temp_phi_id, double a, double b, double h, int sweep )
{
  int i;
  int j;
  int k;
  int s;
  int I;
  int J;
  int K;
  int ghosts;
  double h2inv;
  double  _phi[72][72][72];
  double  _rhs[72][72][72];
  double  _alpha[72][72][72];
  double  _beta_i[72][72][72];
  double  _beta_j[72][72][72];
  double  _beta_k[72][72][72];
  double  _lambda[72][72][72];
  double  _temp[72][72][72];
  int color;
  color = sweep;
  for (s = 0; s < ghosts; s++) {
    for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
      for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
        for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
          if (((((i + j) + k) + (color + s)) % 2) == 0) {
            _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
            _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
            _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

          }      }
    }
  }

}



*** block is a compoundstatement or a function decl or NULL

*** block is a compoundstatement or a function decl
basic block has 20 statements
making a new IR_roseBlock with NO chillAST (nil)
child 0/20 is of type VarDecl
straight line code adding to basicblock that had 0
child 0/20 = int i
child 0 is part of a basic block
now basicblock has 1 statements
child 1/20 is of type VarDecl
straight line code adding to basicblock that had 1
child 1/20 = int j
child 1 is part of a basic block
now basicblock has 2 statements
child 2/20 is of type VarDecl
straight line code adding to basicblock that had 2
child 2/20 = int k
child 2 is part of a basic block
now basicblock has 3 statements
child 3/20 is of type VarDecl
straight line code adding to basicblock that had 3
child 3/20 = int s
child 3 is part of a basic block
now basicblock has 4 statements
child 4/20 is of type VarDecl
straight line code adding to basicblock that had 4
child 4/20 = int I
child 4 is part of a basic block
now basicblock has 5 statements
child 5/20 is of type VarDecl
straight line code adding to basicblock that had 5
child 5/20 = int J
child 5 is part of a basic block
now basicblock has 6 statements
child 6/20 is of type VarDecl
straight line code adding to basicblock that had 6
child 6/20 = int K
child 6 is part of a basic block
now basicblock has 7 statements
child 7/20 is of type VarDecl
straight line code adding to basicblock that had 7
child 7/20 = int ghosts
child 7 is part of a basic block
now basicblock has 8 statements
child 8/20 is of type VarDecl
straight line code adding to basicblock that had 8
child 8/20 = double h2inv
child 8 is part of a basic block
now basicblock has 9 statements
child 9/20 is of type VarDecl
straight line code adding to basicblock that had 9
child 9/20 = double  _phi[72][72][72]
child 9 is part of a basic block
now basicblock has 10 statements
child 10/20 is of type VarDecl
straight line code adding to basicblock that had 10
child 10/20 = double  _rhs[72][72][72]
child 10 is part of a basic block
now basicblock has 11 statements
child 11/20 is of type VarDecl
straight line code adding to basicblock that had 11
child 11/20 = double  _alpha[72][72][72]
child 11 is part of a basic block
now basicblock has 12 statements
child 12/20 is of type VarDecl
straight line code adding to basicblock that had 12
child 12/20 = double  _beta_i[72][72][72]
child 12 is part of a basic block
now basicblock has 13 statements
child 13/20 is of type VarDecl
straight line code adding to basicblock that had 13
child 13/20 = double  _beta_j[72][72][72]
child 13 is part of a basic block
now basicblock has 14 statements
child 14/20 is of type VarDecl
straight line code adding to basicblock that had 14
child 14/20 = double  _beta_k[72][72][72]
child 14 is part of a basic block
now basicblock has 15 statements
child 15/20 is of type VarDecl
straight line code adding to basicblock that had 15
child 15/20 = double  _lambda[72][72][72]
child 15 is part of a basic block
now basicblock has 16 statements
child 16/20 is of type VarDecl
straight line code adding to basicblock that had 16
child 16/20 = double  _temp[72][72][72]
child 16 is part of a basic block
now basicblock has 17 statements
child 17/20 is of type VarDecl
straight line code adding to basicblock that had 17
child 17/20 = int color
child 17 is part of a basic block
now basicblock has 18 statements
child 18/20 is of type BinaryOperator
straight line code adding to basicblock that had 18
child 18/20 = color = sweep
child 18 is part of a basic block
now basicblock has 19 statements
child 19/20 is of type ForStmt
found a For statement (Loop) at 19/20 within a Basic Block
pushing a run of statements 0 to 18 as a block
making a new IR_roseBlock with NO chillAST (nil)
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (s = 0; s < ghosts; s++) {
  for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
    for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
      for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
        if (((((i + j) + k) + (color + s)) % 2) == 0) {
          _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
          _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
          _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

        }    }
  }
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
  for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
    for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
      if (((((i + j) + k) + (color + s)) % 2) == 0) {
        _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
        _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
        _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

      }  }
}


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
ns 0  numchildren 20

*** block is a compoundstatement or a function decl  END 
returning vector of 2 controls
(parser.yy) I found 1 loops in the procedure

parse.yy  L 505 making a new myloop loop num start 0

***                                                   ROSE (parser.yy) making a new myloop

Loop::Loop(const IR_Control *control)
control type is 0   IR_CONTROL_LOOP
in Loop::Loop, calling  build_ir_tree()

loop.cc, Loop::Loop() about to clone control
IR_roseLoop::clone()
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (s = 0; s < ghosts; s++) {
  for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
    for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
      for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
        if (((((i + j) + k) + (color + s)) % 2) == 0) {
          _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
          _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
          _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

        }    }
  }
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
  for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
    for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
      if (((((i + j) + k) + (color + s)) % 2) == 0) {
        _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
        _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
        _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

      }  }
}


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
case IR_CONTROL_LOOP
recursing. build_ir_tree() of CONTROL_LOOP creating children  L122
IR_roseLoop::body()
making a new IR_roseBlock with chillAST
for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
  for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
    for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
      if (((((i + j) + k) + (color + s)) % 2) == 0) {
        _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
        _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
        _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

      }  }
}

irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure()
basic block is:
block ast of type CompoundStmt
for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
  for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
    for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
      if (((((i + j) + k) + (color + s)) % 2) == 0) {
        _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
        _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
        _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

      }  }
}



*** block is a compoundstatement or a function decl or NULL

*** block is a compoundstatement or a function decl
found a top level Basic Block Compound Statement
basic block has 1 statements
making a new IR_roseBlock with NO chillAST (nil)
child 0/1 is of type ForStmt
found a For statement (Loop)
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
  for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
    for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
      if (((((i + j) + k) + (color + s)) % 2) == 0) {
        _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
        _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
        _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

      }  }
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
  for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
    if (((((i + j) + k) + (color + s)) % 2) == 0) {
      _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
      _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
      _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

    }}


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
ns 0  numchildren 1

*** block is a compoundstatement or a function decl  END 
returning vector of 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock with chillAST
for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
  for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
    if (((((i + j) + k) + (color + s)) % 2) == 0) {
      _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
      _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
      _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

    }}

irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure()
basic block is:
block ast of type CompoundStmt
for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
  for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
    if (((((i + j) + k) + (color + s)) % 2) == 0) {
      _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
      _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
      _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

    }}



*** block is a compoundstatement or a function decl or NULL

*** block is a compoundstatement or a function decl
found a top level Basic Block Compound Statement
basic block has 1 statements
making a new IR_roseBlock with NO chillAST (nil)
child 0/1 is of type ForStmt
found a For statement (Loop)
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
  for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
    if (((((i + j) + k) + (color + s)) % 2) == 0) {
      _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
      _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
      _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

    }}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
  if (((((i + j) + k) + (color + s)) % 2) == 0) {
    _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
    _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
    _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

  }

chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
ns 0  numchildren 1

*** block is a compoundstatement or a function decl  END 
returning vector of 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock with chillAST
for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
  if (((((i + j) + k) + (color + s)) % 2) == 0) {
    _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
    _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
    _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

  }
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure()
basic block is:
block ast of type CompoundStmt
for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
  if (((((i + j) + k) + (color + s)) % 2) == 0) {
    _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
    _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
    _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

  }


*** block is a compoundstatement or a function decl or NULL

*** block is a compoundstatement or a function decl
found a top level Basic Block Compound Statement
basic block has 1 statements
making a new IR_roseBlock with NO chillAST (nil)
child 0/1 is of type ForStmt
found a For statement (Loop)
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
  if (((((i + j) + k) + (color + s)) % 2) == 0) {
    _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
    _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
    _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

  }
IR_roseLoop::IR_roseLoop()    chillbody
body is:
if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}

chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
ns 0  numchildren 1

*** block is a compoundstatement or a function decl  END 
returning vector of 1 controls
irtools.cc BACK FROM FindOneLevelControlStructure()
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
IR_roseLoop::body()
making a new IR_roseBlock with chillAST
if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure()
basic block is:
block ast of type CompoundStmt
if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}


*** block is a compoundstatement or a function decl or NULL

*** block is a compoundstatement or a function decl
found a top level Basic Block Compound Statement
basic block has 1 statements
making a new IR_roseBlock with NO chillAST (nil)
child 0/1 is of type IfStmt
straight line code adding to basicblock that had 0
child 0/1 = if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}
child 0 is part of a basic block
now basicblock has 1 statements
ns 1  numchildren 1
NOT sending straightline run of statements, because it would be the entire block. There are no control statements in the block

*** block is a compoundstatement or a function decl  END 
returning vector of 0 controls
irtools.cc BACK FROM FindOneLevelControlStructure()
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
recursing. build_ir_tree() of CONTROL_LOOP creating children DONE
build_ir_tree()  vector result has 1 parts
in Loop::Loop. ir_tree has 1 parts
before init_loops, 0 freevar
dammit 0

                                                  Loop::init_loop()
extract
nesting level stmt size = 1
1 statements?
i 0
stmt_nesting_level[0] = 4
in init_loop, made 1 stmts
max nesting level 4 at location 0
itn = stmt[0]
parent
IR_CONTROL_LOOP  cur_dim 3
making scalar symbol i
index[3] = 'i'
parent
IR_CONTROL_LOOP  cur_dim 2
making scalar symbol j
index[2] = 'j'
parent
IR_CONTROL_LOOP  cur_dim 1
making scalar symbol k
index[1] = 'k'
parent
IR_CONTROL_LOOP  cur_dim 0
making scalar symbol s
index[0] = 's'
align loops by names,

set relation variable names                      ****
Relation r(4)
it's a loop.  temp_depth 3
r.name_set_var( 4, i )
it's a loop.  temp_depth 2
r.name_set_var( 3, j )
it's a loop.  temp_depth 1
r.name_set_var( 2, k )
it's a loop.  temp_depth 0
r.name_set_var( 1, s )
Relation r   {[s,k,j,i] : TRUE }
extract information from loop/if structures
IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
loop.cc, got the lower bound. it is:
(s - ghosts) + 1

exp2formula()
{[s,k,j,i] : TRUE }

IR_roseCode::QueryExpOperation()
opstring '+'
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[s,k,j,i] : exists ( e1,e2 : ( e1+e2 <= i )) }

IR_roseCode::QueryExpOperation()
opstring '-'
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[s,k,j,i] : exists ( e1,e2 : ( e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  s
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     s
making scalar symbol s
s s
exp2formula()
{[s,k,j,i] : exists ( e1,e2 : ( e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  ghosts
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     ghosts
making scalar symbol ghosts
s ghosts
exp2formula()
{ Sym=[ghosts] [s,k,j,i] : exists ( e1,e2 : ( e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
I + ((ghosts - s) - 1)

IR_roseLoop::stop_cond()
exp2formula()
{ Sym=[ghosts] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) }

IR_roseCode::QueryExpOperation()
opstring '+'
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( i < e5+e6 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  I
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     I
making scalar symbol I
s I
exp2formula()
{ Sym=[ghosts,I] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 )) }

IR_roseCode::QueryExpOperation()
opstring '-'
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts,I] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 )) )) }

IR_roseCode::QueryExpOperation()
opstring '-'
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts,I] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 and exists ( e9,e10 : ( e9 = e7+e10 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  ghosts
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     ghosts
making scalar symbol ghosts
s ghosts
exp2formula()
{ Sym=[ghosts,I] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  s
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     s
making scalar symbol s
s s
exp2formula()
{ Sym=[ghosts,I] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
IR_roseCode::QueryExpOperation()
opstring '+'
abs(c)
IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
loop.cc, got the lower bound. it is:
(s - ghosts) + 1

exp2formula()
{ Sym=[ghosts,I] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) }

IR_roseCode::QueryExpOperation()
opstring '+'
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts,I] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( e11+e12 <= j )) }

IR_roseCode::QueryExpOperation()
opstring '-'
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts,I] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  s
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     s
making scalar symbol s
s s
exp2formula()
{ Sym=[ghosts,I] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  ghosts
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     ghosts
making scalar symbol ghosts
s ghosts
exp2formula()
{ Sym=[ghosts,I] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
J + ((ghosts - s) - 1)

IR_roseLoop::stop_cond()
exp2formula()
{ Sym=[ghosts,I] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) }

IR_roseCode::QueryExpOperation()
opstring '+'
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts,I] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( j < e15+e16 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  J
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     J
making scalar symbol J
s J
exp2formula()
{ Sym=[ghosts,I,J] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 )) }

IR_roseCode::QueryExpOperation()
opstring '-'
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts,I,J] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 )) )) }

IR_roseCode::QueryExpOperation()
opstring '-'
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts,I,J] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 and exists ( e19,e20 : ( e19 = e17+e20 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  ghosts
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     ghosts
making scalar symbol ghosts
s ghosts
exp2formula()
{ Sym=[ghosts,I,J] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  s
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     s
making scalar symbol s
s s
exp2formula()
{ Sym=[ghosts,I,J] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
IR_roseCode::QueryExpOperation()
opstring '+'
abs(c)
IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
loop.cc, got the lower bound. it is:
(s - ghosts) + 1

exp2formula()
{ Sym=[ghosts,I,J] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) }

IR_roseCode::QueryExpOperation()
opstring '+'
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts,I,J] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( e21+e22 <= k )) }

IR_roseCode::QueryExpOperation()
opstring '-'
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts,I,J] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( e21+e22 <= k and exists ( e23,e24 : ( e23 = e21+e24 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  s
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     s
making scalar symbol s
s s
exp2formula()
{ Sym=[ghosts,I,J] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( e21+e22 <= k and exists ( e23,e24 : ( e23 = e21+e24 && s = e23 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  ghosts
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     ghosts
making scalar symbol ghosts
s ghosts
exp2formula()
{ Sym=[ghosts,I,J] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( e21+e22 <= k and exists ( e23,e24 : ( e23 = e21+e24 && s = e23 && ghosts = e24 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
K + ((ghosts - s) - 1)

IR_roseLoop::stop_cond()
exp2formula()
{ Sym=[ghosts,I,J] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( 1 = e22 && e21+e22 <= k and exists ( e23,e24 : ( e23 = e21+e24 && s = e23 && ghosts = e24 )) )) }

IR_roseCode::QueryExpOperation()
opstring '+'
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts,I,J] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( 1 = e22 && e21+e22 <= k and exists ( e23,e24 : ( e23 = e21+e24 && s = e23 && ghosts = e24 )) )) and exists ( e25,e26 : ( k < e25+e26 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  K
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     K
making scalar symbol K
s K
exp2formula()
{ Sym=[ghosts,I,J,K] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( 1 = e22 && e21+e22 <= k and exists ( e23,e24 : ( e23 = e21+e24 && s = e23 && ghosts = e24 )) )) and exists ( e25,e26 : ( K = e25 && k < e25+e26 )) }

IR_roseCode::QueryExpOperation()
opstring '-'
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts,I,J,K] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( 1 = e22 && e21+e22 <= k and exists ( e23,e24 : ( e23 = e21+e24 && s = e23 && ghosts = e24 )) )) and exists ( e25,e26 : ( K = e25 && k < e25+e26 and exists ( e27,e28 : ( e27 = e26+e28 )) )) }

IR_roseCode::QueryExpOperation()
opstring '-'
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{ Sym=[ghosts,I,J,K] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( 1 = e22 && e21+e22 <= k and exists ( e23,e24 : ( e23 = e21+e24 && s = e23 && ghosts = e24 )) )) and exists ( e25,e26 : ( K = e25 && k < e25+e26 and exists ( e27,e28 : ( e27 = e26+e28 and exists ( e29,e30 : ( e29 = e27+e30 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  ghosts
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     ghosts
making scalar symbol ghosts
s ghosts
exp2formula()
{ Sym=[ghosts,I,J,K] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( 1 = e22 && e21+e22 <= k and exists ( e23,e24 : ( e23 = e21+e24 && s = e23 && ghosts = e24 )) )) and exists ( e25,e26 : ( K = e25 && k < e25+e26 and exists ( e27,e28 : ( e27 = e26+e28 and exists ( e29,e30 : ( e29 = e27+e30 && ghosts = e29 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  s
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     s
making scalar symbol s
s s
exp2formula()
{ Sym=[ghosts,I,J,K] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( 1 = e22 && e21+e22 <= k and exists ( e23,e24 : ( e23 = e21+e24 && s = e23 && ghosts = e24 )) )) and exists ( e25,e26 : ( K = e25 && k < e25+e26 and exists ( e27,e28 : ( e27 = e26+e28 and exists ( e29,e30 : ( e29 = e27+e30 && ghosts = e29 && s = e30 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
IR_roseCode::QueryExpOperation()
opstring '+'
abs(c)
IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
loop.cc, got the lower bound. it is:
0

exp2formula()
{ Sym=[ghosts,I,J,K] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( 1 = e22 && e21+e22 <= k and exists ( e23,e24 : ( e23 = e21+e24 && s = e23 && ghosts = e24 )) )) and exists ( e25,e26 : ( K = e25 && k < e25+e26 and exists ( e27,e28 : ( e27 = e26+e28 && 1 = e28 and exists ( e29,e30 : ( e29 = e27+e30 && ghosts = e29 && s = e30 )) )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
ghosts

IR_roseLoop::stop_cond()
exp2formula()
{ Sym=[ghosts,I,J,K] [s,k,j,i] : exists ( e1,e2 : ( 1 = e2 && e1+e2 <= i and exists ( e3,e4 : ( e3 = e1+e4 && s = e3 && ghosts = e4 )) )) and exists ( e5,e6 : ( I = e5 && i < e5+e6 and exists ( e7,e8 : ( e7 = e6+e8 && 1 = e8 and exists ( e9,e10 : ( e9 = e7+e10 && ghosts = e9 && s = e10 )) )) )) and exists ( e11,e12 : ( 1 = e12 && e11+e12 <= j and exists ( e13,e14 : ( e13 = e11+e14 && s = e13 && ghosts = e14 )) )) and exists ( e15,e16 : ( J = e15 && j < e15+e16 and exists ( e17,e18 : ( e17 = e16+e18 && 1 = e18 and exists ( e19,e20 : ( e19 = e17+e20 && ghosts = e19 && s = e20 )) )) )) and exists ( e21,e22 : ( 1 = e22 && e21+e22 <= k and exists ( e23,e24 : ( e23 = e21+e24 && s = e23 && ghosts = e24 )) )) and exists ( e25,e26 : ( K = e25 && k < e25+e26 and exists ( e27,e28 : ( e27 = e26+e28 && 1 = e28 and exists ( e29,e30 : ( e29 = e27+e30 && ghosts = e29 && s = e30 )) )) )) and 0 <= s }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  ghosts
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     ghosts
making scalar symbol ghosts
s ghosts
IR_roseLoop::lower_bound()
IR_roseCode::QueryExpOperation()
abs(c)
add information for missing loops   n_dim(4)
loop.cc L441 insert the statement
loop.cc before extract
IR_roseBlock::extract()
block has chillAST of type CompoundStmt
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
code =  ocg->CreateSubstitutedStmt(...)


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
0 vars and 0 substitutions
1 nodes in old code. was:
stmt(0) = if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}

nosubs old code was:
stmt = if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}
stmt
for int i < n_dim(4)
whew
                                        loop.cc   Loop::init_loop() END

after init_loops, 4 freevar
loop.cc 1 statements
this really REALLY needs some comments
i 0
j 0

irtools.cc test_data_dependences()  4 freevars
repr1   if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}
repr2   if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}
index 0 s
index 1 k
index 2 j
index 3 i
IS1  { Sym=[ghosts,I,J,K] [s,k,j,i] : 0 <= s < ghosts && s < ghosts+i && 2+s+i <= ghosts+I && s < ghosts+j && 2+s+j <= ghosts+J && s < ghosts+k && 2+s+k <= ghosts+K }
IS2  { Sym=[ghosts,I,J,K] [s,k,j,i] : 0 <= s < ghosts && s < ghosts+i && 2+s+i <= ghosts+I && s < ghosts+j && 2+s+j <= ghosts+J && s < ghosts+k && 2+s+k <= ghosts+K }
repr1 == repr2
repr1->dump()
if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}
IR_roseCode::FindArrayRef()
there are 1 chill statements in this repr

chillstatement 0 = if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}
(IfStmt) forgot to implement gatherArrayRefs()
(IfStmt) forgot to implement dump()
if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));


0 total refs 
access of size 0
that was the list


before mapRefstoStatements()
after mapRefstoStatements()

LEAVING test_data_dependences()  first size 0    second size 0

dv.first.size() 0


*** LOTS OF REDUCTIONS ***


i range 1
i 0
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
init dumb transformation relations
                                                  at bottom of Loop::Loop, printCode
CodeGen::CodeGen() sanity checking
num_stmt 1  1 xforms
here goes
CodeGen::CodeGen() DONE
CG.cc line 164, CG_result::printString()
stmts.size() 1

CG_result::printRepr(ocg, stmts) 
DYINGHERE
s 0/1
result: t2 = Out_1, 0
result: t4 = Out_1, 0
result: t6 = Out_1, 0
result: t8 = Out_1, 0
return printRepr( ... )
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
v Out_1
v Out_1
v Out_1
CG_utils.cc  output_substitutions()          DONE


}for(t2 = 0; t2 <= 3; t2++) {
  for(t4 = t2-3; t4 <= -t2+66; t4++) {
    for(t6 = t2-3; t6 <= -t2+66; t6++) {
      for(t8 = t2-3; t8 <= -t2+66; t8++) {
        s0(t2,t4,t6,t8);
      }
    }
  }
}

script success!
parser.yy almost done
1 loop?   (loop_num_start == loop_num_end)

Loop::getCode( 1 )

CG_result::printRepr(ocg, stmts) 
DYINGHERE
s 0/1
result: t2 = Out_1, 0
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from 
(DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
result: t4 = Out_1, 0
CG_chillBuilder::CreateIdent( t4 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t4, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't4' )
CG_chillBuilder::CreatePlus()
result: t6 = Out_1, 0
CG_chillBuilder::CreateIdent( t6 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t6, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't6' )
CG_chillBuilder::CreatePlus()
result: t8 = Out_1, 0
CG_chillBuilder::CreateIdent( t8 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t8, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't8' )
CG_chillBuilder::CreatePlus()
return printRepr( ... )
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateInt( 3 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 1 )
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )

CG_chillBuilder::CreateInductive()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreateMinus()
CG_chillBuilder::CreateInt( 66 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 3 )
CG_chillBuilder::CreateMinus()
CG_chillBuilder::CreateInt( 1 )
CG_chillBuilder::CreateIdent( t4 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t4, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't4' )

CG_chillBuilder::CreateInductive()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 3 )
CG_chillBuilder::CreateMinus()
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreateMinus()
CG_chillBuilder::CreateInt( 66 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 1 )
CG_chillBuilder::CreateIdent( t6 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t6, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't6' )

CG_chillBuilder::CreateInductive()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 3 )
CG_chillBuilder::CreateMinus()
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreateMinus()
CG_chillBuilder::CreateInt( 66 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateInt( 1 )
CG_chillBuilder::CreateIdent( t8 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t8, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't8' )

CG_chillBuilder::CreateInductive()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
v Out_1
CG_chillBuilder::CreateIdent( t4 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t4, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't4' )
CG_chillBuilder::CreatePlus()
v Out_1
CG_chillBuilder::CreateIdent( t6 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t6, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't6' )
CG_chillBuilder::CreatePlus()
v Out_1
CG_chillBuilder::CreateIdent( t8 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t8, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't8' )
CG_chillBuilder::CreatePlus()
CG_utils.cc  output_substitutions()          DONE


chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2

chillAST_ArraySubscriptExpr::chillAST_ArraySubscriptExpr() 2
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
4 vars and 4 substitutions
1 nodes in old code. was:
stmt(0) = if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}
sub 0  t2
sub 1  t4
sub 2  t6
sub 3  t8

subbing t2
for  s
subbing t4
for  k
subbing t6
for  j
subbing t8
for  i

SubIfStmt()
if (((((i + j) + k) + (color + s)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}

SubABinaryOperator() subbing old variable s in 
((((i + j) + k) + (color + s)) % 2) == 0
op ==   rhs type IntegerLiteral
(IntegerLiteral 'int' 0)

SubABinaryOperator() subbing old variable s in 
(((i + j) + k) + (color + s)) % 2
op %   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable s in 
((i + j) + k) + (color + s)
op +   rhs type BinaryOperator
(BinaryOperator '+'
  (DeclRefExpr 'int' Var  'color' )
  (DeclRefExpr 'int' Var  's' )
)

SubABinaryOperator() subbing old variable s in 
(i + j) + k
op +   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  'k' )

SubABinaryOperator() subbing old variable s in 
i + j
op +   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  'j' )

SubABinaryOperator() subbing old variable s in 
color + s
op +   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  's' )

SubCompoundStmt()
SubABinaryOperator() subbing old variable s in 
_temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (BinaryOperator '*'
    (DeclRefExpr 'double' ParmVar  'b' )
    (DeclRefExpr 'double' Var  'h2inv' )
  )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (BinaryOperator '-'
        (BinaryOperator '+'
          (BinaryOperator '-'
            (BinaryOperator '*'
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (ArraySubscriptExpr (_beta_i) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'i' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (BinaryOperator '-'
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  'k' )
                    )
                    (DeclRefExpr 'int' Var  'j' )
                  )
                  (BinaryOperator '+'
                    (DeclRefExpr 'int' Var  'i' )
                    (IntegerLiteral 'int' 1)
                  )
                )
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  'k' )
                    )
                    (DeclRefExpr 'int' Var  'j' )
                  )
                  (DeclRefExpr 'int' Var  'i' )
                )
              )
            )
            (BinaryOperator '*'
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (ArraySubscriptExpr (_beta_i) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (BinaryOperator '-'
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  'k' )
                    )
                    (DeclRefExpr 'int' Var  'j' )
                  )
                  (DeclRefExpr 'int' Var  'i' )
                )
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  'k' )
                    )
                    (DeclRefExpr 'int' Var  'j' )
                  )
                  (BinaryOperator '-'
                    (DeclRefExpr 'int' Var  'i' )
                    (IntegerLiteral 'int' 1)
                  )
                )
              )
            )
          )
          (BinaryOperator '*'
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (ArraySubscriptExpr (_beta_j) 'double' rvalue
                (ArraySubscriptExpr (_beta_j) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'j' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (BinaryOperator '-'
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (BinaryOperator '+'
                    (DeclRefExpr 'int' Var  'j' )
                    (IntegerLiteral 'int' 1)
                  )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
            )
          )
        )
        (BinaryOperator '*'
          (ArraySubscriptExpr (_beta_j) 'double' rvalue
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (ArraySubscriptExpr (_beta_j) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
                (DeclRefExpr 'int' Var  'k' )
              )
              (DeclRefExpr 'int' Var  'j' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (BinaryOperator '-'
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (DeclRefExpr 'int' Var  'j' )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (BinaryOperator '-'
                  (DeclRefExpr 'int' Var  'j' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
          )
        )
      )
      (BinaryOperator '*'
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (ArraySubscriptExpr (_beta_k) 'double' rvalue
            (ArraySubscriptExpr (_beta_k) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  'k' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (BinaryOperator '-'
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'k' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'j' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (DeclRefExpr 'int' Var  'k' )
              )
              (DeclRefExpr 'int' Var  'j' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
        )
      )
    )
    (BinaryOperator '*'
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (ArraySubscriptExpr (_beta_k) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
            (DeclRefExpr 'int' Var  'k' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (BinaryOperator '-'
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (DeclRefExpr 'int' Var  'k' )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (BinaryOperator '-'
                (DeclRefExpr 'int' Var  'k' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
      )
    )
  )
)

SubABinaryOperator() subbing old variable s in 
(b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i])))
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (BinaryOperator '+'
    (BinaryOperator '-'
      (BinaryOperator '+'
        (BinaryOperator '-'
          (BinaryOperator '*'
            (ArraySubscriptExpr (_beta_i) 'double' rvalue
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (DeclRefExpr 'int' Var  'j' )
              )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  'i' )
                (IntegerLiteral 'int' 1)
              )
            )
            (BinaryOperator '-'
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'i' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
            )
          )
          (BinaryOperator '*'
            (ArraySubscriptExpr (_beta_i) 'double' rvalue
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (DeclRefExpr 'int' Var  'j' )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (BinaryOperator '-'
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (BinaryOperator '-'
                  (DeclRefExpr 'int' Var  'i' )
                  (IntegerLiteral 'int' 1)
                )
              )
            )
          )
        )
        (BinaryOperator '*'
          (ArraySubscriptExpr (_beta_j) 'double' rvalue
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (ArraySubscriptExpr (_beta_j) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
                (DeclRefExpr 'int' Var  'k' )
              )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  'j' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (BinaryOperator '-'
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'j' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (DeclRefExpr 'int' Var  'j' )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
          )
        )
      )
      (BinaryOperator '*'
        (ArraySubscriptExpr (_beta_j) 'double' rvalue
          (ArraySubscriptExpr (_beta_j) 'double' rvalue
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
              (DeclRefExpr 'int' Var  'k' )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (BinaryOperator '-'
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (DeclRefExpr 'int' Var  'k' )
              )
              (DeclRefExpr 'int' Var  'j' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (DeclRefExpr 'int' Var  'k' )
              )
              (BinaryOperator '-'
                (DeclRefExpr 'int' Var  'j' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
        )
      )
    )
    (BinaryOperator '*'
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (ArraySubscriptExpr (_beta_k) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
            (BinaryOperator '+'
              (DeclRefExpr 'int' Var  'k' )
              (IntegerLiteral 'int' 1)
            )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (BinaryOperator '-'
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  'k' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (DeclRefExpr 'int' Var  'k' )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
      )
    )
  )
  (BinaryOperator '*'
    (ArraySubscriptExpr (_beta_k) 'double' rvalue
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (BinaryOperator '-'
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
            (DeclRefExpr 'int' Var  'k' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
            (BinaryOperator '-'
              (DeclRefExpr 'int' Var  'k' )
              (IntegerLiteral 'int' 1)
            )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
    )
  )
)

SubABinaryOperator() subbing old variable s in 
b * h2inv
op *   rhs type DeclRefExpr
(DeclRefExpr 'double' Var  'h2inv' )

SubABinaryOperator() subbing old variable s in 
((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_k) 'double' rvalue
    (ArraySubscriptExpr (_beta_k) 'double' rvalue
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (BinaryOperator '-'
            (DeclRefExpr 'int' Var  'k' )
            (IntegerLiteral 'int' 1)
          )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable s in 
((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i])
op +   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_k) 'double' rvalue
    (ArraySubscriptExpr (_beta_k) 'double' rvalue
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
        (BinaryOperator '+'
          (DeclRefExpr 'int' Var  'k' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (BinaryOperator '+'
            (DeclRefExpr 'int' Var  'k' )
            (IntegerLiteral 'int' 1)
          )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable s in 
(_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_j) 'double' rvalue
    (ArraySubscriptExpr (_beta_j) 'double' rvalue
      (ArraySubscriptExpr (_beta_j) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  'j' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable s in 
(_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i])
op +   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_j) 'double' rvalue
    (ArraySubscriptExpr (_beta_j) 'double' rvalue
      (ArraySubscriptExpr (_beta_j) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'j' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (BinaryOperator '+'
          (DeclRefExpr 'int' Var  'j' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable s in 
_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_i) 'double' rvalue
    (ArraySubscriptExpr (_beta_i) 'double' rvalue
      (ArraySubscriptExpr (_beta_i) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'i' )
        (IntegerLiteral 'int' 1)
      )
    )
  )
)

SubABinaryOperator() subbing old variable s in 
_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'i' )
      (IntegerLiteral 'int' 1)
    )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable s in 
i + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable s in 
_phi[k][j][i + 1] - _phi[k][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable s in 
i + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable s in 
_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'i' )
      (IntegerLiteral 'int' 1)
    )
  )
)

SubABinaryOperator() subbing old variable s in 
_phi[k][j][i] - _phi[k][j][i - 1]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable s in 
i - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable s in 
_beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'j' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable s in 
j + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable s in 
_phi[k][j + 1][i] - _phi[k][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable s in 
j + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable s in 
_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'j' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable s in 
_phi[k][j][i] - _phi[k][j - 1][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable s in 
j - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable s in 
_beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (BinaryOperator '+'
          (DeclRefExpr 'int' Var  'k' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable s in 
k + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable s in 
_phi[k + 1][j][i] - _phi[k][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable s in 
k + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable s in 
_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  'k' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable s in 
_phi[k][j][i] - _phi[k - 1][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable s in 
k - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable s in 
_temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i])
op =   rhs type BinaryOperator
(BinaryOperator '-'
  (BinaryOperator '*'
    (BinaryOperator '*'
      (DeclRefExpr 'double' ParmVar  'a' )
      (ArraySubscriptExpr (_alpha) 'double' rvalue
        (ArraySubscriptExpr (_alpha) 'double' rvalue
          (ArraySubscriptExpr (_alpha) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_alpha' )
            (DeclRefExpr 'int' Var  'k' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable s in 
(a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_temp) 'double' rvalue
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable s in 
(a * _alpha[k][j][i]) * _phi[k][j][i]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable s in 
a * _alpha[k][j][i]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_alpha) 'double' rvalue
  (ArraySubscriptExpr (_alpha) 'double' rvalue
    (ArraySubscriptExpr (_alpha) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_alpha' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable s in 
_phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])))
op =   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '*'
    (ArraySubscriptExpr (_lambda) 'double' rvalue
      (ArraySubscriptExpr (_lambda) 'double' rvalue
        (ArraySubscriptExpr (_lambda) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_lambda' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (BinaryOperator '-'
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (ArraySubscriptExpr (_temp) 'double' rvalue
          (ArraySubscriptExpr (_temp) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
            (DeclRefExpr 'int' Var  'k' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (ArraySubscriptExpr (_rhs) 'double' rvalue
        (ArraySubscriptExpr (_rhs) 'double' rvalue
          (ArraySubscriptExpr (_rhs) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
            (DeclRefExpr 'int' Var  'k' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
    )
  )
)

SubABinaryOperator() subbing old variable s in 
_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_lambda) 'double' rvalue
    (ArraySubscriptExpr (_lambda) 'double' rvalue
      (ArraySubscriptExpr (_lambda) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_lambda' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (ArraySubscriptExpr (_temp) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (ArraySubscriptExpr (_rhs) 'double' rvalue
        (ArraySubscriptExpr (_rhs) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable s in 
_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (ArraySubscriptExpr (_rhs) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable s in 
_temp[k][j][i] - _rhs[k][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_rhs) 'double' rvalue
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

sub(else) = (nil)
SubIfStmt()
if (((((i + j) + k) + (color + t2)) % 2) == 0) {
  _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
  _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
  _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

}

SubABinaryOperator() subbing old variable k in 
((((i + j) + k) + (color + t2)) % 2) == 0
op ==   rhs type IntegerLiteral
(IntegerLiteral 'int' 0)

SubABinaryOperator() subbing old variable k in 
(((i + j) + k) + (color + t2)) % 2
op %   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable k in 
((i + j) + k) + (color + t2)
op +   rhs type BinaryOperator
(BinaryOperator '+'
  (DeclRefExpr 'int' Var  'color' )
  (DeclRefExpr 'int' Var  't2' )
)

SubABinaryOperator() subbing old variable k in 
(i + j) + k
op +   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  'k' )

SubABinaryOperator() subbing old variable k in 
i + j
op +   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  'j' )

SubABinaryOperator() subbing old variable k in 
color + t2
op +   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  't2' )

SubCompoundStmt()
SubABinaryOperator() subbing old variable k in 
_temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (BinaryOperator '*'
    (DeclRefExpr 'double' ParmVar  'b' )
    (DeclRefExpr 'double' Var  'h2inv' )
  )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (BinaryOperator '-'
        (BinaryOperator '+'
          (BinaryOperator '-'
            (BinaryOperator '*'
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (ArraySubscriptExpr (_beta_i) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'i' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (BinaryOperator '-'
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  'k' )
                    )
                    (DeclRefExpr 'int' Var  'j' )
                  )
                  (BinaryOperator '+'
                    (DeclRefExpr 'int' Var  'i' )
                    (IntegerLiteral 'int' 1)
                  )
                )
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  'k' )
                    )
                    (DeclRefExpr 'int' Var  'j' )
                  )
                  (DeclRefExpr 'int' Var  'i' )
                )
              )
            )
            (BinaryOperator '*'
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (ArraySubscriptExpr (_beta_i) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (BinaryOperator '-'
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  'k' )
                    )
                    (DeclRefExpr 'int' Var  'j' )
                  )
                  (DeclRefExpr 'int' Var  'i' )
                )
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  'k' )
                    )
                    (DeclRefExpr 'int' Var  'j' )
                  )
                  (BinaryOperator '-'
                    (DeclRefExpr 'int' Var  'i' )
                    (IntegerLiteral 'int' 1)
                  )
                )
              )
            )
          )
          (BinaryOperator '*'
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (ArraySubscriptExpr (_beta_j) 'double' rvalue
                (ArraySubscriptExpr (_beta_j) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'j' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (BinaryOperator '-'
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (BinaryOperator '+'
                    (DeclRefExpr 'int' Var  'j' )
                    (IntegerLiteral 'int' 1)
                  )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
            )
          )
        )
        (BinaryOperator '*'
          (ArraySubscriptExpr (_beta_j) 'double' rvalue
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (ArraySubscriptExpr (_beta_j) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
                (DeclRefExpr 'int' Var  'k' )
              )
              (DeclRefExpr 'int' Var  'j' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (BinaryOperator '-'
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (DeclRefExpr 'int' Var  'j' )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (BinaryOperator '-'
                  (DeclRefExpr 'int' Var  'j' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
          )
        )
      )
      (BinaryOperator '*'
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (ArraySubscriptExpr (_beta_k) 'double' rvalue
            (ArraySubscriptExpr (_beta_k) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  'k' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (BinaryOperator '-'
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'k' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'j' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (DeclRefExpr 'int' Var  'k' )
              )
              (DeclRefExpr 'int' Var  'j' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
        )
      )
    )
    (BinaryOperator '*'
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (ArraySubscriptExpr (_beta_k) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
            (DeclRefExpr 'int' Var  'k' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (BinaryOperator '-'
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (DeclRefExpr 'int' Var  'k' )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (BinaryOperator '-'
                (DeclRefExpr 'int' Var  'k' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
      )
    )
  )
)

SubABinaryOperator() subbing old variable k in 
(b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i])))
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (BinaryOperator '+'
    (BinaryOperator '-'
      (BinaryOperator '+'
        (BinaryOperator '-'
          (BinaryOperator '*'
            (ArraySubscriptExpr (_beta_i) 'double' rvalue
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (DeclRefExpr 'int' Var  'j' )
              )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  'i' )
                (IntegerLiteral 'int' 1)
              )
            )
            (BinaryOperator '-'
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'i' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
            )
          )
          (BinaryOperator '*'
            (ArraySubscriptExpr (_beta_i) 'double' rvalue
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (DeclRefExpr 'int' Var  'j' )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (BinaryOperator '-'
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  'k' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (BinaryOperator '-'
                  (DeclRefExpr 'int' Var  'i' )
                  (IntegerLiteral 'int' 1)
                )
              )
            )
          )
        )
        (BinaryOperator '*'
          (ArraySubscriptExpr (_beta_j) 'double' rvalue
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (ArraySubscriptExpr (_beta_j) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
                (DeclRefExpr 'int' Var  'k' )
              )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  'j' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (BinaryOperator '-'
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'j' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  'k' )
                )
                (DeclRefExpr 'int' Var  'j' )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
          )
        )
      )
      (BinaryOperator '*'
        (ArraySubscriptExpr (_beta_j) 'double' rvalue
          (ArraySubscriptExpr (_beta_j) 'double' rvalue
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
              (DeclRefExpr 'int' Var  'k' )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (BinaryOperator '-'
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (DeclRefExpr 'int' Var  'k' )
              )
              (DeclRefExpr 'int' Var  'j' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (DeclRefExpr 'int' Var  'k' )
              )
              (BinaryOperator '-'
                (DeclRefExpr 'int' Var  'j' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
        )
      )
    )
    (BinaryOperator '*'
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (ArraySubscriptExpr (_beta_k) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
            (BinaryOperator '+'
              (DeclRefExpr 'int' Var  'k' )
              (IntegerLiteral 'int' 1)
            )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (BinaryOperator '-'
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  'k' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (DeclRefExpr 'int' Var  'k' )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
      )
    )
  )
  (BinaryOperator '*'
    (ArraySubscriptExpr (_beta_k) 'double' rvalue
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (BinaryOperator '-'
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
            (DeclRefExpr 'int' Var  'k' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
            (BinaryOperator '-'
              (DeclRefExpr 'int' Var  'k' )
              (IntegerLiteral 'int' 1)
            )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
    )
  )
)

SubABinaryOperator() subbing old variable k in 
b * h2inv
op *   rhs type DeclRefExpr
(DeclRefExpr 'double' Var  'h2inv' )

SubABinaryOperator() subbing old variable k in 
((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_k) 'double' rvalue
    (ArraySubscriptExpr (_beta_k) 'double' rvalue
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (BinaryOperator '-'
            (DeclRefExpr 'int' Var  'k' )
            (IntegerLiteral 'int' 1)
          )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable k in 
((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i])
op +   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_k) 'double' rvalue
    (ArraySubscriptExpr (_beta_k) 'double' rvalue
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
        (BinaryOperator '+'
          (DeclRefExpr 'int' Var  'k' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (BinaryOperator '+'
            (DeclRefExpr 'int' Var  'k' )
            (IntegerLiteral 'int' 1)
          )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable k in 
(_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_j) 'double' rvalue
    (ArraySubscriptExpr (_beta_j) 'double' rvalue
      (ArraySubscriptExpr (_beta_j) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  'j' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable k in 
(_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i])
op +   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_j) 'double' rvalue
    (ArraySubscriptExpr (_beta_j) 'double' rvalue
      (ArraySubscriptExpr (_beta_j) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'j' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (BinaryOperator '+'
          (DeclRefExpr 'int' Var  'j' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable k in 
_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_i) 'double' rvalue
    (ArraySubscriptExpr (_beta_i) 'double' rvalue
      (ArraySubscriptExpr (_beta_i) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'i' )
        (IntegerLiteral 'int' 1)
      )
    )
  )
)

SubABinaryOperator() subbing old variable k in 
_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'i' )
      (IntegerLiteral 'int' 1)
    )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable k in 
i + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable k in 
_phi[k][j][i + 1] - _phi[k][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable k in 
i + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable k in 
_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'i' )
      (IntegerLiteral 'int' 1)
    )
  )
)

SubABinaryOperator() subbing old variable k in 
_phi[k][j][i] - _phi[k][j][i - 1]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable k in 
i - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable k in 
_beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'j' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable k in 
j + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable k in 
_phi[k][j + 1][i] - _phi[k][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable k in 
j + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable k in 
_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'j' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable k in 
_phi[k][j][i] - _phi[k][j - 1][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable k in 
j - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable k in 
_beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (BinaryOperator '+'
          (DeclRefExpr 'int' Var  'k' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable k in 
k + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable k in 
_phi[k + 1][j][i] - _phi[k][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable k in 
k + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable k in 
_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  'k' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable k in 
_phi[k][j][i] - _phi[k - 1][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'k' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable k in 
k - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable k in 
_temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i])
op =   rhs type BinaryOperator
(BinaryOperator '-'
  (BinaryOperator '*'
    (BinaryOperator '*'
      (DeclRefExpr 'double' ParmVar  'a' )
      (ArraySubscriptExpr (_alpha) 'double' rvalue
        (ArraySubscriptExpr (_alpha) 'double' rvalue
          (ArraySubscriptExpr (_alpha) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_alpha' )
            (DeclRefExpr 'int' Var  'k' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable k in 
(a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_temp) 'double' rvalue
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable k in 
(a * _alpha[k][j][i]) * _phi[k][j][i]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable k in 
a * _alpha[k][j][i]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_alpha) 'double' rvalue
  (ArraySubscriptExpr (_alpha) 'double' rvalue
    (ArraySubscriptExpr (_alpha) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_alpha' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable k in 
_phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])))
op =   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '*'
    (ArraySubscriptExpr (_lambda) 'double' rvalue
      (ArraySubscriptExpr (_lambda) 'double' rvalue
        (ArraySubscriptExpr (_lambda) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_lambda' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (BinaryOperator '-'
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (ArraySubscriptExpr (_temp) 'double' rvalue
          (ArraySubscriptExpr (_temp) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
            (DeclRefExpr 'int' Var  'k' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (ArraySubscriptExpr (_rhs) 'double' rvalue
        (ArraySubscriptExpr (_rhs) 'double' rvalue
          (ArraySubscriptExpr (_rhs) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
            (DeclRefExpr 'int' Var  'k' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
    )
  )
)

SubABinaryOperator() subbing old variable k in 
_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_lambda) 'double' rvalue
    (ArraySubscriptExpr (_lambda) 'double' rvalue
      (ArraySubscriptExpr (_lambda) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_lambda' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (ArraySubscriptExpr (_temp) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (ArraySubscriptExpr (_rhs) 'double' rvalue
        (ArraySubscriptExpr (_rhs) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
          (DeclRefExpr 'int' Var  'k' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable k in 
_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (ArraySubscriptExpr (_rhs) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
        (DeclRefExpr 'int' Var  'k' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable k in 
_temp[k][j][i] - _rhs[k][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_rhs) 'double' rvalue
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
      (DeclRefExpr 'int' Var  'k' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

sub(else) = (nil)
SubIfStmt()
if (((((i + j) + t4) + (color + t2)) % 2) == 0) {
  _temp[t4][j][i] = ((b * h2inv) * (((_beta_i[t4][j][i + 1] * (_phi[t4][j][i + 1] - _phi[t4][j][i]) - (_beta_i[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j][i - 1]))) + _beta_j[t4][j + 1][i] * (_phi[t4][j + 1][i] - _phi[t4][j][i]) - (_beta_j[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j - 1][i]))) + _beta_k[t4 + 1][j][i] * (_phi[t4 + 1][j][i] - _phi[t4][j][i]) - (_beta_k[t4][j][i] * (_phi[t4][j][i] - _phi[t4 - 1][j][i]))));
  _temp[t4][j][i] = ((a * _alpha[t4][j][i]) * _phi[t4][j][i] - _temp[t4][j][i]);
  _phi[t4][j][i] = (_phi[t4][j][i] - (_lambda[t4][j][i] * (_temp[t4][j][i] - _rhs[t4][j][i])));

}

SubABinaryOperator() subbing old variable j in 
((((i + j) + t4) + (color + t2)) % 2) == 0
op ==   rhs type IntegerLiteral
(IntegerLiteral 'int' 0)

SubABinaryOperator() subbing old variable j in 
(((i + j) + t4) + (color + t2)) % 2
op %   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable j in 
((i + j) + t4) + (color + t2)
op +   rhs type BinaryOperator
(BinaryOperator '+'
  (DeclRefExpr 'int' Var  'color' )
  (DeclRefExpr 'int' Var  't2' )
)

SubABinaryOperator() subbing old variable j in 
(i + j) + t4
op +   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  't4' )

SubABinaryOperator() subbing old variable j in 
i + j
op +   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  'j' )

SubABinaryOperator() subbing old variable j in 
color + t2
op +   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  't2' )

SubCompoundStmt()
SubABinaryOperator() subbing old variable j in 
_temp[t4][j][i] = ((b * h2inv) * (((_beta_i[t4][j][i + 1] * (_phi[t4][j][i + 1] - _phi[t4][j][i]) - (_beta_i[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j][i - 1]))) + _beta_j[t4][j + 1][i] * (_phi[t4][j + 1][i] - _phi[t4][j][i]) - (_beta_j[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j - 1][i]))) + _beta_k[t4 + 1][j][i] * (_phi[t4 + 1][j][i] - _phi[t4][j][i]) - (_beta_k[t4][j][i] * (_phi[t4][j][i] - _phi[t4 - 1][j][i]))))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (BinaryOperator '*'
    (DeclRefExpr 'double' ParmVar  'b' )
    (DeclRefExpr 'double' Var  'h2inv' )
  )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (BinaryOperator '-'
        (BinaryOperator '+'
          (BinaryOperator '-'
            (BinaryOperator '*'
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (ArraySubscriptExpr (_beta_i) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'i' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (BinaryOperator '-'
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  't4' )
                    )
                    (DeclRefExpr 'int' Var  'j' )
                  )
                  (BinaryOperator '+'
                    (DeclRefExpr 'int' Var  'i' )
                    (IntegerLiteral 'int' 1)
                  )
                )
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  't4' )
                    )
                    (DeclRefExpr 'int' Var  'j' )
                  )
                  (DeclRefExpr 'int' Var  'i' )
                )
              )
            )
            (BinaryOperator '*'
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (ArraySubscriptExpr (_beta_i) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (BinaryOperator '-'
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  't4' )
                    )
                    (DeclRefExpr 'int' Var  'j' )
                  )
                  (DeclRefExpr 'int' Var  'i' )
                )
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  't4' )
                    )
                    (DeclRefExpr 'int' Var  'j' )
                  )
                  (BinaryOperator '-'
                    (DeclRefExpr 'int' Var  'i' )
                    (IntegerLiteral 'int' 1)
                  )
                )
              )
            )
          )
          (BinaryOperator '*'
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (ArraySubscriptExpr (_beta_j) 'double' rvalue
                (ArraySubscriptExpr (_beta_j) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'j' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (BinaryOperator '-'
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (BinaryOperator '+'
                    (DeclRefExpr 'int' Var  'j' )
                    (IntegerLiteral 'int' 1)
                  )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
            )
          )
        )
        (BinaryOperator '*'
          (ArraySubscriptExpr (_beta_j) 'double' rvalue
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (ArraySubscriptExpr (_beta_j) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
                (DeclRefExpr 'int' Var  't4' )
              )
              (DeclRefExpr 'int' Var  'j' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (BinaryOperator '-'
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (DeclRefExpr 'int' Var  'j' )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (BinaryOperator '-'
                  (DeclRefExpr 'int' Var  'j' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
          )
        )
      )
      (BinaryOperator '*'
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (ArraySubscriptExpr (_beta_k) 'double' rvalue
            (ArraySubscriptExpr (_beta_k) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  't4' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (BinaryOperator '-'
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  't4' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'j' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (DeclRefExpr 'int' Var  't4' )
              )
              (DeclRefExpr 'int' Var  'j' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
        )
      )
    )
    (BinaryOperator '*'
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (ArraySubscriptExpr (_beta_k) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
            (DeclRefExpr 'int' Var  't4' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (BinaryOperator '-'
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (DeclRefExpr 'int' Var  't4' )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (BinaryOperator '-'
                (DeclRefExpr 'int' Var  't4' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
      )
    )
  )
)

SubABinaryOperator() subbing old variable j in 
(b * h2inv) * (((_beta_i[t4][j][i + 1] * (_phi[t4][j][i + 1] - _phi[t4][j][i]) - (_beta_i[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j][i - 1]))) + _beta_j[t4][j + 1][i] * (_phi[t4][j + 1][i] - _phi[t4][j][i]) - (_beta_j[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j - 1][i]))) + _beta_k[t4 + 1][j][i] * (_phi[t4 + 1][j][i] - _phi[t4][j][i]) - (_beta_k[t4][j][i] * (_phi[t4][j][i] - _phi[t4 - 1][j][i])))
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (BinaryOperator '+'
    (BinaryOperator '-'
      (BinaryOperator '+'
        (BinaryOperator '-'
          (BinaryOperator '*'
            (ArraySubscriptExpr (_beta_i) 'double' rvalue
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (DeclRefExpr 'int' Var  'j' )
              )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  'i' )
                (IntegerLiteral 'int' 1)
              )
            )
            (BinaryOperator '-'
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'i' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
            )
          )
          (BinaryOperator '*'
            (ArraySubscriptExpr (_beta_i) 'double' rvalue
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (DeclRefExpr 'int' Var  'j' )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (BinaryOperator '-'
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  'j' )
                )
                (BinaryOperator '-'
                  (DeclRefExpr 'int' Var  'i' )
                  (IntegerLiteral 'int' 1)
                )
              )
            )
          )
        )
        (BinaryOperator '*'
          (ArraySubscriptExpr (_beta_j) 'double' rvalue
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (ArraySubscriptExpr (_beta_j) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
                (DeclRefExpr 'int' Var  't4' )
              )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  'j' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (BinaryOperator '-'
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'j' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (DeclRefExpr 'int' Var  'j' )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
          )
        )
      )
      (BinaryOperator '*'
        (ArraySubscriptExpr (_beta_j) 'double' rvalue
          (ArraySubscriptExpr (_beta_j) 'double' rvalue
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
              (DeclRefExpr 'int' Var  't4' )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (BinaryOperator '-'
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (DeclRefExpr 'int' Var  't4' )
              )
              (DeclRefExpr 'int' Var  'j' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (DeclRefExpr 'int' Var  't4' )
              )
              (BinaryOperator '-'
                (DeclRefExpr 'int' Var  'j' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
        )
      )
    )
    (BinaryOperator '*'
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (ArraySubscriptExpr (_beta_k) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
            (BinaryOperator '+'
              (DeclRefExpr 'int' Var  't4' )
              (IntegerLiteral 'int' 1)
            )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (BinaryOperator '-'
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  't4' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (DeclRefExpr 'int' Var  't4' )
            )
            (DeclRefExpr 'int' Var  'j' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
      )
    )
  )
  (BinaryOperator '*'
    (ArraySubscriptExpr (_beta_k) 'double' rvalue
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (BinaryOperator '-'
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
            (DeclRefExpr 'int' Var  't4' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
            (BinaryOperator '-'
              (DeclRefExpr 'int' Var  't4' )
              (IntegerLiteral 'int' 1)
            )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
    )
  )
)

SubABinaryOperator() subbing old variable j in 
b * h2inv
op *   rhs type DeclRefExpr
(DeclRefExpr 'double' Var  'h2inv' )

SubABinaryOperator() subbing old variable j in 
((_beta_i[t4][j][i + 1] * (_phi[t4][j][i + 1] - _phi[t4][j][i]) - (_beta_i[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j][i - 1]))) + _beta_j[t4][j + 1][i] * (_phi[t4][j + 1][i] - _phi[t4][j][i]) - (_beta_j[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j - 1][i]))) + _beta_k[t4 + 1][j][i] * (_phi[t4 + 1][j][i] - _phi[t4][j][i]) - (_beta_k[t4][j][i] * (_phi[t4][j][i] - _phi[t4 - 1][j][i]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_k) 'double' rvalue
    (ArraySubscriptExpr (_beta_k) 'double' rvalue
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (BinaryOperator '-'
            (DeclRefExpr 'int' Var  't4' )
            (IntegerLiteral 'int' 1)
          )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable j in 
((_beta_i[t4][j][i + 1] * (_phi[t4][j][i + 1] - _phi[t4][j][i]) - (_beta_i[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j][i - 1]))) + _beta_j[t4][j + 1][i] * (_phi[t4][j + 1][i] - _phi[t4][j][i]) - (_beta_j[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j - 1][i]))) + _beta_k[t4 + 1][j][i] * (_phi[t4 + 1][j][i] - _phi[t4][j][i])
op +   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_k) 'double' rvalue
    (ArraySubscriptExpr (_beta_k) 'double' rvalue
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
        (BinaryOperator '+'
          (DeclRefExpr 'int' Var  't4' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (BinaryOperator '+'
            (DeclRefExpr 'int' Var  't4' )
            (IntegerLiteral 'int' 1)
          )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable j in 
(_beta_i[t4][j][i + 1] * (_phi[t4][j][i + 1] - _phi[t4][j][i]) - (_beta_i[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j][i - 1]))) + _beta_j[t4][j + 1][i] * (_phi[t4][j + 1][i] - _phi[t4][j][i]) - (_beta_j[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j - 1][i]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_j) 'double' rvalue
    (ArraySubscriptExpr (_beta_j) 'double' rvalue
      (ArraySubscriptExpr (_beta_j) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  'j' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable j in 
(_beta_i[t4][j][i + 1] * (_phi[t4][j][i + 1] - _phi[t4][j][i]) - (_beta_i[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j][i - 1]))) + _beta_j[t4][j + 1][i] * (_phi[t4][j + 1][i] - _phi[t4][j][i])
op +   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_j) 'double' rvalue
    (ArraySubscriptExpr (_beta_j) 'double' rvalue
      (ArraySubscriptExpr (_beta_j) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'j' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (BinaryOperator '+'
          (DeclRefExpr 'int' Var  'j' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable j in 
_beta_i[t4][j][i + 1] * (_phi[t4][j][i + 1] - _phi[t4][j][i]) - (_beta_i[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j][i - 1]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_i) 'double' rvalue
    (ArraySubscriptExpr (_beta_i) 'double' rvalue
      (ArraySubscriptExpr (_beta_i) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'i' )
        (IntegerLiteral 'int' 1)
      )
    )
  )
)

SubABinaryOperator() subbing old variable j in 
_beta_i[t4][j][i + 1] * (_phi[t4][j][i + 1] - _phi[t4][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'i' )
      (IntegerLiteral 'int' 1)
    )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable j in 
i + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable j in 
_phi[t4][j][i + 1] - _phi[t4][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable j in 
i + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable j in 
_beta_i[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j][i - 1])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'i' )
      (IntegerLiteral 'int' 1)
    )
  )
)

SubABinaryOperator() subbing old variable j in 
_phi[t4][j][i] - _phi[t4][j][i - 1]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable j in 
i - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable j in 
_beta_j[t4][j + 1][i] * (_phi[t4][j + 1][i] - _phi[t4][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  'j' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable j in 
j + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable j in 
_phi[t4][j + 1][i] - _phi[t4][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable j in 
j + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable j in 
_beta_j[t4][j][i] * (_phi[t4][j][i] - _phi[t4][j - 1][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'j' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable j in 
_phi[t4][j][i] - _phi[t4][j - 1][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'j' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable j in 
j - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable j in 
_beta_k[t4 + 1][j][i] * (_phi[t4 + 1][j][i] - _phi[t4][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (BinaryOperator '+'
          (DeclRefExpr 'int' Var  't4' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable j in 
t4 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable j in 
_phi[t4 + 1][j][i] - _phi[t4][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable j in 
t4 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable j in 
_beta_k[t4][j][i] * (_phi[t4][j][i] - _phi[t4 - 1][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  't4' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable j in 
_phi[t4][j][i] - _phi[t4 - 1][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  't4' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable j in 
t4 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable j in 
_temp[t4][j][i] = ((a * _alpha[t4][j][i]) * _phi[t4][j][i] - _temp[t4][j][i])
op =   rhs type BinaryOperator
(BinaryOperator '-'
  (BinaryOperator '*'
    (BinaryOperator '*'
      (DeclRefExpr 'double' ParmVar  'a' )
      (ArraySubscriptExpr (_alpha) 'double' rvalue
        (ArraySubscriptExpr (_alpha) 'double' rvalue
          (ArraySubscriptExpr (_alpha) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_alpha' )
            (DeclRefExpr 'int' Var  't4' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable j in 
(a * _alpha[t4][j][i]) * _phi[t4][j][i] - _temp[t4][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_temp) 'double' rvalue
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable j in 
(a * _alpha[t4][j][i]) * _phi[t4][j][i]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable j in 
a * _alpha[t4][j][i]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_alpha) 'double' rvalue
  (ArraySubscriptExpr (_alpha) 'double' rvalue
    (ArraySubscriptExpr (_alpha) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_alpha' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable j in 
_phi[t4][j][i] = (_phi[t4][j][i] - (_lambda[t4][j][i] * (_temp[t4][j][i] - _rhs[t4][j][i])))
op =   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '*'
    (ArraySubscriptExpr (_lambda) 'double' rvalue
      (ArraySubscriptExpr (_lambda) 'double' rvalue
        (ArraySubscriptExpr (_lambda) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_lambda' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (BinaryOperator '-'
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (ArraySubscriptExpr (_temp) 'double' rvalue
          (ArraySubscriptExpr (_temp) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
            (DeclRefExpr 'int' Var  't4' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (ArraySubscriptExpr (_rhs) 'double' rvalue
        (ArraySubscriptExpr (_rhs) 'double' rvalue
          (ArraySubscriptExpr (_rhs) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
            (DeclRefExpr 'int' Var  't4' )
          )
          (DeclRefExpr 'int' Var  'j' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
    )
  )
)

SubABinaryOperator() subbing old variable j in 
_phi[t4][j][i] - (_lambda[t4][j][i] * (_temp[t4][j][i] - _rhs[t4][j][i]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_lambda) 'double' rvalue
    (ArraySubscriptExpr (_lambda) 'double' rvalue
      (ArraySubscriptExpr (_lambda) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_lambda' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (ArraySubscriptExpr (_temp) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (ArraySubscriptExpr (_rhs) 'double' rvalue
        (ArraySubscriptExpr (_rhs) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  'j' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable j in 
_lambda[t4][j][i] * (_temp[t4][j][i] - _rhs[t4][j][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (ArraySubscriptExpr (_rhs) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  'j' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable j in 
_temp[t4][j][i] - _rhs[t4][j][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_rhs) 'double' rvalue
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  'j' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

sub(else) = (nil)
SubIfStmt()
if (((((i + t6) + t4) + (color + t2)) % 2) == 0) {
  _temp[t4][t6][i] = ((b * h2inv) * (((_beta_i[t4][t6][i + 1] * (_phi[t4][t6][i + 1] - _phi[t4][t6][i]) - (_beta_i[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6][i - 1]))) + _beta_j[t4][t6 + 1][i] * (_phi[t4][t6 + 1][i] - _phi[t4][t6][i]) - (_beta_j[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6 - 1][i]))) + _beta_k[t4 + 1][t6][i] * (_phi[t4 + 1][t6][i] - _phi[t4][t6][i]) - (_beta_k[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4 - 1][t6][i]))));
  _temp[t4][t6][i] = ((a * _alpha[t4][t6][i]) * _phi[t4][t6][i] - _temp[t4][t6][i]);
  _phi[t4][t6][i] = (_phi[t4][t6][i] - (_lambda[t4][t6][i] * (_temp[t4][t6][i] - _rhs[t4][t6][i])));

}

SubABinaryOperator() subbing old variable i in 
((((i + t6) + t4) + (color + t2)) % 2) == 0
op ==   rhs type IntegerLiteral
(IntegerLiteral 'int' 0)

SubABinaryOperator() subbing old variable i in 
(((i + t6) + t4) + (color + t2)) % 2
op %   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable i in 
((i + t6) + t4) + (color + t2)
op +   rhs type BinaryOperator
(BinaryOperator '+'
  (DeclRefExpr 'int' Var  'color' )
  (DeclRefExpr 'int' Var  't2' )
)

SubABinaryOperator() subbing old variable i in 
(i + t6) + t4
op +   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  't4' )

SubABinaryOperator() subbing old variable i in 
i + t6
op +   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  't6' )

SubABinaryOperator() subbing old variable i in 
color + t2
op +   rhs type DeclRefExpr
(DeclRefExpr 'int' Var  't2' )

SubCompoundStmt()
SubABinaryOperator() subbing old variable i in 
_temp[t4][t6][i] = ((b * h2inv) * (((_beta_i[t4][t6][i + 1] * (_phi[t4][t6][i + 1] - _phi[t4][t6][i]) - (_beta_i[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6][i - 1]))) + _beta_j[t4][t6 + 1][i] * (_phi[t4][t6 + 1][i] - _phi[t4][t6][i]) - (_beta_j[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6 - 1][i]))) + _beta_k[t4 + 1][t6][i] * (_phi[t4 + 1][t6][i] - _phi[t4][t6][i]) - (_beta_k[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4 - 1][t6][i]))))
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (BinaryOperator '*'
    (DeclRefExpr 'double' ParmVar  'b' )
    (DeclRefExpr 'double' Var  'h2inv' )
  )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (BinaryOperator '-'
        (BinaryOperator '+'
          (BinaryOperator '-'
            (BinaryOperator '*'
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (ArraySubscriptExpr (_beta_i) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  't6' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'i' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (BinaryOperator '-'
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  't4' )
                    )
                    (DeclRefExpr 'int' Var  't6' )
                  )
                  (BinaryOperator '+'
                    (DeclRefExpr 'int' Var  'i' )
                    (IntegerLiteral 'int' 1)
                  )
                )
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  't4' )
                    )
                    (DeclRefExpr 'int' Var  't6' )
                  )
                  (DeclRefExpr 'int' Var  'i' )
                )
              )
            )
            (BinaryOperator '*'
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (ArraySubscriptExpr (_beta_i) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  't6' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (BinaryOperator '-'
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  't4' )
                    )
                    (DeclRefExpr 'int' Var  't6' )
                  )
                  (DeclRefExpr 'int' Var  'i' )
                )
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (ArraySubscriptExpr (_phi) 'double' rvalue
                      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                      (DeclRefExpr 'int' Var  't4' )
                    )
                    (DeclRefExpr 'int' Var  't6' )
                  )
                  (BinaryOperator '-'
                    (DeclRefExpr 'int' Var  'i' )
                    (IntegerLiteral 'int' 1)
                  )
                )
              )
            )
          )
          (BinaryOperator '*'
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (ArraySubscriptExpr (_beta_j) 'double' rvalue
                (ArraySubscriptExpr (_beta_j) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  't6' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (BinaryOperator '-'
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (BinaryOperator '+'
                    (DeclRefExpr 'int' Var  't6' )
                    (IntegerLiteral 'int' 1)
                  )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  't6' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
            )
          )
        )
        (BinaryOperator '*'
          (ArraySubscriptExpr (_beta_j) 'double' rvalue
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (ArraySubscriptExpr (_beta_j) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
                (DeclRefExpr 'int' Var  't4' )
              )
              (DeclRefExpr 'int' Var  't6' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (BinaryOperator '-'
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (DeclRefExpr 'int' Var  't6' )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (BinaryOperator '-'
                  (DeclRefExpr 'int' Var  't6' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
          )
        )
      )
      (BinaryOperator '*'
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (ArraySubscriptExpr (_beta_k) 'double' rvalue
            (ArraySubscriptExpr (_beta_k) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  't4' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  't6' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (BinaryOperator '-'
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  't4' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  't6' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (DeclRefExpr 'int' Var  't4' )
              )
              (DeclRefExpr 'int' Var  't6' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
        )
      )
    )
    (BinaryOperator '*'
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (ArraySubscriptExpr (_beta_k) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
            (DeclRefExpr 'int' Var  't4' )
          )
          (DeclRefExpr 'int' Var  't6' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (BinaryOperator '-'
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (DeclRefExpr 'int' Var  't4' )
            )
            (DeclRefExpr 'int' Var  't6' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (BinaryOperator '-'
                (DeclRefExpr 'int' Var  't4' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  't6' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
      )
    )
  )
)

SubABinaryOperator() subbing old variable i in 
(b * h2inv) * (((_beta_i[t4][t6][i + 1] * (_phi[t4][t6][i + 1] - _phi[t4][t6][i]) - (_beta_i[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6][i - 1]))) + _beta_j[t4][t6 + 1][i] * (_phi[t4][t6 + 1][i] - _phi[t4][t6][i]) - (_beta_j[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6 - 1][i]))) + _beta_k[t4 + 1][t6][i] * (_phi[t4 + 1][t6][i] - _phi[t4][t6][i]) - (_beta_k[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4 - 1][t6][i])))
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (BinaryOperator '+'
    (BinaryOperator '-'
      (BinaryOperator '+'
        (BinaryOperator '-'
          (BinaryOperator '*'
            (ArraySubscriptExpr (_beta_i) 'double' rvalue
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (DeclRefExpr 'int' Var  't6' )
              )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  'i' )
                (IntegerLiteral 'int' 1)
              )
            )
            (BinaryOperator '-'
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  't6' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  'i' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  't6' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
            )
          )
          (BinaryOperator '*'
            (ArraySubscriptExpr (_beta_i) 'double' rvalue
              (ArraySubscriptExpr (_beta_i) 'double' rvalue
                (ArraySubscriptExpr (_beta_i) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (DeclRefExpr 'int' Var  't6' )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (BinaryOperator '-'
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  't6' )
                )
                (DeclRefExpr 'int' Var  'i' )
              )
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (ArraySubscriptExpr (_phi) 'double' rvalue
                    (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                    (DeclRefExpr 'int' Var  't4' )
                  )
                  (DeclRefExpr 'int' Var  't6' )
                )
                (BinaryOperator '-'
                  (DeclRefExpr 'int' Var  'i' )
                  (IntegerLiteral 'int' 1)
                )
              )
            )
          )
        )
        (BinaryOperator '*'
          (ArraySubscriptExpr (_beta_j) 'double' rvalue
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (ArraySubscriptExpr (_beta_j) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
                (DeclRefExpr 'int' Var  't4' )
              )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  't6' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (BinaryOperator '-'
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (BinaryOperator '+'
                  (DeclRefExpr 'int' Var  't6' )
                  (IntegerLiteral 'int' 1)
                )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (ArraySubscriptExpr (_phi) 'double' rvalue
                  (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                  (DeclRefExpr 'int' Var  't4' )
                )
                (DeclRefExpr 'int' Var  't6' )
              )
              (DeclRefExpr 'int' Var  'i' )
            )
          )
        )
      )
      (BinaryOperator '*'
        (ArraySubscriptExpr (_beta_j) 'double' rvalue
          (ArraySubscriptExpr (_beta_j) 'double' rvalue
            (ArraySubscriptExpr (_beta_j) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
              (DeclRefExpr 'int' Var  't4' )
            )
            (DeclRefExpr 'int' Var  't6' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (BinaryOperator '-'
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (DeclRefExpr 'int' Var  't4' )
              )
              (DeclRefExpr 'int' Var  't6' )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (ArraySubscriptExpr (_phi) 'double' rvalue
                (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
                (DeclRefExpr 'int' Var  't4' )
              )
              (BinaryOperator '-'
                (DeclRefExpr 'int' Var  't6' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  'i' )
          )
        )
      )
    )
    (BinaryOperator '*'
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (ArraySubscriptExpr (_beta_k) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
            (BinaryOperator '+'
              (DeclRefExpr 'int' Var  't4' )
              (IntegerLiteral 'int' 1)
            )
          )
          (DeclRefExpr 'int' Var  't6' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (BinaryOperator '-'
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (BinaryOperator '+'
                (DeclRefExpr 'int' Var  't4' )
                (IntegerLiteral 'int' 1)
              )
            )
            (DeclRefExpr 'int' Var  't6' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (ArraySubscriptExpr (_phi) 'double' rvalue
              (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
              (DeclRefExpr 'int' Var  't4' )
            )
            (DeclRefExpr 'int' Var  't6' )
          )
          (DeclRefExpr 'int' Var  'i' )
        )
      )
    )
  )
  (BinaryOperator '*'
    (ArraySubscriptExpr (_beta_k) 'double' rvalue
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (ArraySubscriptExpr (_beta_k) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (BinaryOperator '-'
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
            (DeclRefExpr 'int' Var  't4' )
          )
          (DeclRefExpr 'int' Var  't6' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (ArraySubscriptExpr (_phi) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
            (BinaryOperator '-'
              (DeclRefExpr 'int' Var  't4' )
              (IntegerLiteral 'int' 1)
            )
          )
          (DeclRefExpr 'int' Var  't6' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
    )
  )
)

SubABinaryOperator() subbing old variable i in 
b * h2inv
op *   rhs type DeclRefExpr
(DeclRefExpr 'double' Var  'h2inv' )

SubABinaryOperator() subbing old variable i in 
((_beta_i[t4][t6][i + 1] * (_phi[t4][t6][i + 1] - _phi[t4][t6][i]) - (_beta_i[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6][i - 1]))) + _beta_j[t4][t6 + 1][i] * (_phi[t4][t6 + 1][i] - _phi[t4][t6][i]) - (_beta_j[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6 - 1][i]))) + _beta_k[t4 + 1][t6][i] * (_phi[t4 + 1][t6][i] - _phi[t4][t6][i]) - (_beta_k[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4 - 1][t6][i]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_k) 'double' rvalue
    (ArraySubscriptExpr (_beta_k) 'double' rvalue
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (BinaryOperator '-'
            (DeclRefExpr 'int' Var  't4' )
            (IntegerLiteral 'int' 1)
          )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable i in 
((_beta_i[t4][t6][i + 1] * (_phi[t4][t6][i + 1] - _phi[t4][t6][i]) - (_beta_i[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6][i - 1]))) + _beta_j[t4][t6 + 1][i] * (_phi[t4][t6 + 1][i] - _phi[t4][t6][i]) - (_beta_j[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6 - 1][i]))) + _beta_k[t4 + 1][t6][i] * (_phi[t4 + 1][t6][i] - _phi[t4][t6][i])
op +   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_k) 'double' rvalue
    (ArraySubscriptExpr (_beta_k) 'double' rvalue
      (ArraySubscriptExpr (_beta_k) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_k' )
        (BinaryOperator '+'
          (DeclRefExpr 'int' Var  't4' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (BinaryOperator '+'
            (DeclRefExpr 'int' Var  't4' )
            (IntegerLiteral 'int' 1)
          )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable i in 
(_beta_i[t4][t6][i + 1] * (_phi[t4][t6][i + 1] - _phi[t4][t6][i]) - (_beta_i[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6][i - 1]))) + _beta_j[t4][t6 + 1][i] * (_phi[t4][t6 + 1][i] - _phi[t4][t6][i]) - (_beta_j[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6 - 1][i]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_j) 'double' rvalue
    (ArraySubscriptExpr (_beta_j) 'double' rvalue
      (ArraySubscriptExpr (_beta_j) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  't6' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable i in 
(_beta_i[t4][t6][i + 1] * (_phi[t4][t6][i + 1] - _phi[t4][t6][i]) - (_beta_i[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6][i - 1]))) + _beta_j[t4][t6 + 1][i] * (_phi[t4][t6 + 1][i] - _phi[t4][t6][i])
op +   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_j) 'double' rvalue
    (ArraySubscriptExpr (_beta_j) 'double' rvalue
      (ArraySubscriptExpr (_beta_j) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_j' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  't6' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (BinaryOperator '+'
          (DeclRefExpr 'int' Var  't6' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable i in 
_beta_i[t4][t6][i + 1] * (_phi[t4][t6][i + 1] - _phi[t4][t6][i]) - (_beta_i[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6][i - 1]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_beta_i) 'double' rvalue
    (ArraySubscriptExpr (_beta_i) 'double' rvalue
      (ArraySubscriptExpr (_beta_i) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_beta_i' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  'i' )
        (IntegerLiteral 'int' 1)
      )
    )
  )
)

SubABinaryOperator() subbing old variable i in 
_beta_i[t4][t6][i + 1] * (_phi[t4][t6][i + 1] - _phi[t4][t6][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'i' )
      (IntegerLiteral 'int' 1)
    )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable i in 
i + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
_phi[t4][t6][i + 1] - _phi[t4][t6][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  't6' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable i in 
i + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
_beta_i[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6][i - 1])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  'i' )
      (IntegerLiteral 'int' 1)
    )
  )
)

SubABinaryOperator() subbing old variable i in 
_phi[t4][t6][i] - _phi[t4][t6][i - 1]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  't6' )
  )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable i in 
i - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
_beta_j[t4][t6 + 1][i] * (_phi[t4][t6 + 1][i] - _phi[t4][t6][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (BinaryOperator '+'
        (DeclRefExpr 'int' Var  't6' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable i in 
t6 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
_phi[t4][t6 + 1][i] - _phi[t4][t6][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  't6' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable i in 
t6 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
_beta_j[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4][t6 - 1][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  't6' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable i in 
_phi[t4][t6][i] - _phi[t4][t6 - 1][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (BinaryOperator '-'
      (DeclRefExpr 'int' Var  't6' )
      (IntegerLiteral 'int' 1)
    )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable i in 
t6 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
_beta_k[t4 + 1][t6][i] * (_phi[t4 + 1][t6][i] - _phi[t4][t6][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (BinaryOperator '+'
          (DeclRefExpr 'int' Var  't4' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable i in 
t4 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
_phi[t4 + 1][t6][i] - _phi[t4][t6][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  't6' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable i in 
t4 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
_beta_k[t4][t6][i] * (_phi[t4][t6][i] - _phi[t4 - 1][t6][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (BinaryOperator '-'
          (DeclRefExpr 'int' Var  't4' )
          (IntegerLiteral 'int' 1)
        )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable i in 
_phi[t4][t6][i] - _phi[t4 - 1][t6][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (BinaryOperator '-'
        (DeclRefExpr 'int' Var  't4' )
        (IntegerLiteral 'int' 1)
      )
    )
    (DeclRefExpr 'int' Var  't6' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable i in 
t4 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
_temp[t4][t6][i] = ((a * _alpha[t4][t6][i]) * _phi[t4][t6][i] - _temp[t4][t6][i])
op =   rhs type BinaryOperator
(BinaryOperator '-'
  (BinaryOperator '*'
    (BinaryOperator '*'
      (DeclRefExpr 'double' ParmVar  'a' )
      (ArraySubscriptExpr (_alpha) 'double' rvalue
        (ArraySubscriptExpr (_alpha) 'double' rvalue
          (ArraySubscriptExpr (_alpha) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_alpha' )
            (DeclRefExpr 'int' Var  't4' )
          )
          (DeclRefExpr 'int' Var  't6' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
    )
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (ArraySubscriptExpr (_phi) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable i in 
(a * _alpha[t4][t6][i]) * _phi[t4][t6][i] - _temp[t4][t6][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_temp) 'double' rvalue
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  't6' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable i in 
(a * _alpha[t4][t6][i]) * _phi[t4][t6][i]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_phi) 'double' rvalue
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  't6' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable i in 
a * _alpha[t4][t6][i]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_alpha) 'double' rvalue
  (ArraySubscriptExpr (_alpha) 'double' rvalue
    (ArraySubscriptExpr (_alpha) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_alpha' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  't6' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable i in 
_phi[t4][t6][i] = (_phi[t4][t6][i] - (_lambda[t4][t6][i] * (_temp[t4][t6][i] - _rhs[t4][t6][i])))
op =   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_phi) 'double' rvalue
    (ArraySubscriptExpr (_phi) 'double' rvalue
      (ArraySubscriptExpr (_phi) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_phi' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '*'
    (ArraySubscriptExpr (_lambda) 'double' rvalue
      (ArraySubscriptExpr (_lambda) 'double' rvalue
        (ArraySubscriptExpr (_lambda) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_lambda' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (BinaryOperator '-'
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (ArraySubscriptExpr (_temp) 'double' rvalue
          (ArraySubscriptExpr (_temp) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
            (DeclRefExpr 'int' Var  't4' )
          )
          (DeclRefExpr 'int' Var  't6' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
      (ArraySubscriptExpr (_rhs) 'double' rvalue
        (ArraySubscriptExpr (_rhs) 'double' rvalue
          (ArraySubscriptExpr (_rhs) 'double' rvalue
            (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
            (DeclRefExpr 'int' Var  't4' )
          )
          (DeclRefExpr 'int' Var  't6' )
        )
        (DeclRefExpr 'int' Var  'i' )
      )
    )
  )
)

SubABinaryOperator() subbing old variable i in 
_phi[t4][t6][i] - (_lambda[t4][t6][i] * (_temp[t4][t6][i] - _rhs[t4][t6][i]))
op -   rhs type BinaryOperator
(BinaryOperator '*'
  (ArraySubscriptExpr (_lambda) 'double' rvalue
    (ArraySubscriptExpr (_lambda) 'double' rvalue
      (ArraySubscriptExpr (_lambda) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_lambda' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (BinaryOperator '-'
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (ArraySubscriptExpr (_temp) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (ArraySubscriptExpr (_rhs) 'double' rvalue
        (ArraySubscriptExpr (_rhs) 'double' rvalue
          (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
          (DeclRefExpr 'int' Var  't4' )
        )
        (DeclRefExpr 'int' Var  't6' )
      )
      (DeclRefExpr 'int' Var  'i' )
    )
  )
)

SubABinaryOperator() subbing old variable i in 
_lambda[t4][t6][i] * (_temp[t4][t6][i] - _rhs[t4][t6][i])
op *   rhs type BinaryOperator
(BinaryOperator '-'
  (ArraySubscriptExpr (_temp) 'double' rvalue
    (ArraySubscriptExpr (_temp) 'double' rvalue
      (ArraySubscriptExpr (_temp) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_temp' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (ArraySubscriptExpr (_rhs) 'double' rvalue
        (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
        (DeclRefExpr 'int' Var  't4' )
      )
      (DeclRefExpr 'int' Var  't6' )
    )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable i in 
_temp[t4][t6][i] - _rhs[t4][t6][i]
op -   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (_rhs) 'double' rvalue
  (ArraySubscriptExpr (_rhs) 'double' rvalue
    (ArraySubscriptExpr (_rhs) 'double' rvalue
      (DeclRefExpr 'double [64 + 8][64 + 8][64 + 8]' Var  '_rhs' )
      (DeclRefExpr 'int' Var  't4' )
    )
    (DeclRefExpr 'int' Var  't6' )
  )
  (DeclRefExpr 'int' Var  'i' )
)

sub(else) = (nil)
IR_roseCode::ReplaceCode( old, *repr)
old was
for (s = 0; s < ghosts; s++) {
  for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
    for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
      for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
        if (((((i + j) + k) + (color + s)) % 2) == 0) {
          _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
          _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
          _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

        }    }
  }
}


old parent was

{
int t8;
int t6;
int t4;
int t2;
int i;
int j;
int k;
int s;
int I;
int J;
int K;
int ghosts;
double h2inv;
double  _phi[72][72][72];
double  _rhs[72][72][72];
double  _alpha[72][72][72];
double  _beta_i[72][72][72];
double  _beta_j[72][72][72];
double  _beta_k[72][72][72];
double  _lambda[72][72][72];
double  _temp[72][72][72];
int color;
color = sweep;
for (s = 0; s < ghosts; s++) {
  for (k = ((s - ghosts) + 1); k < (K + ((ghosts - s) - 1)); k++) {
    for (j = ((s - ghosts) + 1); j < (J + ((ghosts - s) - 1)); j++) {
      for (i = ((s - ghosts) + 1); i < (I + ((ghosts - s) - 1)); i++) 
        if (((((i + j) + k) + (color + s)) % 2) == 0) {
          _temp[k][j][i] = ((b * h2inv) * (((_beta_i[k][j][i + 1] * (_phi[k][j][i + 1] - _phi[k][j][i]) - (_beta_i[k][j][i] * (_phi[k][j][i] - _phi[k][j][i - 1]))) + _beta_j[k][j + 1][i] * (_phi[k][j + 1][i] - _phi[k][j][i]) - (_beta_j[k][j][i] * (_phi[k][j][i] - _phi[k][j - 1][i]))) + _beta_k[k + 1][j][i] * (_phi[k + 1][j][i] - _phi[k][j][i]) - (_beta_k[k][j][i] * (_phi[k][j][i] - _phi[k - 1][j][i]))));
          _temp[k][j][i] = ((a * _alpha[k][j][i]) * _phi[k][j][i] - _temp[k][j][i]);
          _phi[k][j][i] = (_phi[k][j][i] - (_lambda[k][j][i] * (_temp[k][j][i] - _rhs[k][j][i])));

        }    }
  }
}


}

new parent2 is

{
int t8;
int t6;
int t4;
int t2;
int i;
int j;
int k;
int s;
int I;
int J;
int K;
int ghosts;
double h2inv;
double  _phi[72][72][72];
double  _rhs[72][72][72];
double  _alpha[72][72][72];
double  _beta_i[72][72][72];
double  _beta_j[72][72][72];
double  _beta_k[72][72][72];
double  _lambda[72][72][72];
double  _temp[72][72][72];
int color;
color = sweep;
for (t2 = 0; t2 <= 3; t2 += 1) {
  for (t4 = (t2 - 3); t4 <= (-t2 + 66); t4 += 1) {
    for (t6 = (t2 - 3); t6 <= (-t2 + 66); t6 += 1) {
      for (t8 = (t2 - 3); t8 <= (-t2 + 66); t8 += 1) 
        if (((((t8 + t6) + t4) + (color + t2)) % 2) == 0) {
          _temp[t4][t6][t8] = ((b * h2inv) * (((_beta_i[t4][t6][t8 + 1] * (_phi[t4][t6][t8 + 1] - _phi[t4][t6][t8]) - (_beta_i[t4][t6][t8] * (_phi[t4][t6][t8] - _phi[t4][t6][t8 - 1]))) + _beta_j[t4][t6 + 1][t8] * (_phi[t4][t6 + 1][t8] - _phi[t4][t6][t8]) - (_beta_j[t4][t6][t8] * (_phi[t4][t6][t8] - _phi[t4][t6 - 1][t8]))) + _beta_k[t4 + 1][t6][t8] * (_phi[t4 + 1][t6][t8] - _phi[t4][t6][t8]) - (_beta_k[t4][t6][t8] * (_phi[t4][t6][t8] - _phi[t4 - 1][t6][t8]))));
          _temp[t4][t6][t8] = ((a * _alpha[t4][t6][t8]) * _phi[t4][t6][t8] - _temp[t4][t6][t8]);
          _phi[t4][t6][t8] = (_phi[t4][t6][t8] - (_lambda[t4][t6][t8] * (_temp[t4][t6][t8] - _rhs[t4][t6][t8])));

        }    }
  }
}
;
}
deleting varDecl i
deleting varDecl j
deleting varDecl k
deleting varDecl s
deleting varDecl I
deleting varDecl J
deleting varDecl K
deleting varDecl ghosts
FunctionDecl
IR_chillCode::~IR_chillCode()
output happening as part of the destructor !!

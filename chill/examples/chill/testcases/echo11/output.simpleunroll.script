source: simpleunroll.c
procedure is foo
format: rose
format rose
LOOP ':' NUMBER   parse the file because we haven't yet
CIT_ROSE
LOOP  ir_code = new IR_roseCode(source_filename, procedure_name);
IR_roseCode::IR_roseCode( file_name simpleunroll.c, proc_name foo )
IR_roseCode::IR_roseCode  actually parsing simpleunroll.c using rose?
"/home/markhall/srcrepository/projects/github/chill/trunk/examples/chill/simpleunroll.c", line 5: warning: 
          variable "j" was declared but never referenced
     int i,j;
           ^

IR_roseCode::IR_roseCode()  project defined. file parsed by Rose
creating chillAST from Rose AST
ConvertXXXXVarDecl()
original vartype 'float *'
vartype = 'float *'
arraypart = ''
float * x   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type float *, name x, arraypart  )
2name x numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'float *' 'x' ''"  n_dim 1  )

ConvertXXXXVarDecl()
original vartype 'float *'
vartype = 'float *'
arraypart = ''
float * y   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type float *, name y, arraypart  )
2name y numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'float *' 'y' ''"  n_dim 1  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int i   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name i, arraypart  )
2name i numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'i' ''"  n_dim 0  )

ConvertXXXXVarDecl()
original vartype 'int'
vartype = 'int'
arraypart = ''
int j   arraypart = ''
2chillAST_VarDecl::chillAST_VarDecl( type int, name j, arraypart  )
2name j numdimensions 0
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'int' 'j' ''"  n_dim 0  )

ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float *' ParmVar  'x' )

chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float *' ParmVar  'x' )

chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float *' ParmVar  'x' )

ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float *' ParmVar  'x' )

chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float *' ParmVar  'x' )

ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float *' ParmVar  'x' )

chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float *' ParmVar  'x' )

chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float *' ParmVar  'y' )

ConvertRoseArrayRefExp()
converting base
ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
ConvertRoseArrayRefExp, base (DeclRefExpr 'float *' ParmVar  'x' )

chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
ConvertXXXXVarDecl()
original vartype 'float [16UL]'
vartype = 'float '
arraypart = '[16]'
float  x   arraypart = '[16]'
2chillAST_VarDecl::chillAST_VarDecl( type float , name x, arraypart [16] )
2name x numdimensions 1
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'float ' 'x' '[16]'"  n_dim 1  )

ConvertXXXXVarDecl()
original vartype 'float [16UL]'
vartype = 'float '
arraypart = '[16]'
float  y   arraypart = '[16]'
2chillAST_VarDecl::chillAST_VarDecl( type float , name y, arraypart [16] )
2name y numdimensions 1
2chillAST_VarDecl::chillAST_VarDecl LEAVING
(VarDecl "'float ' 'y' '[16]'"  n_dim 1  )

ConvertXXXXXRefExpr()
ConvertXXXXXRefExpr()
unhandled top node 423/429 of type SgSymbolTable
unhandled top node 424/429 of type SgTypeTable
topnode 425 of 429, first == NULL??  blurb numeric_label
unhandled top node 426/429 of type Sg_File_Info
unhandled top node 427/429 of type Sg_File_Info
unhandled top node 428/429 of type SgSourceFile
found the procedure named foo
local Function Definition 0x27a5ff0

void foo( float *x, float *y )
{
  int i;
  int j;
  x[0] = 123.0f;
  x[1] = 354.0f;
  for (i = 1; i < 16; i++) {
    x[i] = (2.0f * x[i]);
    x[i + 1] = x[i];
    x[i + 2] = 3.0f;
    y[i] = x[i - 1];
  }

}


printing whole file


// sourcefile has 2 children
they are
FunctionDecl
FunctionDecl

// this source derived from CHILL AST originally from file 'simpleunroll.c' as parsed by frontend compiler rose


void foo( float *x, float *y )
{
  int i;
  int j;
  x[0] = 123.0f;
  x[1] = 354.0f;
  for (i = 1; i < 16; i++) {
    x[i] = (2.0f * x[i]);
    x[i + 1] = x[i];
    x[i + 2] = 3.0f;
    y[i] = x[i - 1];
  }

}

int main(  )
{
  float  x[16];
  float  y[16];
  foo(x, y);
  return(0);

}

//CHILL AST originally from file 'simpleunroll.c'

(FunctionDecl void foo(float *x, float *y)
  (CompoundStmt 
    (VarDecl "'int' 'i' ''"  n_dim 0  )
    (VarDecl "'int' 'j' ''"  n_dim 0  )
    (BinaryOperator '='
      (ArraySubscriptExpr (x) 'float' lvalue
        (DeclRefExpr 'float *' ParmVar  'x' )
        (IntegerLiteral 'int' 0)
      )
      (CStyleCastExpr  (float) 
        (IntegerLiteral 'int' 123)
      )
    )
    (BinaryOperator '='
      (ArraySubscriptExpr (x) 'float' lvalue
        (DeclRefExpr 'float *' ParmVar  'x' )
        (IntegerLiteral 'int' 1)
      )
      (CStyleCastExpr  (float) 
        (IntegerLiteral 'int' 354)
      )
    )
    (ForStmt 
      (BinaryOperator '='
        (DeclRefExpr 'int' Var  'i' )
        (IntegerLiteral 'int' 1)
      )
      (BinaryOperator '<'
        (DeclRefExpr 'int' Var  'i' )
        (IntegerLiteral 'int' 16)
      )
      (UnaryOperator postfix ++
        (DeclRefExpr 'int' Var  'i' )
      )
      (CompoundStmt 
        (BinaryOperator '='
          (ArraySubscriptExpr (x) 'float' lvalue
            (DeclRefExpr 'float *' ParmVar  'x' )
            (DeclRefExpr 'int' Var  'i' )
          )
          (BinaryOperator '*'
            (CStyleCastExpr  (float) 
              (IntegerLiteral 'int' 2)
            )
            (ArraySubscriptExpr (x) 'float' rvalue
              (DeclRefExpr 'float *' ParmVar  'x' )
              (DeclRefExpr 'int' Var  'i' )
            )
          )
        )
        (BinaryOperator '='
          (ArraySubscriptExpr (x) 'float' lvalue
            (DeclRefExpr 'float *' ParmVar  'x' )
            (BinaryOperator '+'
              (DeclRefExpr 'int' Var  'i' )
              (IntegerLiteral 'int' 1)
            )
          )
          (ArraySubscriptExpr (x) 'float' rvalue
            (DeclRefExpr 'float *' ParmVar  'x' )
            (DeclRefExpr 'int' Var  'i' )
          )
        )
        (BinaryOperator '='
          (ArraySubscriptExpr (x) 'float' lvalue
            (DeclRefExpr 'float *' ParmVar  'x' )
            (BinaryOperator '+'
              (DeclRefExpr 'int' Var  'i' )
              (IntegerLiteral 'int' 2)
            )
          )
          (CStyleCastExpr  (float) 
            (IntegerLiteral 'int' 3)
          )
        )
        (BinaryOperator '='
          (ArraySubscriptExpr (y) 'float' lvalue
            (DeclRefExpr 'float *' ParmVar  'y' )
            (DeclRefExpr 'int' Var  'i' )
          )
          (ArraySubscriptExpr (x) 'float' rvalue
            (DeclRefExpr 'float *' ParmVar  'x' )
            (BinaryOperator '-'
              (DeclRefExpr 'int' Var  'i' )
              (IntegerLiteral 'int' 1)
            )
          )
        )
      )
    )
  )
)

(FunctionDecl int main()
  (CompoundStmt 
    (VarDecl "'float ' 'x' '[16]'"  n_dim 1  )
    (VarDecl "'float ' 'y' '[16]'"  n_dim 1  )
    (CallExpr void
      (DeclRefExpr 'void' 'foo' ( float *x, float *y ))
      (VarDecl "'float *' 'x' ''"  n_dim 1  )
      (VarDecl "'float *' 'y' ''"  n_dim 1  )
    )
    (ReturnStmt
      (IntegerLiteral 'int' 0)
    )
  )
)
need to create symbol tables?
LOOP RETURN ir_code = new IR_roseCode(source_filename, procedure_name);
yyparse  block = ir_code->GetCode();
IR_roseCode::GetCode()
chillfunc 0x27a5ff0
chillast body of func is 0x27a6220
making a new IR_roseBlock with chillAST

void foo( float *x, float *y )
{
  int i;
  int j;
  x[0] = 123.0f;
  x[1] = 354.0f;
  for (i = 1; i < 16; i++) {
    x[i] = (2.0f * x[i]);
    x[i + 1] = x[i];
    x[i + 2] = 3.0f;
    y[i] = x[i - 1];
  }

}

in yyparse, IR_Block block 0x27a2ce0

IR_roseCode::FindOneLevelControlStructure()
basic block is:
block ast of type FunctionDecl

void foo( float *x, float *y )
{
  int i;
  int j;
  x[0] = 123.0f;
  x[1] = 354.0f;
  for (i = 1; i < 16; i++) {
    x[i] = (2.0f * x[i]);
    x[i + 1] = x[i];
    x[i + 2] = 3.0f;
    y[i] = x[i - 1];
  }

}



*** block is a compoundstatement or a function decl or NULL

*** block is a compoundstatement or a function decl
basic block has 5 statements
making a new IR_roseBlock with NO chillAST (nil)
child 0/5 is of type VarDecl
straight line code adding to basicblock that had 0
child 0/5 = int i
child 0 is part of a basic block
now basicblock has 1 statements
child 1/5 is of type VarDecl
straight line code adding to basicblock that had 1
child 1/5 = int j
child 1 is part of a basic block
now basicblock has 2 statements
child 2/5 is of type BinaryOperator
straight line code adding to basicblock that had 2
child 2/5 = x[0] = 123.0f
child 2 is part of a basic block
now basicblock has 3 statements
child 3/5 is of type BinaryOperator
straight line code adding to basicblock that had 3
child 3/5 = x[1] = 354.0f
child 3 is part of a basic block
now basicblock has 4 statements
child 4/5 is of type ForStmt
found a For statement (Loop) at 4/5 within a Basic Block
pushing a run of statements 0 to 3 as a block
making a new IR_roseBlock with NO chillAST (nil)
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (i = 1; i < 16; i++) {
  x[i] = (2.0f * x[i]);
  x[i + 1] = x[i];
  x[i + 2] = 3.0f;
  y[i] = x[i - 1];
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
x[i] = (2.0f * x[i]);
x[i + 1] = x[i];
x[i + 2] = 3.0f;
y[i] = x[i - 1];


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
ns 0  numchildren 5

*** block is a compoundstatement or a function decl  END 
returning vector of 2 controls
(parser.yy) I found 1 loops in the procedure

parse.yy  L 505 making a new myloop loop num start 0

***                                                   ROSE (parser.yy) making a new myloop

Loop::Loop(const IR_Control *control)
control type is 0   IR_CONTROL_LOOP
in Loop::Loop, calling  build_ir_tree()

loop.cc, Loop::Loop() about to clone control
IR_roseLoop::clone()
IR_roseLoop::IR_roseLoop(ir_, chillforstmt)
loop is:
for (i = 1; i < 16; i++) {
  x[i] = (2.0f * x[i]);
  x[i + 1] = x[i];
  x[i + 2] = 3.0f;
  y[i] = x[i - 1];
}

IR_roseLoop::IR_roseLoop()    chillbody
body is:
x[i] = (2.0f * x[i]);
x[i + 1] = x[i];
x[i + 2] = 3.0f;
y[i] = x[i - 1];


chillbody of type CompoundStmt
IR_roseLoop::IR_roseLoop() DONE
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
case IR_CONTROL_LOOP
recursing. build_ir_tree() of CONTROL_LOOP creating children  L122
IR_roseLoop::body()
making a new IR_roseBlock with chillAST
x[i] = (2.0f * x[i]);
x[i + 1] = x[i];
x[i + 2] = 3.0f;
y[i] = x[i - 1];

irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_roseCode::FindOneLevelControlStructure()
basic block is:
block ast of type CompoundStmt
x[i] = (2.0f * x[i]);
x[i + 1] = x[i];
x[i + 2] = 3.0f;
y[i] = x[i - 1];



*** block is a compoundstatement or a function decl or NULL

*** block is a compoundstatement or a function decl
found a top level Basic Block Compound Statement
basic block has 4 statements
making a new IR_roseBlock with NO chillAST (nil)
child 0/4 is of type BinaryOperator
straight line code adding to basicblock that had 0
child 0/4 = x[i] = (2.0f * x[i])
child 0 is part of a basic block
now basicblock has 1 statements
child 1/4 is of type BinaryOperator
straight line code adding to basicblock that had 1
child 1/4 = x[i + 1] = x[i]
child 1 is part of a basic block
now basicblock has 2 statements
child 2/4 is of type BinaryOperator
straight line code adding to basicblock that had 2
child 2/4 = x[i + 2] = 3.0f
child 2 is part of a basic block
now basicblock has 3 statements
child 3/4 is of type BinaryOperator
straight line code adding to basicblock that had 3
child 3/4 = y[i] = x[i - 1]
child 3 is part of a basic block
now basicblock has 4 statements
ns 4  numchildren 4
NOT sending straightline run of statements, because it would be the entire block. There are no control statements in the block

*** block is a compoundstatement or a function decl  END 
returning vector of 0 controls
irtools.cc BACK FROM FindOneLevelControlStructure()
controls.size() == 0
build_ir_tree()  vector result has 1 parts
recursing. build_ir_tree() of CONTROL_LOOP creating children DONE
build_ir_tree()  vector result has 1 parts
in Loop::Loop. ir_tree has 1 parts
before init_loops, 0 freevar
dammit 0

                                                  Loop::init_loop()
extract
nesting level stmt size = 1
1 statements?
i 0
stmt_nesting_level[0] = 1
in init_loop, made 1 stmts
max nesting level 1 at location 0
itn = stmt[0]
parent
IR_CONTROL_LOOP  cur_dim 0
making scalar symbol i
index[0] = 'i'
align loops by names,

set relation variable names                      ****
Relation r(1)
it's a loop.  temp_depth 0
r.name_set_var( 1, i )
Relation r   {[i] : TRUE }
extract information from loop/if structures
IR_CONTROL_LOOP
IR_roseLoop::lower_bound()
loop.cc, got the lower bound. it is:
1

exp2formula()
{[i] : TRUE }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::upper_bound()
loop.cc, got the upper bound. it is:
16

IR_roseLoop::stop_cond()
exp2formula()
{[i] : 1 <= i }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseLoop::lower_bound()
IR_roseCode::QueryExpOperation()
abs(c)
add information for missing loops   n_dim(1)
loop.cc L441 insert the statement
loop.cc before extract
IR_roseBlock::extract()
block has chillAST of type CompoundStmt
block has 0 exploded statements
IR_roseBlock::extract() LEAVING
code =  ocg->CreateSubstitutedStmt(...)


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
0 vars and 0 substitutions
4 nodes in old code. was:
stmt(0) = x[i] = (2.0f * x[i])
stmt(1) = x[i + 1] = x[i]
stmt(2) = x[i + 2] = 3.0f
stmt(3) = y[i] = x[i - 1]

nosubs old code was:
stmt = x[i] = (2.0f * x[i])
stmt = x[i + 1] = x[i]
stmt = x[i + 2] = 3.0f
stmt = y[i] = x[i - 1]
stmt
for int i < n_dim(1)
whew
                                        loop.cc   Loop::init_loop() END

after init_loops, 0 freevar
loop.cc 1 statements
this really REALLY needs some comments
i 0
j 0

irtools.cc test_data_dependences()  0 freevars
repr1   x[i] = (2.0f * x[i])
x[i + 1] = x[i]
x[i + 2] = 3.0f
y[i] = x[i - 1]
repr2   x[i] = (2.0f * x[i])
x[i + 1] = x[i]
x[i + 2] = 3.0f
y[i] = x[i - 1]
index 0 i
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
repr1 == repr2
repr1->dump()
x[i] = (2.0f * x[i])
x[i + 1] = x[i]
x[i + 2] = 3.0f
y[i] = x[i - 1]
IR_roseCode::FindArrayRef()
there are 4 chill statements in this repr

chillstatement 0 = x[i] = (2.0f * x[i])
chillAST_ArraySubscriptExpr::gatherArrayRefs setting imwrittento 1 for x
chillAST_ArraySubscriptExpr::gatherArrayRefs setting imwrittento 0 for x
x
x
x
x

chillstatement 1 = x[i + 1] = x[i]
chillAST_ArraySubscriptExpr::gatherArrayRefs setting imwrittento 1 for x
x
x
x
chillAST_ArraySubscriptExpr::gatherArrayRefs setting imwrittento 0 for x
x
x
x
x

chillstatement 2 = x[i + 2] = 3.0f
chillAST_ArraySubscriptExpr::gatherArrayRefs setting imwrittento 1 for x
x
x
x
x
x
x
x
x
x
x

chillstatement 3 = y[i] = x[i - 1]
chillAST_ArraySubscriptExpr::gatherArrayRefs setting imwrittento 1 for y
chillAST_ArraySubscriptExpr::gatherArrayRefs setting imwrittento 0 for x
x
x
x
x
x
y
x
x
x
x
x
x
y
x
7 total refs 
ref[0] x is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() 'x' write 1
ref[1] x is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() 'x' write 0
ref[2] x is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() 'x' write 1
ref[3] x is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() 'x' write 0
ref[4] x is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() 'x' write 1
ref[5] y is writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() 'y' write 1
ref[6] x is NOT writtento
IR_XXXXArrayRef::IR_XXXXArrayRef() 'x' write 0
access of size 7
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
WRITE  array access 0 = x
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
       array access 1 = x
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
WRITE  array access 2 = x
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
       array access 3 = x
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
WRITE  array access 4 = x
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
WRITE  array access 5 = y
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
       array access 6 = x
that was the list


before mapRefstoStatements()
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i]
trivially true because they are exactly the same statement
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i] = (2.0f * x[i])
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
2.0f * x[i]
x[i] = (2.0f * x[i])
2.0f * x[i]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i + 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i] = (2.0f * x[i])
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i + 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 1] = x[i]
x[i] = (2.0f * x[i])
x[i + 1] = x[i]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i] = (2.0f * x[i])
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 1] = x[i]
x[i] = (2.0f * x[i])
x[i + 1] = x[i]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i + 2]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i] = (2.0f * x[i])
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i + 2]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 2] = 3.0f
x[i] = (2.0f * x[i])
x[i + 2] = 3.0f
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
 IR_roseCode::FromSameStmt()
x[i]
y[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i] = (2.0f * x[i])
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
y[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
y[i] = x[i - 1]
x[i] = (2.0f * x[i])
y[i] = x[i - 1]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i - 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i] = (2.0f * x[i])
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i - 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
y[i] = x[i - 1]
x[i] = (2.0f * x[i])
y[i] = x[i - 1]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i]
trivially true because they are exactly the same statement
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i + 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
2.0f * x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i + 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 1] = x[i]
2.0f * x[i]
x[i + 1] = x[i]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
2.0f * x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 1] = x[i]
2.0f * x[i]
x[i + 1] = x[i]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i + 2]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
2.0f * x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i + 2]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 2] = 3.0f
2.0f * x[i]
x[i + 2] = 3.0f
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
 IR_roseCode::FromSameStmt()
x[i]
y[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
2.0f * x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
y[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
y[i] = x[i - 1]
2.0f * x[i]
y[i] = x[i - 1]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i - 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
2.0f * x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i - 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
y[i] = x[i - 1]
2.0f * x[i]
y[i] = x[i - 1]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i + 1]
x[i + 1]
trivially true because they are exactly the same statement
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i + 1]
x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i + 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 1] = x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 1] = x[i]
x[i + 1] = x[i]
x[i + 1] = x[i]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i + 1]
x[i + 2]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i + 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 1] = x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i + 2]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 2] = 3.0f
x[i + 1] = x[i]
x[i + 2] = 3.0f
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
 IR_roseCode::FromSameStmt()
x[i + 1]
y[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i + 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 1] = x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
y[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
y[i] = x[i - 1]
x[i + 1] = x[i]
y[i] = x[i - 1]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i + 1]
x[i - 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i + 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 1] = x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i - 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
y[i] = x[i - 1]
x[i + 1] = x[i]
y[i] = x[i - 1]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i]
trivially true because they are exactly the same statement
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i + 2]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 1] = x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i + 2]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 2] = 3.0f
x[i + 1] = x[i]
x[i + 2] = 3.0f
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
 IR_roseCode::FromSameStmt()
x[i]
y[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 1] = x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
y[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
y[i] = x[i - 1]
x[i + 1] = x[i]
y[i] = x[i - 1]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i]
x[i - 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 1] = x[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i - 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
y[i] = x[i - 1]
x[i + 1] = x[i]
y[i] = x[i - 1]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i + 2]
x[i + 2]
trivially true because they are exactly the same statement
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
 IR_roseCode::FromSameStmt()
x[i + 2]
y[i]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i + 2]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 2] = 3.0f
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
y[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
y[i] = x[i - 1]
x[i + 2] = 3.0f
y[i] = x[i - 1]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i + 2]
x[i - 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i + 2]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
x[i + 2] = 3.0f
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i - 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
y[i] = x[i - 1]
x[i + 2] = 3.0f
y[i] = x[i - 1]
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
 IR_roseCode::FromSameStmt()
y[i]
y[i]
trivially true because they are exactly the same statement
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
y[i]
x[i - 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
y[i]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
y[i] = x[i - 1]
chillAST_node::getEnclosingStatement( level 0 ) node type ArraySubscriptExpr
x[i - 1]
chillAST_node::getEnclosingStatement( level 1 ) node type BinaryOperator
y[i] = x[i - 1]
y[i] = x[i - 1]
y[i] = x[i - 1]
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
 IR_roseCode::FromSameStmt()
x[i - 1]
x[i - 1]
trivially true because they are exactly the same statement
after mapRefstoStatements()

i 0
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_a = x
j 0
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 0 0
*sym_a == *sym_b
0 a->is_write()
0 b->is_write()

irtools.cc ij 0 0   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e1,e2 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e1,e2 : ( i = e1 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e1,e2 : ( i = e1 && i' = e2 && e2 = e1 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e1,e2 : ( i = e1 && i' = e2 && e2 = e1 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( i' = i && i' = i+In_1 && 1 <= i <= 15 )) }

dv created in if                                         ***
leaving relation2dependences, 0 and 0 dependences

irtools.cc ij 0 0 dv.first 0   dv.second 0
234j 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 0 1
*sym_a == *sym_b
0 a->is_write()
1 b->is_NOT_write()

irtools.cc ij 0 1   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e3,e4 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e3,e4 : ( i = e3 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e3,e4 : ( i = e3 && i' = e4 && e4 = e3 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e3,e4 : ( i = e3 && i' = e4 && e4 = e3 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( i' = i && i' = i+In_1 && 1 <= i <= 15 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
symbol x  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (x)
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol x

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol x
symbol x  HAS A left  DEPENDENCE OF TYPE DEP_W2R
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)

irtools.cc ij 0 1 dv.first 1   dv.second 0
2IR_roseArraySymbol::IR_roseArraySymbol (x)
34IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
j 2
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 0 2
*sym_a == *sym_b
0 a->is_write()
2 b->is_write()

irtools.cc ij 0 2   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e5,e6 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e5,e6 : ( i = e5 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e5,e6 : ( i = e5 and exists ( e7,e8 : ( e7+e8 = e6 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e5,e6 : ( i = e5 and exists ( e7,e8 : ( e7+e8 = e6 && i' = e7 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e5,e6 : ( i = e5 && e6 = e5 and exists ( e7,e8 : ( e7+e8 = e6 && i' = e7 && 1 = e8 )) )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e5,e6 : ( i = e5 && e6 = e5 and exists ( e7,e8 : ( e7+e8 = e6 && i' = e7 && 1 = e8 )) )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( 1+i' = i && i' = i+In_1 && 2 <= i <= 15 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
symbol x  ADDING A DEPENDENCE OF TYPE DEP_W2W to dependences2
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (x)
DONE pushing dv
now 1 dependences2
dependences2[0]: symbol x

dv goes out of scope                                      ***
leaving relation2dependences, 0 and 1 dependences
symbol x  HAS A right DEPENDENCE OF TYPE DEP_W2W
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)

irtools.cc ij 0 2 dv.first 0   dv.second 1
23IR_roseArraySymbol::IR_roseArraySymbol (x)
4IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
j 3
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 0 3
*sym_a == *sym_b
0 a->is_write()
3 b->is_NOT_write()

irtools.cc ij 0 3   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e9,e10 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e9,e10 : ( i = e9 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e9,e10 : ( i = e9 && i' = e10 && e10 = e9 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e9,e10 : ( i = e9 && i' = e10 && e10 = e9 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( i' = i && i' = i+In_1 && 1 <= i <= 15 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
symbol x  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (x)
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol x

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol x
symbol x  HAS A left  DEPENDENCE OF TYPE DEP_W2R
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)

irtools.cc ij 0 3 dv.first 1   dv.second 0
2IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
34IR_roseArraySymbol::IR_roseArraySymbol (x)
j 4
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 0 4
*sym_a == *sym_b
0 a->is_write()
4 b->is_write()

irtools.cc ij 0 4   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e11,e12 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e11,e12 : ( i = e11 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e11,e12 : ( i = e11 and exists ( e13,e14 : ( e13+e14 = e12 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e11,e12 : ( i = e11 and exists ( e13,e14 : ( e13+e14 = e12 && i' = e13 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e11,e12 : ( i = e11 && e12 = e11 and exists ( e13,e14 : ( e13+e14 = e12 && i' = e13 && 2 = e14 )) )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e11,e12 : ( i = e11 && e12 = e11 and exists ( e13,e14 : ( e13+e14 = e12 && i' = e13 && 2 = e14 )) )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( 2+i' = i && i' = i+In_1 && 3 <= i <= 15 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
symbol x  ADDING A DEPENDENCE OF TYPE DEP_W2W to dependences2
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (x)
DONE pushing dv
now 1 dependences2
dependences2[0]: symbol x

dv goes out of scope                                      ***
leaving relation2dependences, 0 and 1 dependences
symbol x  HAS A right DEPENDENCE OF TYPE DEP_W2W
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)

irtools.cc ij 0 4 dv.first 0   dv.second 1
23IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
4IR_roseArraySymbol::IR_roseArraySymbol (x)
j 5
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
sym_b = y
irtools.cc ij 0 5
*sym_a NOT == *sym_b
0 a->is_write()
5 b->is_write()
j 6
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 0 6
*sym_a == *sym_b
0 a->is_write()
6 b->is_NOT_write()

irtools.cc ij 0 6   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e15,e16 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e15,e16 : ( i = e15 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e15,e16 : ( i = e15 and exists ( e17,e18 : ( e17 = e16+e18 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e15,e16 : ( i = e15 and exists ( e17,e18 : ( e17 = e16+e18 && i' = e17 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e15,e16 : ( i = e15 && e16 = e15 and exists ( e17,e18 : ( e17 = e16+e18 && i' = e17 && 1 = e18 )) )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e15,e16 : ( i = e15 && e16 = e15 and exists ( e17,e18 : ( e17 = e16+e18 && i' = e17 && 1 = e18 )) )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( i' = 1+i && i' = i+In_1 && 1 <= i <= 14 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
symbol x  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (x)
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol x

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol x
symbol x  HAS A left  DEPENDENCE OF TYPE DEP_W2R
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)

irtools.cc ij 0 6 dv.first 1   dv.second 0
2IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
34IR_roseArraySymbol::IR_roseArraySymbol (x)
i 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_a = x
j 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 1 1
*sym_a == *sym_b
1 a->is_NOT_write()
1 b->is_NOT_write()
j 2
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 1 2
*sym_a == *sym_b
1 a->is_NOT_write()
2 b->is_write()

irtools.cc ij 1 2   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e19,e20 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e19,e20 : ( i = e19 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e19,e20 : ( i = e19 and exists ( e21,e22 : ( e21+e22 = e20 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e19,e20 : ( i = e19 and exists ( e21,e22 : ( e21+e22 = e20 && i' = e21 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e19,e20 : ( i = e19 && e20 = e19 and exists ( e21,e22 : ( e21+e22 = e20 && i' = e21 && 1 = e22 )) )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e19,e20 : ( i = e19 && e20 = e19 and exists ( e21,e22 : ( e21+e22 = e20 && i' = e21 && 1 = e22 )) )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( 1+i' = i && i' = i+In_1 && 2 <= i <= 15 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
symbol x  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences2
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (x)
DONE pushing dv
now 1 dependences2
dependences2[0]: symbol x

dv goes out of scope                                      ***
leaving relation2dependences, 0 and 1 dependences
symbol x  HAS A right DEPENDENCE OF TYPE DEP_W2R
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)

irtools.cc ij 1 2 dv.first 0   dv.second 1
23IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
4IR_roseArraySymbol::IR_roseArraySymbol (x)
j 3
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 1 3
*sym_a == *sym_b
1 a->is_NOT_write()
3 b->is_NOT_write()
j 4
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 1 4
*sym_a == *sym_b
1 a->is_NOT_write()
4 b->is_write()

irtools.cc ij 1 4   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e23,e24 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e23,e24 : ( i = e23 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e23,e24 : ( i = e23 and exists ( e25,e26 : ( e25+e26 = e24 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e23,e24 : ( i = e23 and exists ( e25,e26 : ( e25+e26 = e24 && i' = e25 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e23,e24 : ( i = e23 && e24 = e23 and exists ( e25,e26 : ( e25+e26 = e24 && i' = e25 && 2 = e26 )) )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e23,e24 : ( i = e23 && e24 = e23 and exists ( e25,e26 : ( e25+e26 = e24 && i' = e25 && 2 = e26 )) )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( 2+i' = i && i' = i+In_1 && 3 <= i <= 15 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
symbol x  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences2
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (x)
DONE pushing dv
now 1 dependences2
dependences2[0]: symbol x

dv goes out of scope                                      ***
leaving relation2dependences, 0 and 1 dependences
symbol x  HAS A right DEPENDENCE OF TYPE DEP_W2R
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)

irtools.cc ij 1 4 dv.first 0   dv.second 1
23IR_roseArraySymbol::IR_roseArraySymbol (x)
4IR_roseArraySymbol::IR_roseArraySymbol (x)
j 5
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
sym_b = y
irtools.cc ij 1 5
*sym_a NOT == *sym_b
1 a->is_NOT_write()
5 b->is_write()
j 6
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 1 6
*sym_a == *sym_b
1 a->is_NOT_write()
6 b->is_NOT_write()
i 2
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_a = x
j 2
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 2 2
*sym_a == *sym_b
2 a->is_write()
2 b->is_write()

irtools.cc ij 2 2   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e27,e28 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e27,e28 : ( exists ( e29,e30 : ( e29+e30 = e27 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e27,e28 : ( exists ( e29,e30 : ( e29+e30 = e27 && i = e29 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e27,e28 : ( exists ( e29,e30 : ( e29+e30 = e27 && i = e29 && 1 = e30 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e27,e28 : ( exists ( e29,e30 : ( e29+e30 = e27 && i = e29 && 1 = e30 )) and exists ( e31,e32 : ( e31+e32 = e28 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e27,e28 : ( exists ( e29,e30 : ( e29+e30 = e27 && i = e29 && 1 = e30 )) and exists ( e31,e32 : ( e31+e32 = e28 && i' = e31 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e27,e28 : ( exists ( e29,e30 : ( e29+e30 = e27 && i = e29 && 1 = e30 )) and exists ( e31,e32 : ( e31+e32 = e28 && i' = e31 && 1 = e32 )) and e28 = e27 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e27,e28 : ( exists ( e29,e30 : ( e29+e30 = e27 && i = e29 && 1 = e30 )) and exists ( e31,e32 : ( e31+e32 = e28 && i' = e31 && 1 = e32 )) and e28 = e27 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( i' = i && i' = i+In_1 && 1 <= i <= 15 )) }

dv created in if                                         ***
leaving relation2dependences, 0 and 0 dependences

irtools.cc ij 2 2 dv.first 0   dv.second 0
234j 3
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 2 3
*sym_a == *sym_b
2 a->is_write()
3 b->is_NOT_write()

irtools.cc ij 2 3   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e33,e34 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e33,e34 : ( exists ( e35,e36 : ( e35+e36 = e33 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e33,e34 : ( exists ( e35,e36 : ( e35+e36 = e33 && i = e35 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e33,e34 : ( exists ( e35,e36 : ( e35+e36 = e33 && i = e35 && 1 = e36 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e33,e34 : ( exists ( e35,e36 : ( e35+e36 = e33 && i = e35 && 1 = e36 )) and i' = e34 && e34 = e33 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e33,e34 : ( exists ( e35,e36 : ( e35+e36 = e33 && i = e35 && 1 = e36 )) and i' = e34 && e34 = e33 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( i' = 1+i && i' = i+In_1 && 1 <= i <= 14 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
symbol x  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (x)
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol x

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol x
symbol x  HAS A left  DEPENDENCE OF TYPE DEP_W2R
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)

irtools.cc ij 2 3 dv.first 1   dv.second 0
2IR_roseArraySymbol::IR_roseArraySymbol (x)
34IR_roseArraySymbol::IR_roseArraySymbol (x)
j 4
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 2 4
*sym_a == *sym_b
2 a->is_write()
4 b->is_write()

irtools.cc ij 2 4   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e37,e38 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e37,e38 : ( exists ( e39,e40 : ( e39+e40 = e37 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e37,e38 : ( exists ( e39,e40 : ( e39+e40 = e37 && i = e39 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e37,e38 : ( exists ( e39,e40 : ( e39+e40 = e37 && i = e39 && 1 = e40 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e37,e38 : ( exists ( e39,e40 : ( e39+e40 = e37 && i = e39 && 1 = e40 )) and exists ( e41,e42 : ( e41+e42 = e38 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e37,e38 : ( exists ( e39,e40 : ( e39+e40 = e37 && i = e39 && 1 = e40 )) and exists ( e41,e42 : ( e41+e42 = e38 && i' = e41 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e37,e38 : ( exists ( e39,e40 : ( e39+e40 = e37 && i = e39 && 1 = e40 )) and exists ( e41,e42 : ( e41+e42 = e38 && i' = e41 && 2 = e42 )) and e38 = e37 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e37,e38 : ( exists ( e39,e40 : ( e39+e40 = e37 && i = e39 && 1 = e40 )) and exists ( e41,e42 : ( e41+e42 = e38 && i' = e41 && 2 = e42 )) and e38 = e37 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( 1+i' = i && i' = i+In_1 && 2 <= i <= 15 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
symbol x  ADDING A DEPENDENCE OF TYPE DEP_W2W to dependences2
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (x)
DONE pushing dv
now 1 dependences2
dependences2[0]: symbol x

dv goes out of scope                                      ***
leaving relation2dependences, 0 and 1 dependences
symbol x  HAS A right DEPENDENCE OF TYPE DEP_W2W
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)

irtools.cc ij 2 4 dv.first 0   dv.second 1
23IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
4IR_roseArraySymbol::IR_roseArraySymbol (x)
j 5
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
sym_b = y
irtools.cc ij 2 5
*sym_a NOT == *sym_b
2 a->is_write()
5 b->is_write()
j 6
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 2 6
*sym_a == *sym_b
2 a->is_write()
6 b->is_NOT_write()

irtools.cc ij 2 6   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e43,e44 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e43,e44 : ( exists ( e45,e46 : ( e45+e46 = e43 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e43,e44 : ( exists ( e45,e46 : ( e45+e46 = e43 && i = e45 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e43,e44 : ( exists ( e45,e46 : ( e45+e46 = e43 && i = e45 && 1 = e46 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e43,e44 : ( exists ( e45,e46 : ( e45+e46 = e43 && i = e45 && 1 = e46 )) and exists ( e47,e48 : ( e47 = e44+e48 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e43,e44 : ( exists ( e45,e46 : ( e45+e46 = e43 && i = e45 && 1 = e46 )) and exists ( e47,e48 : ( e47 = e44+e48 && i' = e47 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e43,e44 : ( exists ( e45,e46 : ( e45+e46 = e43 && i = e45 && 1 = e46 )) and exists ( e47,e48 : ( e47 = e44+e48 && i' = e47 && 1 = e48 )) and e44 = e43 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e43,e44 : ( exists ( e45,e46 : ( e45+e46 = e43 && i = e45 && 1 = e46 )) and exists ( e47,e48 : ( e47 = e44+e48 && i' = e47 && 1 = e48 )) and e44 = e43 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( i' = 2+i && i' = i+In_1 && 1 <= i <= 13 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
symbol x  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (x)
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol x

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol x
symbol x  HAS A left  DEPENDENCE OF TYPE DEP_W2R
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)

irtools.cc ij 2 6 dv.first 1   dv.second 0
2IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
34IR_roseArraySymbol::IR_roseArraySymbol (x)
i 3
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_a = x
j 3
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 3 3
*sym_a == *sym_b
3 a->is_NOT_write()
3 b->is_NOT_write()
j 4
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 3 4
*sym_a == *sym_b
3 a->is_NOT_write()
4 b->is_write()

irtools.cc ij 3 4   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e49,e50 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e49,e50 : ( i = e49 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e49,e50 : ( i = e49 and exists ( e51,e52 : ( e51+e52 = e50 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e49,e50 : ( i = e49 and exists ( e51,e52 : ( e51+e52 = e50 && i' = e51 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e49,e50 : ( i = e49 && e50 = e49 and exists ( e51,e52 : ( e51+e52 = e50 && i' = e51 && 2 = e52 )) )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e49,e50 : ( i = e49 && e50 = e49 and exists ( e51,e52 : ( e51+e52 = e50 && i' = e51 && 2 = e52 )) )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( 2+i' = i && i' = i+In_1 && 3 <= i <= 15 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
symbol x  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences2
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (x)
DONE pushing dv
now 1 dependences2
dependences2[0]: symbol x

dv goes out of scope                                      ***
leaving relation2dependences, 0 and 1 dependences
symbol x  HAS A right DEPENDENCE OF TYPE DEP_W2R
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)

irtools.cc ij 3 4 dv.first 0   dv.second 1
23IR_roseArraySymbol::IR_roseArraySymbol (x)
4IR_roseArraySymbol::IR_roseArraySymbol (x)
j 5
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
sym_b = y
irtools.cc ij 3 5
*sym_a NOT == *sym_b
3 a->is_NOT_write()
5 b->is_write()
j 6
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 3 6
*sym_a == *sym_b
3 a->is_NOT_write()
6 b->is_NOT_write()
i 4
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_a = x
j 4
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 4 4
*sym_a == *sym_b
4 a->is_write()
4 b->is_write()

irtools.cc ij 4 4   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e53,e54 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e53,e54 : ( exists ( e55,e56 : ( e55+e56 = e53 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e53,e54 : ( exists ( e55,e56 : ( e55+e56 = e53 && i = e55 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e53,e54 : ( exists ( e55,e56 : ( e55+e56 = e53 && i = e55 && 2 = e56 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e53,e54 : ( exists ( e55,e56 : ( e55+e56 = e53 && i = e55 && 2 = e56 )) and exists ( e57,e58 : ( e57+e58 = e54 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e53,e54 : ( exists ( e55,e56 : ( e55+e56 = e53 && i = e55 && 2 = e56 )) and exists ( e57,e58 : ( e57+e58 = e54 && i' = e57 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e53,e54 : ( exists ( e55,e56 : ( e55+e56 = e53 && i = e55 && 2 = e56 )) and exists ( e57,e58 : ( e57+e58 = e54 && i' = e57 && 2 = e58 )) and e54 = e53 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e53,e54 : ( exists ( e55,e56 : ( e55+e56 = e53 && i = e55 && 2 = e56 )) and exists ( e57,e58 : ( e57+e58 = e54 && i' = e57 && 2 = e58 )) and e54 = e53 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( i' = i && i' = i+In_1 && 1 <= i <= 15 )) }

dv created in if                                         ***
leaving relation2dependences, 0 and 0 dependences

irtools.cc ij 4 4 dv.first 0   dv.second 0
234j 5
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
sym_b = y
irtools.cc ij 4 5
*sym_a NOT == *sym_b
4 a->is_write()
5 b->is_write()
j 6
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 4 6
*sym_a == *sym_b
4 a->is_write()
6 b->is_NOT_write()

irtools.cc ij 4 6   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e59,e60 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_PLUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e59,e60 : ( exists ( e61,e62 : ( e61+e62 = e59 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e59,e60 : ( exists ( e61,e62 : ( e61+e62 = e59 && i = e61 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e59,e60 : ( exists ( e61,e62 : ( e61+e62 = e59 && i = e61 && 2 = e62 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_MINUS
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
exp2formula()
{[i] -> [i'] : exists ( e59,e60 : ( exists ( e61,e62 : ( e61+e62 = e59 && i = e61 && 2 = e62 )) and exists ( e63,e64 : ( e63 = e60+e64 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e59,e60 : ( exists ( e61,e62 : ( e61+e62 = e59 && i = e61 && 2 = e62 )) and exists ( e63,e64 : ( e63 = e60+e64 && i' = e63 )) )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
IR_OP_CONSTANT
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e59,e60 : ( exists ( e61,e62 : ( e61+e62 = e59 && i = e61 && 2 = e62 )) and exists ( e63,e64 : ( e63 = e60+e64 && i' = e63 && 1 = e64 )) and e60 = e59 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e59,e60 : ( exists ( e61,e62 : ( e61+e62 = e59 && i = e61 && 2 = e62 )) and exists ( e63,e64 : ( e63 = e60+e64 && i' = e63 && 1 = e64 )) and e60 = e59 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( i' = 3+i && i' = i+In_1 && 1 <= i <= 12 )) }

dv created in if                                         ***
omegatools.cc calling ref_src->symbol();
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
symbol x  ADDING A DEPENDENCE OF TYPE DEP_W2R to dependences1
pushing dv
IR_roseArraySymbol::IR_roseArraySymbol (x)
DONE pushing dv
now 1 dependences1
dependences1[0]: symbol x

dv goes out of scope                                      ***
leaving relation2dependences, 1 and 0 dependences
dependences1[0]: symbol x
symbol x  HAS A left  DEPENDENCE OF TYPE DEP_W2R
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)

irtools.cc ij 4 6 dv.first 1   dv.second 0
2IR_roseArraySymbol::IR_roseArraySymbol (x)
34IR_roseArraySymbol::IR_roseArraySymbol (x)
i 5
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
sym_a = y
j 5
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
sym_b = y
irtools.cc ij 5 5
*sym_a == *sym_b
5 a->is_write()
5 b->is_write()

irtools.cc ij 5 5   SYMBOL A == SYMBOL B and one is a write
arrays2relation()
0 freevars
IS1  {[i] : 1 <= i <= 15 }
IS2  {[i] : 1 <= i <= 15 }
r    {[In_1] -> [Out_1] : FALSE }
omegatools.cc sym_src
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
omegatools.cc  (*sym_src != *sym_dst) FALSE
f_root
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
IR_roseArraySymbol::n_dim() 1
omegatools.cc ref_src->n_dim() 1
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
IR_roseArraySymbol::n_dim() 1
arrays2 i 0
IR_roseArrayRef::index( 0 )  
IR_roseArrayRef::index( 0 )  
IR_roseCode::QueryExpOperation()
IR_roseCode::QueryExpOperation()
exp2formula()
{[i] -> [i'] : exists ( e65,e66 : ( TRUE )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
exp2formula()
{[i] -> [i'] : exists ( e65,e66 : ( i = e65 )) }

IR_roseCode::QueryExpOperation()
QueryExpOperation() done
omegatools.cc IR_OP_VARIABLE
repr  i
IR_roseCode::QueryExpOperAND()
IR_roseCode::QueryExpOperand() DONE
v     i
making scalar symbol i
s i
IR_roseArrayRef::symbol()
base y
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( y )
IR_roseArraySymbol::IR_roseArraySymbol (y)
IR_roseArraySymbol::n_dim() 1
r    {[i] -> [i'] : exists ( e65,e66 : ( i = e65 && i' = e66 && e66 = e65 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
leaving arrays2relation
r    {[i] -> [i'] : exists ( e65,e66 : ( i = e65 && i' = e66 && e66 = e65 )) and 1 <= i <= 15 and 1 <= i' <= 15 }
1
relation2dependences()
{[In_1] : exists ( i,i' : ( i' = i && i' = i+In_1 && 1 <= i <= 15 )) }

dv created in if                                         ***
leaving relation2dependences, 0 and 0 dependences

irtools.cc ij 5 5 dv.first 0   dv.second 0
234j 6
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 5 6
*sym_a NOT == *sym_b
5 a->is_write()
6 b->is_NOT_write()
i 6
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_a = x
j 6
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArrayRef::symbol()
base x
IR_roseArrayRef::symbol() returning new IR_roseArraySymbol( x )
IR_roseArraySymbol::IR_roseArraySymbol (x)
sym_b = x
irtools.cc ij 6 6
*sym_a == *sym_b
6 a->is_NOT_write()
6 b->is_NOT_write()
LEAVING test_data_dependences()  first size 12    second size 12

dv.first.size() 12
k1 0
IR_roseArraySymbol::IR_roseArraySymbol (x)
k1 1
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
k1 2
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
k1 3
IR_roseArraySymbol::IR_roseArraySymbol (x)
k1 4
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
k1 5
IR_roseArraySymbol::IR_roseArraySymbol (x)
k1 6
IR_roseArraySymbol::IR_roseArraySymbol (x)
k1 7
IR_roseArraySymbol::IR_roseArraySymbol (x)
k1 8
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
k1 9
IR_roseArraySymbol::IR_roseArraySymbol (x)
k1 10
IR_roseArraySymbol::IR_roseArraySymbol (x)
k1 11
IR_roseArraySymbol::IR_roseArraySymbol (x)
k2 0
IR_roseArraySymbol::IR_roseArraySymbol (x)
k2 1
IR_roseArraySymbol::IR_roseArraySymbol (x)
k2 2
IR_roseArraySymbol::IR_roseArraySymbol (x)
k2 3
IR_roseArraySymbol::IR_roseArraySymbol (x)
k2 4
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
k2 5
IR_roseArraySymbol::IR_roseArraySymbol (x)
k2 6
IR_roseArraySymbol::IR_roseArraySymbol (x)
k2 7
IR_roseArraySymbol::IR_roseArraySymbol (x)
k2 8
IR_roseArraySymbol::IR_roseArraySymbol (x)
k2 9
IR_roseArraySymbol::IR_roseArraySymbol (x)
k2 10
IR_roseArraySymbol::IR_roseArraySymbol (x)
k2 11
IR_roseArraySymbol::IR_roseArraySymbol (x)


*** LOTS OF REDUCTIONS ***


i range 1
i 0
dep.hasEdge(0, 0)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
tdv size 24
ij 0 0
ij 0 1
ij 0 2
ij 0 3
ij 0 4
ij 0 5
ij 0 6
ij 0 7
ij 0 8
ij 0 9
ij 0 10
ij 0 11
ij 0 12
ij 0 13
ij 0 14
ij 0 15
ij 0 16
ij 0 17
ij 0 18
ij 0 19
ij 0 20
ij 0 21
ij 0 22
ij 0 23
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
init dumb transformation relations
                                                  at bottom of Loop::Loop, printCode
s1: 0(dim:0) 0

/* procedure :foo loop #0 */
CodeGen::CodeGen() sanity checking
num_stmt 1  1 xforms
here goes
CodeGen::CodeGen() DONE
CG.cc line 164, CG_result::printString()
stmts.size() 1

CG_result::printRepr(ocg, stmts) 
DYINGHERE
s 0/1
result: t2 = Out_1, 0
return printRepr( ... )
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
CG_utils.cc  output_substitutions()          DONE

for(t2 = 1; t2 <= 15; t2++) {
  s0(t2);
}


dependence graph:
1->1: x:flow(0) x:flow(0) x:flow(0) x:flow(0) x:flow(1) x:flow(1) x:flow(1) x:flow(1) x:flow(2) x:flow(2) x:flow(3) x:flow(3) x:output(1) x:output(1) x:output(2) x:output(2) x:flow(1) x:flow(1) x:flow(2) x:flow(2) x:output(1) x:output(1) x:flow(2) x:flow(2)


                             parser 1          unroll( a,b,c )
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
loop.cc apply_xform( set )

{[i] -> [chill_t1] : i = chill_t1 }
FIX THIS rose in generic loop.cc
loop vars 0 i
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreateIdent( chill_t1 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t1, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t1' )
CG_chillBuilder::CreatePlus()
CG_utils.cc  output_substitutions()          DONE



*** gonna die  *i = 0
1 uninterpreted symbols
loop vars 0 i
CG_utils.cc  output_substitutions()
v Out_1
CG_utils.cc  output_substitutions()          DONE

loop.cc stmt[*i].code =


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[i] = (2.0f * x[i])
stmt(1) = x[i + 1] = x[i]
stmt(2) = x[i + 2] = 3.0f
stmt(3) = y[i] = x[i - 1]
sub 0  chill_t1

subbing chill_t1
for  i

SubABinaryOperator() subbing old variable i in 
x[i] = (2.0f * x[i])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'i' )
  )
)

SubABinaryOperator() subbing old variable i in 
2.0f * x[i]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'i' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable i in 
x[i + 1] = x[i]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'i' )
)

SubABinaryOperator() subbing old variable i in 
i + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable i in 
x[i + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable i in 
i + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable i in 
y[i] = x[i - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'i' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable i in 
i - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

loop.cc LEAVING apply_xform( set )

loop.cc apply_xform( set )
{[chill_t1] -> [chill_t2] : chill_t1 = chill_t2 }
FIX THIS rose in generic loop.cc
loop vars 0 chill_t1
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreateIdent( chill_t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t2' )
CG_chillBuilder::CreatePlus()
CG_utils.cc  output_substitutions()          DONE



*** gonna die  *i = 0
1 uninterpreted symbols
loop vars 0 chill_t1
CG_utils.cc  output_substitutions()
v Out_1
CG_utils.cc  output_substitutions()          DONE

loop.cc stmt[*i].code =


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t1] = (2.0f * x[chill_t1])
stmt(1) = x[chill_t1 + 1] = x[chill_t1]
stmt(2) = x[chill_t1 + 2] = 3.0f
stmt(3) = y[chill_t1] = x[chill_t1 - 1]
sub 0  chill_t2

subbing chill_t2
for  chill_t1

SubABinaryOperator() subbing old variable chill_t1 in 
x[chill_t1] = (2.0f * x[chill_t1])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t1' )
  )
)

SubABinaryOperator() subbing old variable chill_t1 in 
2.0f * x[chill_t1]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t1' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t1 in 
x[chill_t1 + 1] = x[chill_t1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t1' )
)

SubABinaryOperator() subbing old variable chill_t1 in 
chill_t1 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t1 in 
x[chill_t1 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t1 in 
chill_t1 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t1 in 
y[chill_t1] = x[chill_t1 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t1' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t1 in 
chill_t1 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

loop.cc LEAVING apply_xform( set )

loop.cc apply_xform( set )
{[chill_t2] -> [chill_t3] : chill_t2 = chill_t3 }
FIX THIS rose in generic loop.cc
loop vars 0 chill_t2
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
CG_utils.cc  output_substitutions()          DONE



*** gonna die  *i = 0
1 uninterpreted symbols
loop vars 0 chill_t2
CG_utils.cc  output_substitutions()
v Out_1
CG_utils.cc  output_substitutions()          DONE

loop.cc stmt[*i].code =


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t2] = (2.0f * x[chill_t2])
stmt(1) = x[chill_t2 + 1] = x[chill_t2]
stmt(2) = x[chill_t2 + 2] = 3.0f
stmt(3) = y[chill_t2] = x[chill_t2 - 1]
sub 0  chill_t3

subbing chill_t3
for  chill_t2

SubABinaryOperator() subbing old variable chill_t2 in 
x[chill_t2] = (2.0f * x[chill_t2])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t2' )
  )
)

SubABinaryOperator() subbing old variable chill_t2 in 
2.0f * x[chill_t2]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t2' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t2 in 
x[chill_t2 + 1] = x[chill_t2]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t2' )
)

SubABinaryOperator() subbing old variable chill_t2 in 
chill_t2 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t2 in 
x[chill_t2 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t2 in 
chill_t2 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t2 in 
y[chill_t2] = x[chill_t2 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t2' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t2 in 
chill_t2 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

loop.cc LEAVING apply_xform( set )

loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+1' ??
CG_chillBuilder::CreateInt( 1 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 1

subbing chill_t3 + 1
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+2' ??
CG_chillBuilder::CreateInt( 2 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 2

subbing chill_t3 + 2
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+3' ??
CG_chillBuilder::CreateInt( 3 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 3

subbing chill_t3 + 3
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+4' ??
CG_chillBuilder::CreateInt( 4 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 4

subbing chill_t3 + 4
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
x[(chill_t3 + 4) + 2] = 3.0f
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
x[(chill_t3 + 4) + 2] = 3.0f
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+5' ??
CG_chillBuilder::CreateInt( 5 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 5

subbing chill_t3 + 5
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
x[(chill_t3 + 5) + 2] = 3.0f
y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
x[(chill_t3 + 4) + 2] = 3.0f
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
x[(chill_t3 + 5) + 2] = 3.0f
y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+6' ??
CG_chillBuilder::CreateInt( 6 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 6

subbing chill_t3 + 6
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 6] = (2.0f * x[chill_t3 + 6])
x[(chill_t3 + 6) + 1] = x[chill_t3 + 6]
x[(chill_t3 + 6) + 2] = 3.0f
y[chill_t3 + 6] = x[chill_t3 + 6 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
x[(chill_t3 + 4) + 2] = 3.0f
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
x[(chill_t3 + 5) + 2] = 3.0f
y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
x[chill_t3 + 6] = (2.0f * x[chill_t3 + 6])
x[(chill_t3 + 6) + 1] = x[chill_t3 + 6]
x[(chill_t3 + 6) + 2] = 3.0f
y[chill_t3 + 6] = x[chill_t3 + 6 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+7' ??
CG_chillBuilder::CreateInt( 7 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 7

subbing chill_t3 + 7
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 7] = (2.0f * x[chill_t3 + 7])
x[(chill_t3 + 7) + 1] = x[chill_t3 + 7]
x[(chill_t3 + 7) + 2] = 3.0f
y[chill_t3 + 7] = x[chill_t3 + 7 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
x[(chill_t3 + 4) + 2] = 3.0f
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
x[(chill_t3 + 5) + 2] = 3.0f
y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
x[chill_t3 + 6] = (2.0f * x[chill_t3 + 6])
x[(chill_t3 + 6) + 1] = x[chill_t3 + 6]
x[(chill_t3 + 6) + 2] = 3.0f
y[chill_t3 + 6] = x[chill_t3 + 6 - 1]
x[chill_t3 + 7] = (2.0f * x[chill_t3 + 7])
x[(chill_t3 + 7) + 1] = x[chill_t3 + 7]
x[(chill_t3 + 7) + 2] = 3.0f
y[chill_t3 + 7] = x[chill_t3 + 7 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+8' ??
CG_chillBuilder::CreateInt( 8 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 8

subbing chill_t3 + 8
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 8] = (2.0f * x[chill_t3 + 8])
x[(chill_t3 + 8) + 1] = x[chill_t3 + 8]
x[(chill_t3 + 8) + 2] = 3.0f
y[chill_t3 + 8] = x[chill_t3 + 8 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
x[(chill_t3 + 4) + 2] = 3.0f
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
x[(chill_t3 + 5) + 2] = 3.0f
y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
x[chill_t3 + 6] = (2.0f * x[chill_t3 + 6])
x[(chill_t3 + 6) + 1] = x[chill_t3 + 6]
x[(chill_t3 + 6) + 2] = 3.0f
y[chill_t3 + 6] = x[chill_t3 + 6 - 1]
x[chill_t3 + 7] = (2.0f * x[chill_t3 + 7])
x[(chill_t3 + 7) + 1] = x[chill_t3 + 7]
x[(chill_t3 + 7) + 2] = 3.0f
y[chill_t3 + 7] = x[chill_t3 + 7 - 1]
x[chill_t3 + 8] = (2.0f * x[chill_t3 + 8])
x[(chill_t3 + 8) + 1] = x[chill_t3 + 8]
x[(chill_t3 + 8) + 2] = 3.0f
y[chill_t3 + 8] = x[chill_t3 + 8 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+9' ??
CG_chillBuilder::CreateInt( 9 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 9

subbing chill_t3 + 9
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 9] = (2.0f * x[chill_t3 + 9])
x[(chill_t3 + 9) + 1] = x[chill_t3 + 9]
x[(chill_t3 + 9) + 2] = 3.0f
y[chill_t3 + 9] = x[chill_t3 + 9 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
x[(chill_t3 + 4) + 2] = 3.0f
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
x[(chill_t3 + 5) + 2] = 3.0f
y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
x[chill_t3 + 6] = (2.0f * x[chill_t3 + 6])
x[(chill_t3 + 6) + 1] = x[chill_t3 + 6]
x[(chill_t3 + 6) + 2] = 3.0f
y[chill_t3 + 6] = x[chill_t3 + 6 - 1]
x[chill_t3 + 7] = (2.0f * x[chill_t3 + 7])
x[(chill_t3 + 7) + 1] = x[chill_t3 + 7]
x[(chill_t3 + 7) + 2] = 3.0f
y[chill_t3 + 7] = x[chill_t3 + 7 - 1]
x[chill_t3 + 8] = (2.0f * x[chill_t3 + 8])
x[(chill_t3 + 8) + 1] = x[chill_t3 + 8]
x[(chill_t3 + 8) + 2] = 3.0f
y[chill_t3 + 8] = x[chill_t3 + 8 - 1]
x[chill_t3 + 9] = (2.0f * x[chill_t3 + 9])
x[(chill_t3 + 9) + 1] = x[chill_t3 + 9]
x[(chill_t3 + 9) + 2] = 3.0f
y[chill_t3 + 9] = x[chill_t3 + 9 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+10' ??
CG_chillBuilder::CreateInt( 10 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 10

subbing chill_t3 + 10
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 10] = (2.0f * x[chill_t3 + 10])
x[(chill_t3 + 10) + 1] = x[chill_t3 + 10]
x[(chill_t3 + 10) + 2] = 3.0f
y[chill_t3 + 10] = x[chill_t3 + 10 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
x[(chill_t3 + 4) + 2] = 3.0f
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
x[(chill_t3 + 5) + 2] = 3.0f
y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
x[chill_t3 + 6] = (2.0f * x[chill_t3 + 6])
x[(chill_t3 + 6) + 1] = x[chill_t3 + 6]
x[(chill_t3 + 6) + 2] = 3.0f
y[chill_t3 + 6] = x[chill_t3 + 6 - 1]
x[chill_t3 + 7] = (2.0f * x[chill_t3 + 7])
x[(chill_t3 + 7) + 1] = x[chill_t3 + 7]
x[(chill_t3 + 7) + 2] = 3.0f
y[chill_t3 + 7] = x[chill_t3 + 7 - 1]
x[chill_t3 + 8] = (2.0f * x[chill_t3 + 8])
x[(chill_t3 + 8) + 1] = x[chill_t3 + 8]
x[(chill_t3 + 8) + 2] = 3.0f
y[chill_t3 + 8] = x[chill_t3 + 8 - 1]
x[chill_t3 + 9] = (2.0f * x[chill_t3 + 9])
x[(chill_t3 + 9) + 1] = x[chill_t3 + 9]
x[(chill_t3 + 9) + 2] = 3.0f
y[chill_t3 + 9] = x[chill_t3 + 9 - 1]
x[chill_t3 + 10] = (2.0f * x[chill_t3 + 10])
x[(chill_t3 + 10) + 1] = x[chill_t3 + 10]
x[(chill_t3 + 10) + 2] = 3.0f
y[chill_t3 + 10] = x[chill_t3 + 10 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+11' ??
CG_chillBuilder::CreateInt( 11 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 11

subbing chill_t3 + 11
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 11] = (2.0f * x[chill_t3 + 11])
x[(chill_t3 + 11) + 1] = x[chill_t3 + 11]
x[(chill_t3 + 11) + 2] = 3.0f
y[chill_t3 + 11] = x[chill_t3 + 11 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
x[(chill_t3 + 4) + 2] = 3.0f
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
x[(chill_t3 + 5) + 2] = 3.0f
y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
x[chill_t3 + 6] = (2.0f * x[chill_t3 + 6])
x[(chill_t3 + 6) + 1] = x[chill_t3 + 6]
x[(chill_t3 + 6) + 2] = 3.0f
y[chill_t3 + 6] = x[chill_t3 + 6 - 1]
x[chill_t3 + 7] = (2.0f * x[chill_t3 + 7])
x[(chill_t3 + 7) + 1] = x[chill_t3 + 7]
x[(chill_t3 + 7) + 2] = 3.0f
y[chill_t3 + 7] = x[chill_t3 + 7 - 1]
x[chill_t3 + 8] = (2.0f * x[chill_t3 + 8])
x[(chill_t3 + 8) + 1] = x[chill_t3 + 8]
x[(chill_t3 + 8) + 2] = 3.0f
y[chill_t3 + 8] = x[chill_t3 + 8 - 1]
x[chill_t3 + 9] = (2.0f * x[chill_t3 + 9])
x[(chill_t3 + 9) + 1] = x[chill_t3 + 9]
x[(chill_t3 + 9) + 2] = 3.0f
y[chill_t3 + 9] = x[chill_t3 + 9 - 1]
x[chill_t3 + 10] = (2.0f * x[chill_t3 + 10])
x[(chill_t3 + 10) + 1] = x[chill_t3 + 10]
x[(chill_t3 + 10) + 2] = 3.0f
y[chill_t3 + 10] = x[chill_t3 + 10 - 1]
x[chill_t3 + 11] = (2.0f * x[chill_t3 + 11])
x[(chill_t3 + 11) + 1] = x[chill_t3 + 11]
x[(chill_t3 + 11) + 2] = 3.0f
y[chill_t3 + 11] = x[chill_t3 + 11 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+12' ??
CG_chillBuilder::CreateInt( 12 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 12

subbing chill_t3 + 12
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 12] = (2.0f * x[chill_t3 + 12])
x[(chill_t3 + 12) + 1] = x[chill_t3 + 12]
x[(chill_t3 + 12) + 2] = 3.0f
y[chill_t3 + 12] = x[chill_t3 + 12 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
x[(chill_t3 + 4) + 2] = 3.0f
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
x[(chill_t3 + 5) + 2] = 3.0f
y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
x[chill_t3 + 6] = (2.0f * x[chill_t3 + 6])
x[(chill_t3 + 6) + 1] = x[chill_t3 + 6]
x[(chill_t3 + 6) + 2] = 3.0f
y[chill_t3 + 6] = x[chill_t3 + 6 - 1]
x[chill_t3 + 7] = (2.0f * x[chill_t3 + 7])
x[(chill_t3 + 7) + 1] = x[chill_t3 + 7]
x[(chill_t3 + 7) + 2] = 3.0f
y[chill_t3 + 7] = x[chill_t3 + 7 - 1]
x[chill_t3 + 8] = (2.0f * x[chill_t3 + 8])
x[(chill_t3 + 8) + 1] = x[chill_t3 + 8]
x[(chill_t3 + 8) + 2] = 3.0f
y[chill_t3 + 8] = x[chill_t3 + 8 - 1]
x[chill_t3 + 9] = (2.0f * x[chill_t3 + 9])
x[(chill_t3 + 9) + 1] = x[chill_t3 + 9]
x[(chill_t3 + 9) + 2] = 3.0f
y[chill_t3 + 9] = x[chill_t3 + 9 - 1]
x[chill_t3 + 10] = (2.0f * x[chill_t3 + 10])
x[(chill_t3 + 10) + 1] = x[chill_t3 + 10]
x[(chill_t3 + 10) + 2] = 3.0f
y[chill_t3 + 10] = x[chill_t3 + 10 - 1]
x[chill_t3 + 11] = (2.0f * x[chill_t3 + 11])
x[(chill_t3 + 11) + 1] = x[chill_t3 + 11]
x[(chill_t3 + 11) + 2] = 3.0f
y[chill_t3 + 11] = x[chill_t3 + 11 - 1]
x[chill_t3 + 12] = (2.0f * x[chill_t3 + 12])
x[(chill_t3 + 12) + 1] = x[chill_t3 + 12]
x[(chill_t3 + 12) + 2] = 3.0f
y[chill_t3 + 12] = x[chill_t3 + 12 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+13' ??
CG_chillBuilder::CreateInt( 13 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 13

subbing chill_t3 + 13
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 13] = (2.0f * x[chill_t3 + 13])
x[(chill_t3 + 13) + 1] = x[chill_t3 + 13]
x[(chill_t3 + 13) + 2] = 3.0f
y[chill_t3 + 13] = x[chill_t3 + 13 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
x[(chill_t3 + 4) + 2] = 3.0f
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
x[(chill_t3 + 5) + 2] = 3.0f
y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
x[chill_t3 + 6] = (2.0f * x[chill_t3 + 6])
x[(chill_t3 + 6) + 1] = x[chill_t3 + 6]
x[(chill_t3 + 6) + 2] = 3.0f
y[chill_t3 + 6] = x[chill_t3 + 6 - 1]
x[chill_t3 + 7] = (2.0f * x[chill_t3 + 7])
x[(chill_t3 + 7) + 1] = x[chill_t3 + 7]
x[(chill_t3 + 7) + 2] = 3.0f
y[chill_t3 + 7] = x[chill_t3 + 7 - 1]
x[chill_t3 + 8] = (2.0f * x[chill_t3 + 8])
x[(chill_t3 + 8) + 1] = x[chill_t3 + 8]
x[(chill_t3 + 8) + 2] = 3.0f
y[chill_t3 + 8] = x[chill_t3 + 8 - 1]
x[chill_t3 + 9] = (2.0f * x[chill_t3 + 9])
x[(chill_t3 + 9) + 1] = x[chill_t3 + 9]
x[(chill_t3 + 9) + 2] = 3.0f
y[chill_t3 + 9] = x[chill_t3 + 9 - 1]
x[chill_t3 + 10] = (2.0f * x[chill_t3 + 10])
x[(chill_t3 + 10) + 1] = x[chill_t3 + 10]
x[(chill_t3 + 10) + 2] = 3.0f
y[chill_t3 + 10] = x[chill_t3 + 10 - 1]
x[chill_t3 + 11] = (2.0f * x[chill_t3 + 11])
x[(chill_t3 + 11) + 1] = x[chill_t3 + 11]
x[(chill_t3 + 11) + 2] = 3.0f
y[chill_t3 + 11] = x[chill_t3 + 11 - 1]
x[chill_t3 + 12] = (2.0f * x[chill_t3 + 12])
x[(chill_t3 + 12) + 1] = x[chill_t3 + 12]
x[(chill_t3 + 12) + 2] = 3.0f
y[chill_t3 + 12] = x[chill_t3 + 12 - 1]
x[chill_t3 + 13] = (2.0f * x[chill_t3 + 13])
x[(chill_t3 + 13) + 1] = x[chill_t3 + 13]
x[(chill_t3 + 13) + 2] = 3.0f
y[chill_t3 + 13] = x[chill_t3 + 13 - 1]
loop_unroll.cc, will replace 'chill_t3 with 'chill_t3+14' ??
CG_chillBuilder::CreateInt( 14 )
CG_chillBuilder::CreateIdent( chill_t3 )
chillAST_VarDecl::chillAST_VarDecl( type int, name chill_t3, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  'chill_t3' )
CG_chillBuilder::CreatePlus()
loop_unroll.cc subs  now has 1 parts
old src was =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  chill_t3 + 14

subbing chill_t3 + 14
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

old src is =
x[chill_t3] = (2.0f * x[chill_t3])
x[chill_t3 + 1] = x[chill_t3]
x[chill_t3 + 2] = 3.0f
y[chill_t3] = x[chill_t3 - 1]
substituted copy is =
x[chill_t3 + 14] = (2.0f * x[chill_t3 + 14])
x[(chill_t3 + 14) + 1] = x[chill_t3 + 14]
x[(chill_t3 + 14) + 2] = 3.0f
y[chill_t3 + 14] = x[chill_t3 + 14 - 1]
appended code =
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
x[(chill_t3 + 1) + 2] = 3.0f
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
x[(chill_t3 + 2) + 2] = 3.0f
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
x[(chill_t3 + 3) + 2] = 3.0f
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
x[(chill_t3 + 4) + 2] = 3.0f
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
x[(chill_t3 + 5) + 2] = 3.0f
y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
x[chill_t3 + 6] = (2.0f * x[chill_t3 + 6])
x[(chill_t3 + 6) + 1] = x[chill_t3 + 6]
x[(chill_t3 + 6) + 2] = 3.0f
y[chill_t3 + 6] = x[chill_t3 + 6 - 1]
x[chill_t3 + 7] = (2.0f * x[chill_t3 + 7])
x[(chill_t3 + 7) + 1] = x[chill_t3 + 7]
x[(chill_t3 + 7) + 2] = 3.0f
y[chill_t3 + 7] = x[chill_t3 + 7 - 1]
x[chill_t3 + 8] = (2.0f * x[chill_t3 + 8])
x[(chill_t3 + 8) + 1] = x[chill_t3 + 8]
x[(chill_t3 + 8) + 2] = 3.0f
y[chill_t3 + 8] = x[chill_t3 + 8 - 1]
x[chill_t3 + 9] = (2.0f * x[chill_t3 + 9])
x[(chill_t3 + 9) + 1] = x[chill_t3 + 9]
x[(chill_t3 + 9) + 2] = 3.0f
y[chill_t3 + 9] = x[chill_t3 + 9 - 1]
x[chill_t3 + 10] = (2.0f * x[chill_t3 + 10])
x[(chill_t3 + 10) + 1] = x[chill_t3 + 10]
x[(chill_t3 + 10) + 2] = 3.0f
y[chill_t3 + 10] = x[chill_t3 + 10 - 1]
x[chill_t3 + 11] = (2.0f * x[chill_t3 + 11])
x[(chill_t3 + 11) + 1] = x[chill_t3 + 11]
x[(chill_t3 + 11) + 2] = 3.0f
y[chill_t3 + 11] = x[chill_t3 + 11 - 1]
x[chill_t3 + 12] = (2.0f * x[chill_t3 + 12])
x[(chill_t3 + 12) + 1] = x[chill_t3 + 12]
x[(chill_t3 + 12) + 2] = 3.0f
y[chill_t3 + 12] = x[chill_t3 + 12 - 1]
x[chill_t3 + 13] = (2.0f * x[chill_t3 + 13])
x[(chill_t3 + 13) + 1] = x[chill_t3 + 13]
x[(chill_t3 + 13) + 2] = 3.0f
y[chill_t3 + 13] = x[chill_t3 + 13 - 1]
x[chill_t3 + 14] = (2.0f * x[chill_t3 + 14])
x[(chill_t3 + 14) + 1] = x[chill_t3 + 14]
x[(chill_t3 + 14) + 2] = 3.0f
y[chill_t3 + 14] = x[chill_t3 + 14 - 1]
new_stmt.IS = 
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
update dependence graph
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
IR_roseArraySymbol::IR_roseArraySymbol (x)
                                                  loop_unroll.cc returning new_stmts
CodeGen::CodeGen() sanity checking
num_stmt 2  2 xforms
here goes
here goes
CodeGen::CodeGen() DONE
CG.cc line 164, CG_result::printString()
stmts.size() 2

CG_result::printRepr(ocg, stmts) 
DYINGHERE
s 0/2
result: t2 = Out_1, 0
s 1/2
result: t2 = Out_1, 0
return printRepr( ... )
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_split::printRepr()
loop_print_repr()  guard_repr NULL
CG.cc  CG_loop printrepr with more arguments
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
CG_utils.cc  output_substitutions()          DONE

CG.cc  CG_loop printrepr with more arguments
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
CG_utils.cc  output_substitutions()          DONE

CG_utils.cc loop_print_repr recursive
loop_print_repr()  guard_repr NULL
s0: {[t1,t2,t3] : t1 = 0 && t3 = 0 && t2 = 1 }
s1: {[t1,t2,t3] : t3 = 1 && t2 = 1 && t1 = 0 }

s0(1);
s1(1);

script success!
parser.yy almost done
1 loop?   (loop_num_start == loop_num_end)

Loop::getCode( 1 )

CG_result::printRepr(ocg, stmts) 
DYINGHERE
s 0/2
result: t2 = Out_1, 0
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from 
(DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
s 1/2
result: t2 = Out_1, 0
CG_chillBuilder::CreateIdent( t2 )
chillAST_VarDecl::chillAST_VarDecl( type int, name t2, arraypart  parent )
made a new chillRepr from (DeclRefExpr 'int' Var  't2' )
CG_chillBuilder::CreatePlus()
return printRepr( ... )
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_loop::printRepr() w assigned_on_the_fly
CG.cc  CG_loop printrepr with more arguments
output_guard()
CG_chillBuilder::CreateInt( 1 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateAnd()
CG_split::printRepr()
loop_print_repr()  guard_repr NULL
CG.cc  CG_loop printrepr with more arguments
CG_chillBuilder::CreateInt( 0 )
CG_chillBuilder::CreateAnd()
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreatePlus()
CG_utils.cc  output_substitutions()          DONE

chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
4 nodes in old code. was:
stmt(0) = x[chill_t3] = (2.0f * x[chill_t3])
stmt(1) = x[chill_t3 + 1] = x[chill_t3]
stmt(2) = x[chill_t3 + 2] = 3.0f
stmt(3) = y[chill_t3] = x[chill_t3 - 1]
sub 0  1

subbing 1
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3] = (2.0f * x[chill_t3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (DeclRefExpr 'int' Var  'chill_t3' )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = x[chill_t3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (DeclRefExpr 'int' Var  'chill_t3' )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3] = x[chill_t3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

CG.cc  CG_loop printrepr with more arguments
CG_chillBuilder::CreateInt( 1 )
CG_chillBuilder::CreatePlus()
CG_chillBuilder::CreateAnd()
CG_leaf::printRepr()
CG_utils.cc  output_substitutions()
v Out_1
CG_chillBuilder::CreatePlus()
CG_utils.cc  output_substitutions()          DONE

chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE
chillAST_BinaryOperator, op '=', lhs is an array reference  LVALUE


in CG_xxxxBuilder.cc (OMEGA)  CG_xxxxBuilder::CreateSubstitutedStmt()
1 vars and 1 substitutions
56 nodes in old code. was:
stmt(0) = x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
stmt(1) = x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
stmt(2) = x[(chill_t3 + 1) + 2] = 3.0f
stmt(3) = y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
stmt(4) = x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
stmt(5) = x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
stmt(6) = x[(chill_t3 + 2) + 2] = 3.0f
stmt(7) = y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
stmt(8) = x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
stmt(9) = x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
stmt(10) = x[(chill_t3 + 3) + 2] = 3.0f
stmt(11) = y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
stmt(12) = x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
stmt(13) = x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
stmt(14) = x[(chill_t3 + 4) + 2] = 3.0f
stmt(15) = y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
stmt(16) = x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
stmt(17) = x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
stmt(18) = x[(chill_t3 + 5) + 2] = 3.0f
stmt(19) = y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
stmt(20) = x[chill_t3 + 6] = (2.0f * x[chill_t3 + 6])
stmt(21) = x[(chill_t3 + 6) + 1] = x[chill_t3 + 6]
stmt(22) = x[(chill_t3 + 6) + 2] = 3.0f
stmt(23) = y[chill_t3 + 6] = x[chill_t3 + 6 - 1]
stmt(24) = x[chill_t3 + 7] = (2.0f * x[chill_t3 + 7])
stmt(25) = x[(chill_t3 + 7) + 1] = x[chill_t3 + 7]
stmt(26) = x[(chill_t3 + 7) + 2] = 3.0f
stmt(27) = y[chill_t3 + 7] = x[chill_t3 + 7 - 1]
stmt(28) = x[chill_t3 + 8] = (2.0f * x[chill_t3 + 8])
stmt(29) = x[(chill_t3 + 8) + 1] = x[chill_t3 + 8]
stmt(30) = x[(chill_t3 + 8) + 2] = 3.0f
stmt(31) = y[chill_t3 + 8] = x[chill_t3 + 8 - 1]
stmt(32) = x[chill_t3 + 9] = (2.0f * x[chill_t3 + 9])
stmt(33) = x[(chill_t3 + 9) + 1] = x[chill_t3 + 9]
stmt(34) = x[(chill_t3 + 9) + 2] = 3.0f
stmt(35) = y[chill_t3 + 9] = x[chill_t3 + 9 - 1]
stmt(36) = x[chill_t3 + 10] = (2.0f * x[chill_t3 + 10])
stmt(37) = x[(chill_t3 + 10) + 1] = x[chill_t3 + 10]
stmt(38) = x[(chill_t3 + 10) + 2] = 3.0f
stmt(39) = y[chill_t3 + 10] = x[chill_t3 + 10 - 1]
stmt(40) = x[chill_t3 + 11] = (2.0f * x[chill_t3 + 11])
stmt(41) = x[(chill_t3 + 11) + 1] = x[chill_t3 + 11]
stmt(42) = x[(chill_t3 + 11) + 2] = 3.0f
stmt(43) = y[chill_t3 + 11] = x[chill_t3 + 11 - 1]
stmt(44) = x[chill_t3 + 12] = (2.0f * x[chill_t3 + 12])
stmt(45) = x[(chill_t3 + 12) + 1] = x[chill_t3 + 12]
stmt(46) = x[(chill_t3 + 12) + 2] = 3.0f
stmt(47) = y[chill_t3 + 12] = x[chill_t3 + 12 - 1]
stmt(48) = x[chill_t3 + 13] = (2.0f * x[chill_t3 + 13])
stmt(49) = x[(chill_t3 + 13) + 1] = x[chill_t3 + 13]
stmt(50) = x[(chill_t3 + 13) + 2] = 3.0f
stmt(51) = y[chill_t3 + 13] = x[chill_t3 + 13 - 1]
stmt(52) = x[chill_t3 + 14] = (2.0f * x[chill_t3 + 14])
stmt(53) = x[(chill_t3 + 14) + 1] = x[chill_t3 + 14]
stmt(54) = x[(chill_t3 + 14) + 2] = 3.0f
stmt(55) = y[chill_t3 + 14] = x[chill_t3 + 14 - 1]
sub 0  1

subbing 1
for  chill_t3

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 1] = (2.0f * x[chill_t3 + 1])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 1)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 1]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 1) + 1] = x[chill_t3 + 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 1) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 1) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 1) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 1] = x[chill_t3 + 1 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 1)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 2] = (2.0f * x[chill_t3 + 2])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 2)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 2]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 2)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 2) + 1] = x[chill_t3 + 2]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 2)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 2) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 2) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 2) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 2] = x[chill_t3 + 2 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 2)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 3] = (2.0f * x[chill_t3 + 3])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 3)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 3
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 3)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 3]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 3)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 3
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 3)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 3) + 1] = x[chill_t3 + 3]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 3)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 3) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 3
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 3)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 3
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 3)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 3) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 3) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 3
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 3)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 3] = x[chill_t3 + 3 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 3)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 3
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 3)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 3 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 3
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 3)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 4] = (2.0f * x[chill_t3 + 4])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 4)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 4
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 4)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 4]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 4)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 4
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 4)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 4) + 1] = x[chill_t3 + 4]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 4)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 4) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 4
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 4)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 4
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 4)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 4) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 4) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 4
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 4)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 4] = x[chill_t3 + 4 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 4)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 4
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 4)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 4 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 4
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 4)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 5] = (2.0f * x[chill_t3 + 5])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 5)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 5
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 5)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 5]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 5)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 5
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 5)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 5) + 1] = x[chill_t3 + 5]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 5)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 5) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 5
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 5)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 5
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 5)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 5) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 5) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 5
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 5)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 5] = x[chill_t3 + 5 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 5)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 5
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 5)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 5 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 5
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 5)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 6] = (2.0f * x[chill_t3 + 6])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 6)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 6
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 6)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 6]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 6)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 6
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 6)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 6) + 1] = x[chill_t3 + 6]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 6)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 6) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 6
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 6)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 6
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 6)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 6) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 6) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 6
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 6)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 6] = x[chill_t3 + 6 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 6)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 6
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 6)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 6 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 6
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 6)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 7] = (2.0f * x[chill_t3 + 7])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 7)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 7
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 7)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 7]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 7)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 7
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 7)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 7) + 1] = x[chill_t3 + 7]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 7)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 7) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 7
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 7)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 7
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 7)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 7) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 7) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 7
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 7)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 7] = x[chill_t3 + 7 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 7)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 7
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 7)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 7 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 7
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 7)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 8] = (2.0f * x[chill_t3 + 8])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 8)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 8
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 8)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 8]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 8)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 8
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 8)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 8) + 1] = x[chill_t3 + 8]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 8)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 8) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 8
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 8)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 8
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 8)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 8) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 8) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 8
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 8)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 8] = x[chill_t3 + 8 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 8)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 8
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 8)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 8 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 8
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 8)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 9] = (2.0f * x[chill_t3 + 9])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 9)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 9
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 9)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 9]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 9)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 9
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 9)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 9) + 1] = x[chill_t3 + 9]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 9)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 9) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 9
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 9)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 9
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 9)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 9) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 9) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 9
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 9)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 9] = x[chill_t3 + 9 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 9)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 9
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 9)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 9 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 9
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 9)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 10] = (2.0f * x[chill_t3 + 10])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 10)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 10
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 10)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 10]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 10)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 10
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 10)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 10) + 1] = x[chill_t3 + 10]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 10)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 10) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 10
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 10)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 10
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 10)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 10) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 10) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 10
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 10)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 10] = x[chill_t3 + 10 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 10)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 10
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 10)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 10 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 10
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 10)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 11] = (2.0f * x[chill_t3 + 11])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 11)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 11
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 11)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 11]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 11)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 11
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 11)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 11) + 1] = x[chill_t3 + 11]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 11)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 11) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 11
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 11)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 11
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 11)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 11) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 11) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 11
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 11)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 11] = x[chill_t3 + 11 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 11)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 11
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 11)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 11 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 11
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 11)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 12] = (2.0f * x[chill_t3 + 12])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 12)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 12
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 12)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 12]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 12)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 12
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 12)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 12) + 1] = x[chill_t3 + 12]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 12)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 12) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 12
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 12)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 12
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 12)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 12) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 12) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 12
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 12)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 12] = x[chill_t3 + 12 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 12)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 12
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 12)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 12 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 12
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 12)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 13] = (2.0f * x[chill_t3 + 13])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 13)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 13
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 13)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 13]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 13)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 13
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 13)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 13) + 1] = x[chill_t3 + 13]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 13)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 13) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 13
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 13)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 13
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 13)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 13) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 13) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 13
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 13)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 13] = x[chill_t3 + 13 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 13)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 13
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 13)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 13 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 13
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 13)

SubABinaryOperator() subbing old variable chill_t3 in 
x[chill_t3 + 14] = (2.0f * x[chill_t3 + 14])
op =   rhs type BinaryOperator
(BinaryOperator '*'
  (CStyleCastExpr  (float) 
    (IntegerLiteral 'int' 2)
  )
  (ArraySubscriptExpr (x) 'float' rvalue
    (DeclRefExpr 'float *' ParmVar  'x' )
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 14)
    )
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 14
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 14)

SubABinaryOperator() subbing old variable chill_t3 in 
2.0f * x[chill_t3 + 14]
op *   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 14)
  )
)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 14
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 14)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 14) + 1] = x[chill_t3 + 14]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '+'
    (DeclRefExpr 'int' Var  'chill_t3' )
    (IntegerLiteral 'int' 14)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 14) + 1
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 14
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 14)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 14
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 14)

SubABinaryOperator() subbing old variable chill_t3 in 
x[(chill_t3 + 14) + 2] = 3.0f
op =   rhs type CStyleCastExpr
(CStyleCastExpr  (float) 
  (IntegerLiteral 'int' 3)
)

SubABinaryOperator() subbing old variable chill_t3 in 
(chill_t3 + 14) + 2
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 2)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 14
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 14)

SubCStyleCastExpr()  subexpr is type IntegerLiteral
SubABinaryOperator() subbing old variable chill_t3 in 
y[chill_t3 + 14] = x[chill_t3 + 14 - 1]
op =   rhs type ArraySubscriptExpr
(ArraySubscriptExpr (x) 'float' rvalue
  (DeclRefExpr 'float *' ParmVar  'x' )
  (BinaryOperator '-'
    (BinaryOperator '+'
      (DeclRefExpr 'int' Var  'chill_t3' )
      (IntegerLiteral 'int' 14)
    )
    (IntegerLiteral 'int' 1)
  )
)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 14
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 14)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 14 - 1
op -   rhs type IntegerLiteral
(IntegerLiteral 'int' 1)

SubABinaryOperator() subbing old variable chill_t3 in 
chill_t3 + 14
op +   rhs type IntegerLiteral
(IntegerLiteral 'int' 14)

CG_utils.cc loop_print_repr recursive
loop_print_repr()  guard_repr NULL
IR_roseCode::ReplaceCode( old, *repr)
old was
for (i = 1; i < 16; i++) {
  x[chill_t3] = (2.0f * x[chill_t3]);
  x[chill_t3 + 1] = x[chill_t3];
  x[chill_t3 + 2] = 3.0f;
  y[chill_t3] = x[chill_t3 - 1];
}


old parent was

{
int i;
int j;
x[0] = 123.0f;
x[1] = 354.0f;
for (i = 1; i < 16; i++) {
  x[chill_t3] = (2.0f * x[chill_t3]);
  x[chill_t3 + 1] = x[chill_t3];
  x[chill_t3 + 2] = 3.0f;
  y[chill_t3] = x[chill_t3 - 1];
}


}
inserting x[1 + 1] = x[1]
inserting x[1 + 2] = 3.0f
inserting y[1] = x[1 - 1]
inserting x[1 + 1] = (2.0f * x[1 + 1])
inserting x[(1 + 1) + 1] = x[1 + 1]
inserting x[(1 + 1) + 2] = 3.0f
inserting y[1 + 1] = x[1 + 1 - 1]
inserting x[1 + 2] = (2.0f * x[1 + 2])
inserting x[(1 + 2) + 1] = x[1 + 2]
inserting x[(1 + 2) + 2] = 3.0f
inserting y[1 + 2] = x[1 + 2 - 1]
inserting x[1 + 3] = (2.0f * x[1 + 3])
inserting x[(1 + 3) + 1] = x[1 + 3]
inserting x[(1 + 3) + 2] = 3.0f
inserting y[1 + 3] = x[1 + 3 - 1]
inserting x[1 + 4] = (2.0f * x[1 + 4])
inserting x[(1 + 4) + 1] = x[1 + 4]
inserting x[(1 + 4) + 2] = 3.0f
inserting y[1 + 4] = x[1 + 4 - 1]
inserting x[1 + 5] = (2.0f * x[1 + 5])
inserting x[(1 + 5) + 1] = x[1 + 5]
inserting x[(1 + 5) + 2] = 3.0f
inserting y[1 + 5] = x[1 + 5 - 1]
inserting x[1 + 6] = (2.0f * x[1 + 6])
inserting x[(1 + 6) + 1] = x[1 + 6]
inserting x[(1 + 6) + 2] = 3.0f
inserting y[1 + 6] = x[1 + 6 - 1]
inserting x[1 + 7] = (2.0f * x[1 + 7])
inserting x[(1 + 7) + 1] = x[1 + 7]
inserting x[(1 + 7) + 2] = 3.0f
inserting y[1 + 7] = x[1 + 7 - 1]
inserting x[1 + 8] = (2.0f * x[1 + 8])
inserting x[(1 + 8) + 1] = x[1 + 8]
inserting x[(1 + 8) + 2] = 3.0f
inserting y[1 + 8] = x[1 + 8 - 1]
inserting x[1 + 9] = (2.0f * x[1 + 9])
inserting x[(1 + 9) + 1] = x[1 + 9]
inserting x[(1 + 9) + 2] = 3.0f
inserting y[1 + 9] = x[1 + 9 - 1]
inserting x[1 + 10] = (2.0f * x[1 + 10])
inserting x[(1 + 10) + 1] = x[1 + 10]
inserting x[(1 + 10) + 2] = 3.0f
inserting y[1 + 10] = x[1 + 10 - 1]
inserting x[1 + 11] = (2.0f * x[1 + 11])
inserting x[(1 + 11) + 1] = x[1 + 11]
inserting x[(1 + 11) + 2] = 3.0f
inserting y[1 + 11] = x[1 + 11 - 1]
inserting x[1 + 12] = (2.0f * x[1 + 12])
inserting x[(1 + 12) + 1] = x[1 + 12]
inserting x[(1 + 12) + 2] = 3.0f
inserting y[1 + 12] = x[1 + 12 - 1]
inserting x[1 + 13] = (2.0f * x[1 + 13])
inserting x[(1 + 13) + 1] = x[1 + 13]
inserting x[(1 + 13) + 2] = 3.0f
inserting y[1 + 13] = x[1 + 13 - 1]
inserting x[1 + 14] = (2.0f * x[1 + 14])
inserting x[(1 + 14) + 1] = x[1 + 14]
inserting x[(1 + 14) + 2] = 3.0f
inserting y[1 + 14] = x[1 + 14 - 1]

new parent2 is

{
int i;
int j;
x[0] = 123.0f;
x[1] = 354.0f;
x[1] = (2.0f * x[1]);
x[1 + 1] = x[1];
x[1 + 2] = 3.0f;
y[1] = x[1 - 1];
x[1 + 1] = (2.0f * x[1 + 1]);
x[(1 + 1) + 1] = x[1 + 1];
x[(1 + 1) + 2] = 3.0f;
y[1 + 1] = x[1 + 1 - 1];
x[1 + 2] = (2.0f * x[1 + 2]);
x[(1 + 2) + 1] = x[1 + 2];
x[(1 + 2) + 2] = 3.0f;
y[1 + 2] = x[1 + 2 - 1];
x[1 + 3] = (2.0f * x[1 + 3]);
x[(1 + 3) + 1] = x[1 + 3];
x[(1 + 3) + 2] = 3.0f;
y[1 + 3] = x[1 + 3 - 1];
x[1 + 4] = (2.0f * x[1 + 4]);
x[(1 + 4) + 1] = x[1 + 4];
x[(1 + 4) + 2] = 3.0f;
y[1 + 4] = x[1 + 4 - 1];
x[1 + 5] = (2.0f * x[1 + 5]);
x[(1 + 5) + 1] = x[1 + 5];
x[(1 + 5) + 2] = 3.0f;
y[1 + 5] = x[1 + 5 - 1];
x[1 + 6] = (2.0f * x[1 + 6]);
x[(1 + 6) + 1] = x[1 + 6];
x[(1 + 6) + 2] = 3.0f;
y[1 + 6] = x[1 + 6 - 1];
x[1 + 7] = (2.0f * x[1 + 7]);
x[(1 + 7) + 1] = x[1 + 7];
x[(1 + 7) + 2] = 3.0f;
y[1 + 7] = x[1 + 7 - 1];
x[1 + 8] = (2.0f * x[1 + 8]);
x[(1 + 8) + 1] = x[1 + 8];
x[(1 + 8) + 2] = 3.0f;
y[1 + 8] = x[1 + 8 - 1];
x[1 + 9] = (2.0f * x[1 + 9]);
x[(1 + 9) + 1] = x[1 + 9];
x[(1 + 9) + 2] = 3.0f;
y[1 + 9] = x[1 + 9 - 1];
x[1 + 10] = (2.0f * x[1 + 10]);
x[(1 + 10) + 1] = x[1 + 10];
x[(1 + 10) + 2] = 3.0f;
y[1 + 10] = x[1 + 10 - 1];
x[1 + 11] = (2.0f * x[1 + 11]);
x[(1 + 11) + 1] = x[1 + 11];
x[(1 + 11) + 2] = 3.0f;
y[1 + 11] = x[1 + 11 - 1];
x[1 + 12] = (2.0f * x[1 + 12]);
x[(1 + 12) + 1] = x[1 + 12];
x[(1 + 12) + 2] = 3.0f;
y[1 + 12] = x[1 + 12 - 1];
x[1 + 13] = (2.0f * x[1 + 13]);
x[(1 + 13) + 1] = x[1 + 13];
x[(1 + 13) + 2] = 3.0f;
y[1 + 13] = x[1 + 13 - 1];
x[1 + 14] = (2.0f * x[1 + 14]);
x[(1 + 14) + 1] = x[1 + 14];
x[(1 + 14) + 2] = 3.0f;
y[1 + 14] = x[1 + 14 - 1];
}
deleting varDecl i
deleting varDecl j
// sourcefile has 2 children
they are
FunctionDecl
FunctionDecl
IR_chillCode::~IR_chillCode()
output happening as part of the destructor !!

@unnumberedsubsec Scale
@deftypefn {Transform} {} scale (set<int> @var{stmts}, int @var{loop}, int @var{amount)}
The @code{scale} transformation multiplies the index variable for the loop at level @var{loop} by @var{amount} and is a shortcut for the transformation @code{skew}(@var{stmts}, @var{loop}, [@math{0, \dots{}, 0,} @var{amount}]).
@end deftypefn

@multitable @columnfractions .50 .50 
@item
@b{Python Script}
@smallformat
@cartouche
@verbatim
from chill import *
source('mm.c')
procedure('mm')
loop(0)
known(['ambn > 0', 'an > 0', 'bm > 0'])
distribute([0,1],1)
scale([1],1,4)
scale([1],2,4)
print_code()
@end verbatim
@end cartouche
@end smallformat
@tab @b{Original code}
@smallformat
@cartouche
@verbatim
void mm(float **A, float **B, float **C, 
        int ambn, int an, int bm) {
  int i, j, n;
  for(i = 0; i < an; i++)
    for(j = 0; j < bm; j++) {
      C[i][j] = 0.0f;
      for(n = 0; n < ambn; n++)
        C[i][j] += A[i][n] * B[n][j];
    }
}
@end verbatim
@end cartouche
@end smallformat
@end multitable

@multitable @columnfractions .50 .50
@item
@b{Output on stdout}
@smallformat
@cartouche
@verbatim
for(t2 = 0; t2 <= an-1; t2++) {
  for(t4 = 0; t4 <= bm-1; t4++) {
    s0(t2,t4,0);
  }
}
for(t2 = 0; t2 <= 4*an-4; t2 += 4) {
  for(t4 = 0; t4 <= 4*bm-4; t4 += 4) {
    for(t6 = 0; t6 <= ambn-1; t6++) {
      s1(t2/4,t4/4,t6);
    }
  }
}
@end verbatim
@end cartouche
@end smallformat
@tab @b{Transformed code}
@smallformat
@cartouche
@verbatim
void mm(float **A, float **B, float **C,
        int ambn, int an, int bm) {
  int i, j, n;
  for (i = 0; i <= an - 1; i += 1) 
    for (j = 0; j <= bm - 1; j += 1) 
      C[i][j] = 0.0f;
  for (i = 0; i <= 4 * an - 4; i += 4) 
    for (j = 0; j <= 4 * bm - 4; j += 4) 
      for (n = 0; n <= ambn - 1; n += 1) 
        C[i/4][j/4] += A[i/4][n]*B[n][j/4];
}
@end verbatim
@end cartouche
@end smallformat
@end multitable

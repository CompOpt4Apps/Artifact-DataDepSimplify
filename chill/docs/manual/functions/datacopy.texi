@unnumberedsubsec Datacopy
For the specified accesses, a temporary array copy construction is introduced. Those array accesses are replaced by
appropriate temporary array accesses.
@deftypefn {Transform} {} Datacopy (int @var{stmt}, int @var{loop}, string @var{array}, bool @var{allow_extra_read} = False, int @var{fastest_changing_dimension} = -1, int @var{stride_padding} = 1, int @var{alignment_padding} = 0, int @var{memory_type} = 0)
@deftypefnx {Transform} {} Datacopy (set<tuple<int, vector<int>>>> @var{refs}, int @var{loop}, bool @var{allow_extra_read} = False, int @var{fastest_changing_dimension} = -1, int @var{stride_padding} = 1, int @var{alignment_padding} = 0, int @var{memory_type} = 0)
@table @var
@item array
all array accesses in the subloop with this array name.

@item refs
@math{[(stmt\#, [ref\#1, ref\#2, \dots]),\dots]}, array number followed by order. Such as @math{C = C * B}
have accessing order @math{C^0 = C^1 * B^2}.

@item loop
inside which loop level the data footprint is copied and put right before this loop.

@item allow_extra_read
whether extra data copy is allowed to simplify read copy loop.

@item fastest_changing_dimension
-1: no change in array layout @*
d: contiguous array elements in the memory at d-th dimension

@item stride_padding
0: keep the original data layout in all dimensions @*
1: compressed array layout. @*
d: accessing the fastest-changing-dimension in stride d, while other array dimensions are compressed.

@item alignment_padding
0: keep the original data layout in all dimensions @*
d(@math{>1}): the size of the fastest changing dimension is multiples of d @*
d(@math{<-1}): the size of the fastest changing dimension is coprime with @math{|d|} @*
@end table
@end deftypefn

@multitable @columnfractions .50 .50 
@item
@b{Python Script}
@smallformat
@cartouche
@verbatim
from chill import *
source('dist.c')
procedure('mm')
loop(0)
known(' ambn > 0 ')
datacopy(1,3, 'C')
print_code()
@end verbatim
@end cartouche
@end smallformat
@tab @b{Original code}
@smallformat
@cartouche
@verbatim
void mm(float **A, float **B, float **C,
    int ambn, int an, int bm) {
  int i, j, n;
  for(i = 0; i < an; i++)
    for(j = 0; j < bm; j++) {
      C[i][j] = 0.0f;
      for(n = 0; n < ambn; n++)
        C[i][j] += A[i][n] * B[n][j];
  }
}
@end verbatim
@end cartouche
@end smallformat
@end multitable

@multitable @columnfractions .50 .50
@item
@b{Output on stdout}
@smallformat
@cartouche
@verbatim
if (bm >= 1) {
  for(t2 = 0; t2 <= an-1; t2++) {
    for(t4 = 0; t4 <= bm-1; t4++) {
      s0(t2,t4,0);
      s1(t2,t4,0);
      for(t6 = 1; t6 <= ambn-1; t6++) {
        s1(t2,t4,t6);
      }
      s2(t2,t4);
    }
  }
}
@end verbatim
@end cartouche
@end smallformat
@tab @b{Transformed code}
@smallformat
@cartouche
@verbatim
void mm( float **A, float **B, float **C,
    int ambn, int an, int bm )
{
  float newVariable0;
  int i, j, n;
  if (1 <= bm) {
    for (i = 0; i <= (an - 1); i += 1)
    for (j = 0; j <= (bm - 1); j += 1) {
      newVariable0 = 0.0f;
      newVariable0 += (A[i][0] * B[0][j]);
      for (n = 1; n <= (ambn - 1);
                            n += 1)
        newVariable0 += A[i][n]
                            * B[n][j];
      C[i][j] = newVariable0;
    }
  }
}
@end verbatim
@end cartouche
@end smallformat
@end multitable

@unnumberedsubsec Unroll
@c Unroll
@deftypefn {Transform} {} unroll (int @var{stmt}, int @var{loop}, int @var{unroll_amount}, int @var{cleanup_split_level})
@deftypefnx {Transform} {} unroll_extra (int @var{stmt}, int @var{loop}, int @var{unroll_amount}, int @var{cleanup_split_level})
The @code{unroll} transformation unrolls a specified number of iterations of a statement inside the loop at level @var{loop}.
@code{unroll_extra} is the same as unroll except the cleanup loop is fully unrolled whenever possible
@end deftypefn

@c The unroll command has four forms:
@c unroll (expr, number, expr)
@c unroll (expr, number, expr, expr)
@c unroll_extra (expr, number, expr)
@c unroll_extra (expr, number, expr, expr)
@c The unroll command @dots{}
@c unroll         stmt#
@c                loop level to unroll
@c                unroll amount
@c                  = 0 means fully unroll the loop if the number of iterations
@c                      can be determined statically, otherwise no unrolling
@c                  = 1 means no unrolling
@c                  = d means loop body unrolled d times and then fused together
@c                      if it is legal
@c                cleanup code splitted at loop level
@c                  (default to unroll loop level)
@c unroll_extra   stmt#
@c                loop level to unroll
@c                unroll_amount
@c                  same as unroll except the cleanup loop is fully unrolled
@c                  whenever possible
@c                cleanup code splitted at loop level
@c                  (default to unroll loop level)
@multitable @columnfractions .50 .50 
@item
@b{Python Script}
@smallformat
@cartouche
@verbatim
from chill import *
source('mm.c')
procedure('mm')
loop(0)
known('ambn > 0', 'an > 0', 'bm > 0')
distribute([0,1], 1)
unroll(1, 3, 4)
print_code()
@end verbatim
@end cartouche
@end smallformat
@tab @b{Original code}
@smallformat
@cartouche
@verbatim
void mm(float **A, float **B, float **C, 
     int ambn, int an, int bm) {
  int i, j, n;
  for(i = 0; i < an; i++)
    for(j = 0; j < bm; j++) {
      C[i][j] = 0.0f;
      for(n = 0; n < ambn; n++)
        C[i][j] += A[i][n] * B[n][j];
    }
}
@end verbatim
@end cartouche
@end smallformat
@end multitable

@multitable @columnfractions .50 .50
@item
@b{Output on stdout}
@smallformat
@cartouche
@verbatim
for(t2 = 0; t2 <= an-1; t2++) {
  for(t4 = 0; t4 <= bm-1; t4++) {
    s0(t2,t4,0);
  }
}
for(t2 = 0; t2 <= an-1; t2++) {
  for(t4 = 0; t4 <= bm-1; t4++) {
    s2(t2,t4);
    for(t6 = 0; t6 <= -over1+ambn-1; 
        t6 += 4) {
      s1(t2,t4,t6);
      s4(t2,t4,t6);
    }
    for(t6 = max(0, ambn-over1); 
        t6 <= ambn-1; t6++) {
      s3(t2,t4,t6);
    }
  }
}
@end verbatim
@end cartouche
@end smallformat
@tab @b{Transformed code}
@smallformat
@cartouche
@verbatim
#define __rose_gt(x,y) ((x)>(y)?(x):(y))

void mm(float **A, float **B, float **C,
        int ambn, int an, int bm)
{
  int i, j, n, over1;
  over1 = 0;
  for (i = 0; i <= an - 1; i += 1) 
    for (j = 0; j <= bm - 1; j += 1) 
      C[i][j] = 0.0f;
  for (i = 0; i <= an - 1; i += 1) 
    for (j = 0; j <= bm - 1; j += 1) {
      over1 = ambn % 4;
      for (n = 0; n <= -over1 + ambn - 1; 
           n += 4) {
        C[i][j] += (A[i][n]*B[n][j]);
        C[i][j] += (A[i][n+1]*B[n+1][j]);
        C[i][j] += (A[i][n+2]*B[n+2][j]);
        C[i][j] += (A[i][n+3]*B[n+3][j]);
      }
      for (n = __rose_gt(0,ambn - over1); 
           n <= ambn - 1; n += 1) 
        C[i][j] += (A[i][n] * B[n][j]);
    }
}
@end verbatim
@end cartouche
@end smallformat
@end multitable

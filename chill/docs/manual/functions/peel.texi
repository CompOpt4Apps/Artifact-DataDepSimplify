@unnumberedsubsec Peel
@c Peel
@deftypefn {Transform} {} peel (int @var{stmt}, int @var{loop}, int @var{amount} = 1)
The @code{peel} transformation unrolls a specified number of iterations of a statement from the beginning or the end of a loop at level @var{loop}.

If @var{amount} is positive then statements are peeled from the start of the loop, if negative then the statements are peeled from the end.
@end deftypefn

@multitable @columnfractions .50 .50 
@item
@b{Python Script}
@smallformat
@cartouche
@verbatim
from chill import *
source('mm.c')
procedure('mm')
loop(0)
known(['ambn > 4', 'an > 0', 'bm > 0'])
peel(1,3,4)
print_code()
@end verbatim
@end cartouche
@end smallformat
@tab @b{Original code}
@smallformat
@cartouche
@verbatim
void mm(float **A, float **B, float **C, 
        int ambn, int an, int bm) {
  int i, j, n;
  for(i = 0; i < an; i++)
    for(j = 0; j < bm; j++) {
      C[i][j] = 0.0f;
      for(n = 0; n < ambn; n++)
        C[i][j] += A[i][n] * B[n][j];
    }
}
@end verbatim
@end cartouche
@end smallformat
@end multitable

@multitable @columnfractions .50 .50
@item
@b{Output on stdout}
@smallformat
@cartouche
@verbatim
for(t2 = 0; t2 <= an-1; t2++) {
  for(t4 = 0; t4 <= bm-1; t4++) {
    s2(t2,t4,0);
    s3(t2,t4,0);
    s4(t2,t4,1);
    s5(t2,t4,2);
    s6(t2,t4,3);
    for(t6 = 4; t6 <= ambn-1; t6++) {
      s1(t2,t4,t6);
    }
  }
}
@end verbatim
@end cartouche
@end smallformat
@tab @b{Transformed code}
@smallformat
@cartouche
@verbatim
void mm(float **A, float **B, float **C,
        int ambn, int an, int bm) {
  int i, j, n;
  for (i = 0; i <= an - 1; i += 1)  { 
    for (j = 0; j <= bm - 1; j += 1) {
      C[i][j] = 0.0f;
      C[i][j] += (A[i][0] * B[0][j]);
      if(2 <= ambn) {
        C[i][j] += (A[i][1] * B[1][j]);
        if(3 <= ambn) {
          C[i][j] += (A[i][2] * B[2][j]);
          if(4 <= ambn)
            C[i][j] += (A[i][3] * B[3][j]);
        }
      }
    }
  }
}
@end verbatim
@end cartouche
@end smallformat
@end multitable

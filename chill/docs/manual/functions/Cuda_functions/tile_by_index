@unnumberedsubsec Tile_by_index
@deftypefn {Transform} {} tile_by_index ( vector<string> @var{tile_indices}, vector<int> @var{tile_sizes}, map<string:string> @var{control_loop},  vector<string> @var{FinalOrder}, TileMethod @var{method} = 0)

The @code{tile} transformation allows a loop dimension to be segregated into tiles, the execution of which are scheduled by a control loop placed outside the tiled loop. The statements and surrounding loops inside the control loops will be executed a tile at a time along the tiled dimension.

The loop nest to tile is specified by @var{tile_indices}. The argument @var{tile_sizes} specifies the tile size, a value of 0 indicates no tiling, a value of 1 is similar to loop interchange and a value greater than 1 sets the tile size to that value. The argument @var{control_loop} specifies the loop level where the controlling loop should be placed, the default is 1 or the outermost loop. The argument @var{method} specifies the tiling method, a value of 0 indicates that the index value of the control loop is the actual index to the start of the tile and is known as a ``strided tile'', a value of 1 indicates that the index value of control loop is the value of the tile and must be multiplied by @var{tile_size} to get the index to the start of the tile.
@end deftypefn

@multitable @columnfractions .50 .50 
@item
@b{Python Script}
@smallformat
@cartouche
@verbatim
read_IR("normalMM")
TI=16
TJ=16
tile_by_index(["i","j"], [TI, TJ], 
{'l1_control': "ii", 'l2_control':"jj"}, 
["ii","jj", "i", "j"], None)
print_code()
@end verbatim
@end cartouche
@end smallformat
@tab @b{Original code}
@smallformat
@cartouche
@verbatim
#define N 1024

void normalMM(float c[N][N], float a[N], 
              float b[N]) {
  int i, j;

  for (i = 0; i < N; i++)
    for (j = 0; j < N; j++)
        a[i] = a[i] + c[i][j] * b[j];
}
@end verbatim
@end cartouche
@end smallformat
@end multitable

@multitable @columnfractions .50 .50
@item
@b{Output on stdout}
@smallformat
@cartouche
@verbatim



curOrder: ii,jj,i,j
idxNames: ii,jj,i,j
for(t2 = 0; t2 <= 63; t2++) {
  for(t4 = 0; t4 <= 63; t4++) {
    for(t6 = 16*t2; t6 <= 16*t2+15; t6++) {
      for(t8 = 16*t4; t8 <= 16*t4+15; t8++) {
        s0(t2,t6,t8);
      }
    }
  }
}


@end verbatim
@end cartouche
@end smallformat
@tab @b{Transformed code}
@smallformat
@cartouche
@verbatim
#define N 1024

void normalMM(float c[1024][1024],
              float a[1024], 
              float b[1024]) {
  int chill_t5;
  int chill_t4;
  int i;
  int j;
  for (i = 0; i < 1024; i++) 
    for (j = 0; j < 1024; j++) 
      a[chill_t4] = a[chill_t4] + 
      c[chill_t4][chill_t5] * 
      b[chill_t5];
}
@end verbatim
@end cartouche
@end smallformat
@end multitable

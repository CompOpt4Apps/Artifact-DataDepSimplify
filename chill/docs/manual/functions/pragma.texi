@unnumberedsubsec pragma
The @code{pragma} command inserts an arbitrary pragma at the specified loop and statement number. 
@deftypefn {Transform} {} pragma (int @var{loop_level}, int @var{stmt_number}, str @var{pragma_text})


@end deftypefn

@multitable @columnfractions .50 .50 
@item
@b{Python Script}
@smallformat
@cartouche
@verbatim
from chill import *

source('distribute.c')
destination('pragma1modified.c')

procedure('mm')

loop(0)

known('ambn > 0')
known('an > 0')
known('bm > 0')

distribute([0,1], 1)

pragma(0, 2, 'some pragma')
@end verbatim
@end cartouche
@end smallformat
@tab @b{Original code}
@smallformat
@cartouche
@verbatim
void mm(float **A, float **B, float **C,
        int ambn, int an, int bm) {
  int i, j, n;

  for(i = 0; i < an; i++) {
    for(j = 0; j < bm; j++) {
      C[i][j] = 0.0f;
      for(n = 0; n < ambn; n++) {
        C[i][j] += A[i][n] * B[n][j];
      }
    }
  }
}
@end verbatim
@end cartouche
@end smallformat
@end multitable

@multitable @columnfractions .50 .50
@item

@tab @b{Transformed code}
@smallformat
@cartouche
@verbatim
void mm(float **A, float **B, float **C,
        int ambn, int an, int bm) {
  int t6;
  int t4;
  int t2;
  for (t2 = 0; t2 <= an - 1; t2 += 1) 
    #pragma some pragma
    for (t4 = 0; t4 <= bm - 1; t4 += 1) 
      C[t2][t4] = 0.0f;
  for (t2 = 0; t2 <= an - 1; t2 += 1) 
    for (t4 = 0; t4 <= bm - 1; t4 += 1) 
      for (t6 = 0; t6 <= ambn - 1; t6 += 1) 
        C[t2][t4] += A[t2][t6] * B[t6][t4];
}
@end verbatim
@end cartouche
@end smallformat
@end multitable
